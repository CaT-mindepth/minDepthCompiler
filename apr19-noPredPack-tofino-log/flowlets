running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_1. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f9eedbefbe0>, 'write': <dependencyGraph.Statement object at 0x7f9eecbcc3a0>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f9eecbcc6d0>, 'write': <dependencyGraph.Statement object at 0x7f9eecbcc790>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f9eedbefbe0>, 'write': <dependencyGraph.Statement object at 0x7f9eecbcc3a0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f9eecbcc6d0>, 'write': <dependencyGraph.Statement object at 0x7f9eecbcc790>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f9eecbcca60>, <dependencyGraph.Codelet object at 0x7f9eecbcca00>, <dependencyGraph.Codelet object at 0x7f9eecbcc100>, <dependencyGraph.Codelet object at 0x7f9eecbcc0a0>, <dependencyGraph.Codelet object at 0x7f9eecbcc8e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f9eecbcca00>, <dependencyGraph.Codelet object at 0x7f9eecbcc0a0>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out
Stored read, write flank variables
{'pkt_last_time00', 'pkt_last_time01', 'pkt_saved_hop01', 'pkt_saved_hop00'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt_last_time01', 'pkt__br_tmp1'}
{'pkt_next_hop0', 'pkt_last_time01', 'pkt__br_tmp1'}
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop01;

curr line: 	int pkt_saved_hop00;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_saved_hop01;

 > FOUND OUT LINE : 	_out[2] = pkt_saved_hop01;

> found out variable:  pkt_saved_hop01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_saved_hop01
Constructing new SALU: id= 0  metadata_lo= pkt__br_tmp1  metadata_hi= pkt_new_hop  register_lo= saved_hop  register_hi= 0  output_dst= pkt_saved_hop01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 6 30 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 30, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_hi 2 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 2, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - 0 ) + 1 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-0)+1)!=0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - 0) + 1) != 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time00;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_last_time00;

 > FOUND OUT LINE : 	_out[2] = pkt_last_time00;

> found out variable:  pkt_last_time00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_last_time00
Constructing new SALU: id= 1  metadata_lo= pkt_last_time01  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt_last_time00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 30 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 30, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = register_hi == 0
process_salu_function: parsing  condition_hi ; rhs =  register_hi==0
    ( line =    bit condition_hi_s55 = register_hi_1 == 0;
  )
demangled line:  bit condition_lo = ( 0 - register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (0-register_lo)==0
    ( line =    bit condition_lo_s67 = (0 - register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
filename_to_compname: filename =  comp_6_stateless_pkt_last_time01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_last_time01_bnd_1.sk.out
['comp_6']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_2. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f338c0cabe0>, 'write': <dependencyGraph.Statement object at 0x7f338b0a73a0>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f338b0a76d0>, 'write': <dependencyGraph.Statement object at 0x7f338b0a7790>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f338c0cabe0>, 'write': <dependencyGraph.Statement object at 0x7f338b0a73a0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f338b0a76d0>, 'write': <dependencyGraph.Statement object at 0x7f338b0a7790>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f338b0a7a60>, <dependencyGraph.Codelet object at 0x7f338b0a7a00>, <dependencyGraph.Codelet object at 0x7f338b0a7100>, <dependencyGraph.Codelet object at 0x7f338b0a70a0>, <dependencyGraph.Codelet object at 0x7f338b0a78e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f338b0a7a00>, <dependencyGraph.Codelet object at 0x7f338b0a70a0>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out
Stored read, write flank variables
{'pkt_saved_hop01', 'pkt_last_time00', 'pkt_last_time01', 'pkt_saved_hop00'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt_last_time01', 'pkt__br_tmp1'}
{'pkt_next_hop0', 'pkt_last_time01', 'pkt__br_tmp1'}
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop01;

curr line: 	int pkt_saved_hop00;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_saved_hop01;

 > FOUND OUT LINE : 	_out[2] = pkt_saved_hop01;

> found out variable:  pkt_saved_hop01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_saved_hop01
Constructing new SALU: id= 0  metadata_lo= pkt_new_hop  metadata_hi= pkt__br_tmp1  register_lo= saved_hop  register_hi= 0  output_dst= pkt_saved_hop01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 3 metadata_lo 5 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_lo, 5, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 3 metadata_hi register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_hi, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_hi ) - 0 ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_hi)-0)+1)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_hi) - 0) + 1) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_lo ) + 3 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_lo)+3)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_lo_0) + 3) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time00;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_last_time00;

 > FOUND OUT LINE : 	_out[2] = pkt_last_time00;

> found out variable:  pkt_last_time00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_last_time00
Constructing new SALU: id= 1  metadata_lo= pkt_last_time01  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt_last_time00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 9 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 9, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 3 5 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 5, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 16 8 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 16, 8, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( 0 - metadata_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (0-metadata_lo)>0
    ( line =    bit condition_hi_s55 = (0 - metadata_lo) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi+register_lo)+1)==0
    ( line =    bit condition_lo_s67 = ((metadata_hi + register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
filename_to_compname: filename =  comp_6_stateless_pkt_last_time01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_last_time01_bnd_1.sk.out
['comp_6']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_3. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7f9790f776d0>, 'write': <dependencyGraph.Statement object at 0x7f9790f77790>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f9791f99be0>, 'write': <dependencyGraph.Statement object at 0x7f9790f773a0>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f9790f776d0>, 'write': <dependencyGraph.Statement object at 0x7f9790f77790>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f9791f99be0>, 'write': <dependencyGraph.Statement object at 0x7f9790f773a0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f9790f77a60>, <dependencyGraph.Codelet object at 0x7f9790f77a00>, <dependencyGraph.Codelet object at 0x7f9790f77070>, <dependencyGraph.Codelet object at 0x7f9790f77130>, <dependencyGraph.Codelet object at 0x7f9790f778e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f9790f77a00>, <dependencyGraph.Codelet object at 0x7f9790f77130>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out
Stored read, write flank variables
{'pkt_saved_hop00', 'pkt_saved_hop01', 'pkt_last_time01', 'pkt_last_time00'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt_last_time01', 'pkt__br_tmp1'}
{'pkt_next_hop0', 'pkt_last_time01', 'pkt__br_tmp1'}
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop01;

curr line: 	int pkt_saved_hop00;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_saved_hop01;

 > FOUND OUT LINE : 	_out[2] = pkt_saved_hop01;

> found out variable:  pkt_saved_hop01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_saved_hop01
Constructing new SALU: id= 0  metadata_lo= pkt__br_tmp1  metadata_hi= pkt_new_hop  register_lo= saved_hop  register_hi= 0  output_dst= pkt_saved_hop01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 7 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 7, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 31 25 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, 25, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = metadata_lo > 0
process_salu_function: parsing  condition_hi ; rhs =  metadata_lo>0
    ( line =    bit condition_hi_s55 = metadata_lo > 0;
  )
demangled line:  bit condition_lo = ( metadata_hi + 1 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi+1)<0
    ( line =    bit condition_lo_s67 = (metadata_hi + 1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time00;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_last_time00;

 > FOUND OUT LINE : 	_out[2] = pkt_last_time00;

> found out variable:  pkt_last_time00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_last_time00
Constructing new SALU: id= 1  metadata_lo= pkt_last_time01  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt_last_time00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_hi 10 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_hi, 10, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 20 14 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 20, 14, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_hi ) + 1 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_hi)+1)!=0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_hi_1) + 1) != 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+1)>0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
filename_to_compname: filename =  comp_6_stateless_pkt_last_time01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_last_time01_bnd_1.sk.out
['comp_6']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_4. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7f39634036d0>, 'write': <dependencyGraph.Statement object at 0x7f3963403790>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f3964425be0>, 'write': <dependencyGraph.Statement object at 0x7f39634033a0>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f39634036d0>, 'write': <dependencyGraph.Statement object at 0x7f3963403790>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f3964425be0>, 'write': <dependencyGraph.Statement object at 0x7f39634033a0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3963403a60>, <dependencyGraph.Codelet object at 0x7f3963403a00>, <dependencyGraph.Codelet object at 0x7f3963403070>, <dependencyGraph.Codelet object at 0x7f3963403130>, <dependencyGraph.Codelet object at 0x7f39634038e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f3963403a00>, <dependencyGraph.Codelet object at 0x7f3963403130>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_last_time00', 'pkt_saved_hop00', 'pkt_saved_hop01'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_last_time01', 'pkt_next_hop0', 'pkt__br_tmp1'}
{'pkt_last_time01', 'pkt_next_hop0', 'pkt__br_tmp1'}
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop01;

curr line: 	int pkt_saved_hop00;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_saved_hop01;

 > FOUND OUT LINE : 	_out[2] = pkt_saved_hop01;

> found out variable:  pkt_saved_hop01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_saved_hop01
Constructing new SALU: id= 0  metadata_lo= pkt_new_hop  metadata_hi= pkt__br_tmp1  register_lo= saved_hop  register_hi= 0  output_dst= pkt_saved_hop01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 0 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 0, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 28 12 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 28, 12, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) + register_lo ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)+register_lo)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) + register_lo_0) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_hi ) - 0 ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_hi)-0)+1)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_hi) - 0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time00;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_last_time00;

 > FOUND OUT LINE : 	_out[2] = pkt_last_time00;

> found out variable:  pkt_last_time00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_last_time00
Constructing new SALU: id= 1  metadata_lo= pkt_last_time01  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt_last_time00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 24 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 24, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 21 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 21, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( 0 - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (0-register_lo)>0
    ( line =    bit condition_lo_s67 = (0 - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
filename_to_compname: filename =  comp_6_stateless_pkt_last_time01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_last_time01_bnd_1.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_5. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f2f99f58be0>, 'write': <dependencyGraph.Statement object at 0x7f2f98f353a0>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f2f98f356d0>, 'write': <dependencyGraph.Statement object at 0x7f2f98f35790>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f2f99f58be0>, 'write': <dependencyGraph.Statement object at 0x7f2f98f353a0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f2f98f356d0>, 'write': <dependencyGraph.Statement object at 0x7f2f98f35790>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2f98f35a60>, <dependencyGraph.Codelet object at 0x7f2f98f35a00>, <dependencyGraph.Codelet object at 0x7f2f98f35100>, <dependencyGraph.Codelet object at 0x7f2f98f350a0>, <dependencyGraph.Codelet object at 0x7f2f98f358e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2f98f35a00>, <dependencyGraph.Codelet object at 0x7f2f98f350a0>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop01', 'pkt_last_time00', 'pkt_saved_hop00'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt__br_tmp1', 'pkt_last_time01'}
{'pkt_next_hop0', 'pkt__br_tmp1', 'pkt_last_time01'}
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop01;

curr line: 	int pkt_saved_hop00;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_saved_hop01;

 > FOUND OUT LINE : 	_out[2] = pkt_saved_hop01;

> found out variable:  pkt_saved_hop01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_saved_hop01
Constructing new SALU: id= 0  metadata_lo= pkt_new_hop  metadata_hi= pkt__br_tmp1  register_lo= saved_hop  register_hi= 0  output_dst= pkt_saved_hop01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi 31 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 31, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 30 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 30, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 metadata_hi 1 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_hi, 1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( 0 - metadata_hi ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (0-metadata_hi)<0
    ( line =    bit condition_hi_s55 = (0 - metadata_hi) < 0;
  )
demangled line:  bit condition_lo = ( 0 - metadata_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (0-metadata_lo)<0
    ( line =    bit condition_lo_s67 = (0 - metadata_lo) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time00;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_last_time00;

 > FOUND OUT LINE : 	_out[2] = pkt_last_time00;

> found out variable:  pkt_last_time00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_last_time00
Constructing new SALU: id= 1  metadata_lo= pkt_last_time01  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt_last_time00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 9 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 9, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 3 5 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 5, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 16 8 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 16, 8, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( 0 - metadata_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (0-metadata_lo)>0
    ( line =    bit condition_hi_s55 = (0 - metadata_lo) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi+register_lo)+1)==0
    ( line =    bit condition_lo_s67 = ((metadata_hi + register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_6. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7fb5642ea6d0>, 'write': <dependencyGraph.Statement object at 0x7fb5642ea790>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fb56530dbe0>, 'write': <dependencyGraph.Statement object at 0x7fb5642ea3a0>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fb5642ea6d0>, 'write': <dependencyGraph.Statement object at 0x7fb5642ea790>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fb56530dbe0>, 'write': <dependencyGraph.Statement object at 0x7fb5642ea3a0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb5642eaa60>, <dependencyGraph.Codelet object at 0x7fb5642eaa00>, <dependencyGraph.Codelet object at 0x7fb5642ea100>, <dependencyGraph.Codelet object at 0x7fb5642ea0a0>, <dependencyGraph.Codelet object at 0x7fb5642ea8e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb5642eaa00>, <dependencyGraph.Codelet object at 0x7fb5642ea0a0>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop01', 'pkt_last_time00', 'pkt_saved_hop00'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1', 'pkt_last_time01', 'pkt_next_hop0'}
{'pkt__br_tmp1', 'pkt_last_time01', 'pkt_next_hop0'}
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop01;

curr line: 	int pkt_saved_hop00;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_saved_hop01;

 > FOUND OUT LINE : 	_out[2] = pkt_saved_hop01;

> found out variable:  pkt_saved_hop01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_saved_hop01
Constructing new SALU: id= 0  metadata_lo= pkt__br_tmp1  metadata_hi= pkt_new_hop  register_lo= saved_hop  register_hi= 0  output_dst= pkt_saved_hop01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 5 26 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(5, 26, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_hi ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_hi)+1)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_hi_1) + 1) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_hi ) + register_lo ) + 2 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_hi)+register_lo)+2)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_hi) + register_lo_0) + 2) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time00;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_last_time00;

 > FOUND OUT LINE : 	_out[2] = pkt_last_time00;

> found out variable:  pkt_last_time00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_last_time00
Constructing new SALU: id= 1  metadata_lo= pkt_last_time01  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt_last_time00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 24 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 24, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 21 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 21, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( 0 - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (0-register_lo)>0
    ( line =    bit condition_lo_s67 = (0 - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_7. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7f17f978c6d0>, 'write': <dependencyGraph.Statement object at 0x7f17f978c790>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f17fa7afbe0>, 'write': <dependencyGraph.Statement object at 0x7f17f978c3a0>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f17f978c6d0>, 'write': <dependencyGraph.Statement object at 0x7f17f978c790>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f17fa7afbe0>, 'write': <dependencyGraph.Statement object at 0x7f17f978c3a0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f17f978ca60>, <dependencyGraph.Codelet object at 0x7f17f978ca00>, <dependencyGraph.Codelet object at 0x7f17f978c070>, <dependencyGraph.Codelet object at 0x7f17f978c130>, <dependencyGraph.Codelet object at 0x7f17f978c8e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f17f978ca00>, <dependencyGraph.Codelet object at 0x7f17f978c130>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out
Stored read, write flank variables
{'pkt_last_time00', 'pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_last_time01'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1', 'pkt_next_hop0', 'pkt_last_time01'}
{'pkt__br_tmp1', 'pkt_next_hop0', 'pkt_last_time01'}
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop01;

curr line: 	int pkt_saved_hop00;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_saved_hop01;

 > FOUND OUT LINE : 	_out[2] = pkt_saved_hop01;

> found out variable:  pkt_saved_hop01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_saved_hop01
Constructing new SALU: id= 0  metadata_lo= pkt_new_hop  metadata_hi= pkt__br_tmp1  register_lo= saved_hop  register_hi= 0  output_dst= pkt_saved_hop01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 14 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 14, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( 0 - metadata_hi ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (0-metadata_hi)<0
    ( line =    bit condition_hi_s55 = (0 - metadata_hi) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+1)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time00;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_last_time00;

 > FOUND OUT LINE : 	_out[2] = pkt_last_time00;

> found out variable:  pkt_last_time00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_last_time00
Constructing new SALU: id= 1  metadata_lo= pkt_last_time01  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt_last_time00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 3 8 5 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, 8, 5, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 0 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 26 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 26, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 17 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 17, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_hi ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_hi)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_hi_1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_8. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7fc472d3a6d0>, 'write': <dependencyGraph.Statement object at 0x7fc472d3a790>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fc473d5dbe0>, 'write': <dependencyGraph.Statement object at 0x7fc472d3a3a0>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fc472d3a6d0>, 'write': <dependencyGraph.Statement object at 0x7fc472d3a790>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fc473d5dbe0>, 'write': <dependencyGraph.Statement object at 0x7fc472d3a3a0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc472d3aa60>, <dependencyGraph.Codelet object at 0x7fc472d3aa00>, <dependencyGraph.Codelet object at 0x7fc472d3a100>, <dependencyGraph.Codelet object at 0x7fc472d3a0a0>, <dependencyGraph.Codelet object at 0x7fc472d3a8e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc472d3aa00>, <dependencyGraph.Codelet object at 0x7fc472d3a0a0>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out
Stored read, write flank variables
{'pkt_saved_hop00', 'pkt_last_time01', 'pkt_saved_hop01', 'pkt_last_time00'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1', 'pkt_last_time01', 'pkt_next_hop0'}
{'pkt__br_tmp1', 'pkt_last_time01', 'pkt_next_hop0'}
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop00;

curr line: 	int pkt_saved_hop01;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_saved_hop01;

 > FOUND OUT LINE : 	_out[2] = pkt_saved_hop01;

> found out variable:  pkt_saved_hop01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_saved_hop01
Constructing new SALU: id= 0  metadata_lo= pkt__br_tmp1  metadata_hi= pkt_new_hop  register_lo= saved_hop  register_hi= 0  output_dst= pkt_saved_hop01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 11 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 11, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 0 19 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 19, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 25 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 25, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_hi 1 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_hi ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_hi)+1)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_hi_1) + 1) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_hi ) - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_hi)-register_lo)+1)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_hi) - register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time00;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_last_time00;

 > FOUND OUT LINE : 	_out[2] = pkt_last_time00;

> found out variable:  pkt_last_time00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_last_time00
Constructing new SALU: id= 1  metadata_lo= pkt_last_time01  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt_last_time00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_hi 10 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_hi, 10, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 5 9 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 5, 9, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 20 14 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 20, 14, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( register_hi + 1 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (register_hi+1)<0
    ( line =    bit condition_hi_s55 = (register_hi_1 + 1) < 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_hi ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_hi)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_hi_1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_9. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f95a3c51be0>, 'write': <dependencyGraph.Statement object at 0x7f95a2c2e3a0>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f95a2c2e6d0>, 'write': <dependencyGraph.Statement object at 0x7f95a2c2e790>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f95a3c51be0>, 'write': <dependencyGraph.Statement object at 0x7f95a2c2e3a0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f95a2c2e6d0>, 'write': <dependencyGraph.Statement object at 0x7f95a2c2e790>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f95a2c2ea60>, <dependencyGraph.Codelet object at 0x7f95a2c2ea00>, <dependencyGraph.Codelet object at 0x7f95a2c2e100>, <dependencyGraph.Codelet object at 0x7f95a2c2e0a0>, <dependencyGraph.Codelet object at 0x7f95a2c2e8e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f95a2c2ea00>, <dependencyGraph.Codelet object at 0x7f95a2c2e0a0>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop00', 'pkt_last_time00', 'pkt_saved_hop01'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt_last_time01', 'pkt__br_tmp1'}
{'pkt_next_hop0', 'pkt_last_time01', 'pkt__br_tmp1'}
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop00;

curr line: 	int pkt_saved_hop01;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_saved_hop01;

 > FOUND OUT LINE : 	_out[2] = pkt_saved_hop01;

> found out variable:  pkt_saved_hop01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_saved_hop01
Constructing new SALU: id= 0  metadata_lo= pkt__br_tmp1  metadata_hi= pkt_new_hop  register_lo= saved_hop  register_hi= 0  output_dst= pkt_saved_hop01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 30 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 30, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 0 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 23 26 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 23, 26, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_hi 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_hi + register_lo ) + 16 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_hi+register_lo)+16)==0
    ( line =    bit condition_hi_s55 = ((metadata_hi + register_lo_0) + 16) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_hi ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_hi)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_hi_1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time00;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_last_time00;

 > FOUND OUT LINE : 	_out[2] = pkt_last_time00;

> found out variable:  pkt_last_time00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_last_time00
Constructing new SALU: id= 1  metadata_lo= pkt_last_time01  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt_last_time00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 0 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 9 30 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 9, 30, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 0 7 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 7, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_hi + register_hi ) + 29 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_hi+register_hi)+29)>0
    ( line =    bit condition_hi_s55 = ((metadata_hi + register_hi_1) + 29) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi 0 update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, 0, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  0  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  true
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi 0 update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, 0, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  0  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi 0 update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, 0, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  0  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi 0 update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, 0, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  0  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
filename_to_compname: filename =  comp_6_stateless_pkt_last_time01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_last_time01_bnd_1.sk.out
['comp_6']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_10. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
enabling predecessor packing?  False
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fc5a2e62be0>, 'write': <dependencyGraph.Statement object at 0x7fc5a1e3f3a0>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7fc5a1e3f6d0>, 'write': <dependencyGraph.Statement object at 0x7fc5a1e3f790>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fc5a2e62be0>, 'write': <dependencyGraph.Statement object at 0x7fc5a1e3f3a0>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fc5a1e3f6d0>, 'write': <dependencyGraph.Statement object at 0x7fc5a1e3f790>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc5a1e3fa60>, <dependencyGraph.Codelet object at 0x7fc5a1e3fa00>, <dependencyGraph.Codelet object at 0x7fc5a1e3f100>, <dependencyGraph.Codelet object at 0x7fc5a1e3f0a0>, <dependencyGraph.Codelet object at 0x7fc5a1e3f8e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc5a1e3fa00>, <dependencyGraph.Codelet object at 0x7fc5a1e3f0a0>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop00', 'pkt_last_time00', 'pkt_saved_hop01'}
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_last_time01', 'pkt__br_tmp1', 'pkt_next_hop0'}
{'pkt_last_time01', 'pkt__br_tmp1', 'pkt_next_hop0'}
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop00;

curr line: 	int pkt_saved_hop01;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_saved_hop01;

 > FOUND OUT LINE : 	_out[2] = pkt_saved_hop01;

> found out variable:  pkt_saved_hop01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_saved_hop01
Constructing new SALU: id= 0  metadata_lo= pkt__br_tmp1  metadata_hi= pkt_new_hop  register_lo= saved_hop  register_hi= 0  output_dst= pkt_saved_hop01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 3 31 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, 31, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 5 28 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(5, 28, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 3 31 register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, 31, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) - 0 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)-0)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) - 0) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_hi ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_hi)+1)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_hi_1) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time00;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_last_time00;

 > FOUND OUT LINE : 	_out[2] = pkt_last_time00;

> found out variable:  pkt_last_time00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_last_time00
Constructing new SALU: id= 1  metadata_lo= pkt_last_time01  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt_last_time00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 1 9 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 1, 9, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 7 8 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, 8, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) - register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)-register_lo)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) - register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt_last_time01_bnd_1.sk.out
filename_to_compname: filename =  comp_6_stateless_pkt_last_time01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt_last_time01_bnd_1.sk.out
['comp_6']
----------- writing ternary sketch file
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_5_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
preprocessor time:
