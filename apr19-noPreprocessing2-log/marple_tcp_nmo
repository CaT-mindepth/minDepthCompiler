running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p_pkt_0', 'p_state_000']
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_pkt_0<p_state_001&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f1c524f6bb0>, 'write': <dependencyGraph.Statement object at 0x7f1c514d38e0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f1c514d3700>, 'write': <dependencyGraph.Statement object at 0x7f1c514d3820>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1c524f6bb0>, 'write': <dependencyGraph.Statement object at 0x7f1c514d38e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f1c514d3700>, 'write': <dependencyGraph.Statement object at 0x7f1c514d3820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
SCC 2
v p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
SCC 3
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
v p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1c514d3940>, <dependencyGraph.Codelet object at 0x7f1c514d3160>, <dependencyGraph.Codelet object at 0x7f1c514d3910>, <dependencyGraph.Codelet object at 0x7f1c514d30a0>]
p_state_100 = state_1;
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1c514d30a0>, <dependencyGraph.Codelet object at 0x7f1c514d3940>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp00'}
p_state_001  is write flank
elements in v_outputs:  {'p_state_001', 'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1
2   p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1
3   p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
4   state_0 = p_state_001
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  4
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;', 'p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;', 'p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'p_state_100', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['p__br_tmp00', 'p_pkt_0', 'p_state_001', 'state_1', 'p__br_tmp30']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp00', 'p_pkt_0', 'p_state_001', 'p__br_tmp30']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p__br_tmp00', 'p_pkt_0', 'p_state_001', 'state_1', 'p__br_tmp20']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp00', 'p_pkt_0', 'p_state_001', 'p__br_tmp20']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p_state_000', 'p_pkt_0', 'state_1', 'p__br_tmp20', 'p__br_tmp30']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p_pkt_0', 'p__br_tmp20', 'p__br_tmp30']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0']
redundant outputs ['p__br_tmp10', 'p__br_tmp00', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f1c514d3f10>]
adj_inputs ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
redundant outputs ['p__br_tmp10', 'p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  6
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs ['p__br_tmp10', 'p__br_tmp00', 'p_state_000']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp00', 'p_pkt_0', 'p_state_001', 'p__br_tmp30']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp00', 'p_pkt_0', 'p_state_001', 'p__br_tmp20']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
 --- cannot fold. too many stateless inputs:  ['p_state_000', 'p_pkt_0', 'p__br_tmp20', 'p__br_tmp30']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00'}
{'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp00'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
u:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001&&1==1))&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000&&1==1)))&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 ~~~| state var:  ['state_1']
Error: Cannot have > 2 metadata fields in a stateful ALU. Component:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 problematic inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 problematic state vars:  ['state_1']
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;

lhs p__br_tmp00 rhs !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p_pkt_0', 'p_state_000']
p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;

lhs p__br_tmp20 rhs !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_pkt_0<p_state_001&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f1961aac700>, 'write': <dependencyGraph.Statement object at 0x7f1961aac820>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f1962acfbb0>, 'write': <dependencyGraph.Statement object at 0x7f1961aac8e0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f1961aac700>, 'write': <dependencyGraph.Statement object at 0x7f1961aac820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1962acfbb0>, 'write': <dependencyGraph.Statement object at 0x7f1961aac8e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1 stmts len 1
p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
SCC 2
v p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
SCC 3
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 stmts len 1
p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
v p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1961aac940>, <dependencyGraph.Codelet object at 0x7f1961aac0a0>, <dependencyGraph.Codelet object at 0x7f1961aac910>, <dependencyGraph.Codelet object at 0x7f1961aac040>]
p_state_100 = state_1;
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
p_state_000 = state_0;
p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1961aac940>, <dependencyGraph.Codelet object at 0x7f1961aac040>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00', 'p_state_001'}
p_state_001  is write flank
elements in v_outputs:  {'p__br_tmp00', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
2   p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
3   p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
4   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  4
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_100', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;', 'p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;', 'p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_101', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['p_pkt_0', 'state_1', 'p__br_tmp00', 'p__br_tmp30', 'p_state_001']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p__br_tmp00', 'p__br_tmp30', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p__br_tmp20', 'p_pkt_0', 'state_1', 'p__br_tmp00', 'p_state_001']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp20', 'p_pkt_0', 'p__br_tmp00', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p_state_000', 'p__br_tmp20', 'p_pkt_0', 'state_1', 'p__br_tmp30']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p__br_tmp20', 'p_pkt_0', 'p__br_tmp30']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'state_1', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0']
redundant outputs ['p__br_tmp00', 'p__br_tmp10', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f1961aacf10>]
adj_inputs ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
redundant outputs ['p_state_000', 'p__br_tmp10', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['p__br_tmp00', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  6
 * recursive_merge: finished processing  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'state_1', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs ['p_state_000', 'p__br_tmp00', 'p__br_tmp10']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'state_1', 'p__br_tmp00', 'p__br_tmp30'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
 --- cannot fold. too many stateless inputs:  ['p_pkt_0', 'p__br_tmp00', 'p__br_tmp30', 'p_state_001']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp20', 'p_pkt_0', 'p__br_tmp00', 'p_state_001']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
 --- cannot fold. too many stateless inputs:  ['p_state_000', 'p__br_tmp20', 'p_pkt_0', 'p__br_tmp30']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30'}
{'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
u:  p__br_tmp20 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 ~~~| state var:  ['state_1']
Error: Cannot have > 2 metadata fields in a stateful ALU. Component:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 problematic inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 problematic state vars:  ['state_1']
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);

lhs p__br_tmp00 rhs !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;

lhs p__br_tmp10 rhs !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_pkt_0', 'p_state_000']
p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;

lhs p__br_tmp30 rhs !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;

lhs p__br_tmp40 rhs !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;

lhs p__br_tmp50 rhs 1==1&&1==1&&p_pkt_0<p_state_001&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
RAW p_state_000 = state_0; p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000);
RAW p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000);
RAW p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f7a5cd7fbb0>, 'write': <dependencyGraph.Statement object at 0x7f7a5bd5c5b0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f7a5bd5c700>, 'write': <dependencyGraph.Statement object at 0x7f7a5bd5c190>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f7a5cd7fbb0>, 'write': <dependencyGraph.Statement object at 0x7f7a5bd5c5b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f7a5bd5c700>, 'write': <dependencyGraph.Statement object at 0x7f7a5bd5c190>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1 stmts len 1
p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
SCC 2
v p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1 stmts len 1
p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
SCC 3
v p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1 stmts len 1
p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) stmts len 1
p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
v p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 stmts len 1
p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
v p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7a5bd5c970>, <dependencyGraph.Codelet object at 0x7f7a5bd5caf0>, <dependencyGraph.Codelet object at 0x7f7a5bd5cbb0>, <dependencyGraph.Codelet object at 0x7f7a5bd5cc40>, <dependencyGraph.Codelet object at 0x7f7a5bd5cca0>]
p_state_100 = state_1;
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
p_state_000 = state_0;
p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1;
p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f7a5bd5cca0>, <dependencyGraph.Codelet object at 0x7f7a5bd5c970>}
total number of nodes created:  5
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00', 'p_state_001'}
p_state_001  is write flank
elements in v_outputs:  {'p__br_tmp00', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1)
2   p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
3   p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1
4   p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000)
5   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  5
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  6
finding node for codelet:  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1)
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  7
---------------number of nodes in the graph:  7
number of SCC nodes post splitting:  7
total number of nodes created:  7
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  7
number of nodes in comp_graph:  7
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);', 'p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;', 'p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;', 'p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'p_state_101', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['p__br_tmp40', 'p_state_001', 'state_1', 'p_pkt_0', 'p__br_tmp00', 'p__br_tmp50']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp40', 'p_state_001', 'p_pkt_0', 'p__br_tmp00', 'p__br_tmp50']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p_state_001', 'state_1', 'p__br_tmp30', 'p_pkt_0', 'p__br_tmp00', 'p__br_tmp50']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_001', 'p__br_tmp30', 'p_pkt_0', 'p__br_tmp00', 'p__br_tmp50']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p__br_tmp40', 'p_state_001', 'state_1', 'p__br_tmp30', 'p_pkt_0', 'p__br_tmp00']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp40', 'p_state_001', 'p__br_tmp30', 'p_pkt_0', 'p__br_tmp00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p__br_tmp40', 'state_1', 'p__br_tmp30', 'p_pkt_0', 'p__br_tmp50', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp40', 'p__br_tmp30', 'p_pkt_0', 'p__br_tmp50', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp40', 'state_1', 'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp50'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);  with *************************
[<dependencyGraph.Statement object at 0x7f7a5bd5ceb0>]
adj_inputs ['state_1', 'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50']
redundant outputs ['p_state_001', 'p__br_tmp20', 'p__br_tmp10', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  7
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
 * recursive_merge: node ::  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
 node outputs:  ['p__br_tmp50']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp40', 'state_1', 'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp50'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs ['p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00', 'p_state_000']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
 * recursive_merge: node ::  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
 node outputs:  ['p__br_tmp40']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp40', 'state_1', 'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp50'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
 * recursive_merge: node ::  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp40', 'state_1', 'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp50'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp40', 'p_state_001', 'p_pkt_0', 'p__br_tmp00', 'p__br_tmp50']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
 --- cannot fold. too many stateless inputs:  ['p_state_001', 'p__br_tmp30', 'p_pkt_0', 'p__br_tmp00', 'p__br_tmp50']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp40', 'p_state_001', 'p__br_tmp30', 'p_pkt_0', 'p__br_tmp00']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
 --- cannot fold. too many stateless inputs:  ['p__br_tmp40', 'p__br_tmp30', 'p_pkt_0', 'p__br_tmp50', 'p_state_000']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp00', 'p__br_tmp50', 'p__br_tmp30', 'p__br_tmp40'}
{'p__br_tmp00', 'p__br_tmp50', 'p__br_tmp30', 'p__br_tmp40'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_0<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
u:  p__br_tmp30 = !(!(!(1==1&&!(p_pkt_0<p_state_001&&1==1))))&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp40 = !(1==1&&!(p_pkt_0<p_state_001&&1==1))&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp50 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_0<p_state_000&&1==1))))&&1==1);
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
Error: stateful update does not fit in the stateful ALU.
node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50']
outputs:  ['state_1']
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p_pkt_0', 'p_state_000']
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_pkt_0<p_state_001&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fe39070b700>, 'write': <dependencyGraph.Statement object at 0x7fe39070b820>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fe39172ebb0>, 'write': <dependencyGraph.Statement object at 0x7fe39070b8e0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe39070b700>, 'write': <dependencyGraph.Statement object at 0x7fe39070b820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe39172ebb0>, 'write': <dependencyGraph.Statement object at 0x7fe39070b8e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
SCC 2
v p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
SCC 3
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
v p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe39070b940>, <dependencyGraph.Codelet object at 0x7fe39070b040>, <dependencyGraph.Codelet object at 0x7fe39070b910>, <dependencyGraph.Codelet object at 0x7fe39070b070>]
p_state_100 = state_1;
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe39070b940>, <dependencyGraph.Codelet object at 0x7fe39070b070>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp00'}
p_state_001  is write flank
elements in v_outputs:  {'p_state_001', 'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1
2   p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1
3   p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
4   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  4
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;', 'p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;', 'p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100', 'p_state_101']
 node inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['p__br_tmp30', 'p_pkt_0', 'p_state_001', 'p__br_tmp00', 'state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp30', 'p_pkt_0', 'p_state_001', 'p__br_tmp00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p_pkt_0', 'p_state_001', 'p__br_tmp00', 'state_1', 'p__br_tmp20']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_state_001', 'p__br_tmp00', 'p__br_tmp20']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p__br_tmp30', 'p_pkt_0', 'state_1', 'p_state_000', 'p__br_tmp20']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp30', 'p_pkt_0', 'p_state_000', 'p__br_tmp20']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'state_1', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs ['p__br_tmp00', 'p_state_000', 'p__br_tmp10']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'state_1', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'state_1', 'p__br_tmp00', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp00', 'p__br_tmp10']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fe39070bf10>]
adj_inputs ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp10']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['p__br_tmp00', 'state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  6
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp30', 'p_pkt_0', 'p_state_001', 'p__br_tmp00']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['p_pkt_0', 'p_state_001', 'p__br_tmp00', 'p__br_tmp20']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp30', 'p_pkt_0', 'p_state_000', 'p__br_tmp20']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20'}
{'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
u:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_0<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 ~~~| state var:  ['state_1']
Error: Cannot have > 2 metadata fields in a stateful ALU. Component:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 problematic inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 problematic state vars:  ['state_1']
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);

lhs p__br_tmp00 rhs !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p_pkt_0', 'p_state_000']
p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;

lhs p__br_tmp20 rhs !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_pkt_0<p_state_001&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
RAW p_state_000 = state_0; p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f8e6f261bb0>, 'write': <dependencyGraph.Statement object at 0x7f8e6e23f8e0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f8e6e23f700>, 'write': <dependencyGraph.Statement object at 0x7f8e6e23f820>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f8e6f261bb0>, 'write': <dependencyGraph.Statement object at 0x7f8e6e23f8e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f8e6e23f700>, 'write': <dependencyGraph.Statement object at 0x7f8e6e23f820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1 stmts len 1
p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
SCC 2
v p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
SCC 3
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) stmts len 1
p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
v p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f8e6e23f940>, <dependencyGraph.Codelet object at 0x7f8e6e23f040>, <dependencyGraph.Codelet object at 0x7f8e6e23f910>, <dependencyGraph.Codelet object at 0x7f8e6e23f070>]
p_state_100 = state_1;
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
p_state_000 = state_0;
p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f8e6e23f940>, <dependencyGraph.Codelet object at 0x7f8e6e23f070>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00', 'p_state_001'}
p_state_001  is write flank
elements in v_outputs:  {'p__br_tmp00', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1)
2   p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1
3   p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
4   state_0 = p_state_001
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  4
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1)
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;', 'p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;', 'p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'p_state_101', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['p__br_tmp00', 'p__br_tmp30', 'p_pkt_0', 'p_state_001', 'state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp00', 'p__br_tmp30', 'p_pkt_0', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p__br_tmp20', 'p__br_tmp00', 'p_pkt_0', 'p_state_001', 'state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp20', 'p__br_tmp00', 'p_pkt_0', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p__br_tmp20', 'p__br_tmp30', 'p_pkt_0', 'p_state_000', 'state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp20', 'p__br_tmp30', 'p_pkt_0', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs ['p__br_tmp00', 'p_state_000', 'p__br_tmp10']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000']
redundant outputs ['p__br_tmp00', 'p_state_001', 'p__br_tmp10']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);  with *************************
[<dependencyGraph.Statement object at 0x7f8e6e23ff10>]
adj_inputs ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp10']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['p__br_tmp00', 'state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  6
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp00', 'p__br_tmp30', 'p_pkt_0', 'p_state_001']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp20', 'p__br_tmp00', 'p_pkt_0', 'p_state_001']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
 --- cannot fold. too many stateless inputs:  ['p__br_tmp20', 'p__br_tmp30', 'p_pkt_0', 'p_state_000']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00'}
{'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
u:  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1);
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp20 = !(!(1==1&&p_pkt_0<p_state_001))&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_0<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 ~~~| state var:  ['state_1']
Error: Cannot have > 2 metadata fields in a stateful ALU. Component:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 problematic inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 problematic state vars:  ['state_1']
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;

lhs p__br_tmp00 rhs !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1;

lhs p__br_tmp10 rhs !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1;

lhs p__br_tmp20 rhs !(!(!(p_pkt_0<p_state_000)))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1;

lhs p__br_tmp30 rhs !(p_pkt_0<p_state_000)&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p_pkt_0', 'p_state_000']
p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;

lhs p__br_tmp40 rhs !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;

lhs p__br_tmp50 rhs !(!(!(!(p_pkt_0<p_state_001))))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;

lhs p__br_tmp60 rhs !(!(p_pkt_0<p_state_001))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp70 = p_pkt_0<p_state_001&&1==1;

lhs p__br_tmp70 rhs p_pkt_0<p_state_001&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1;
RAW p_state_000 = state_0; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000);
RAW p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000);
RAW p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000);
RAW p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp70 = p_pkt_0<p_state_001&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fa5da70b700>, 'write': <dependencyGraph.Statement object at 0x7fa5da70b370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fa5db72ebb0>, 'write': <dependencyGraph.Statement object at 0x7fa5da70b3d0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fa5da70b700>, 'write': <dependencyGraph.Statement object at 0x7fa5da70b370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa5db72ebb0>, 'write': <dependencyGraph.Statement object at 0x7fa5da70b3d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  14
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1 stmts len 1
p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
SCC 2
v p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1 stmts len 1
p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
SCC 3
v p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1 stmts len 1
p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
SCC 4
v p__br_tmp70 = p_pkt_0<p_state_001&&1==1 stmts len 1
p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
SCC 5
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 stmts len 1
p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
v p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 stmts len 1
p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1;
v p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 stmts len 1
p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1;
v p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 stmts len 1
p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa5da70bb50>, <dependencyGraph.Codelet object at 0x7fa5da70bd90>, <dependencyGraph.Codelet object at 0x7fa5da70be20>, <dependencyGraph.Codelet object at 0x7fa5da70be80>, <dependencyGraph.Codelet object at 0x7fa5da70bee0>, <dependencyGraph.Codelet object at 0x7fa5da70bc10>]
p_state_100 = state_1;
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
p_state_000 = state_0;
p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1;
p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1;
p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa5da70bc10>, <dependencyGraph.Codelet object at 0x7fa5da70bb50>}
total number of nodes created:  6
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00', 'p_state_001'}
p_state_001  is write flank
elements in v_outputs:  {'p__br_tmp00', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1
2   p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1
3   p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1
4   p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1
5   p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000)
6   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp20  not in state vars
 statement:  p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  6
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  7
finding node for codelet:  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  8
---------------number of nodes in the graph:  8
number of SCC nodes post splitting:  8
total number of nodes created:  8
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  8
number of nodes in comp_graph:  8
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp70 = p_pkt_0<p_state_001&&1==1;', 'p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;', 'p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;', 'p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;', 'p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp50', 'p_pkt_0', 'p__br_tmp60', 'p__br_tmp70', 'p_state_001']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp00', 'p__br_tmp50', 'p_pkt_0', 'p__br_tmp60', 'p__br_tmp70', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1', 'p__br_tmp40', 'p__br_tmp00', 'p_pkt_0', 'p__br_tmp60', 'p__br_tmp70', 'p_state_001']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp40', 'p__br_tmp00', 'p_pkt_0', 'p__br_tmp60', 'p__br_tmp70', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1', 'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp50', 'p_pkt_0', 'p__br_tmp70', 'p_state_001']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp40', 'p__br_tmp00', 'p__br_tmp50', 'p_pkt_0', 'p__br_tmp70', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1', 'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp50', 'p_pkt_0', 'p__br_tmp60', 'p_state_001']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp40', 'p__br_tmp00', 'p__br_tmp50', 'p_pkt_0', 'p__br_tmp60', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1', 'p_state_000', 'p__br_tmp40', 'p__br_tmp50', 'p_pkt_0', 'p__br_tmp60', 'p__br_tmp70']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p__br_tmp40', 'p__br_tmp50', 'p_pkt_0', 'p__br_tmp60', 'p__br_tmp70']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
 node outputs:  ['p__br_tmp70']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs ['p_state_000', 'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp10']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
 * recursive_merge: node ::  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
 node outputs:  ['p__br_tmp60']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
 * recursive_merge: node ::  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
 node outputs:  ['p__br_tmp50']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
 * recursive_merge: node ::  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
 node outputs:  ['p__br_tmp40']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001', 'p_pkt_0']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0']
redundant outputs ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp10', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fa5da7401c0>]
adj_inputs ['state_1', 'p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70']
redundant outputs ['p_state_000', 'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp10', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  8
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp00', 'p__br_tmp50', 'p_pkt_0', 'p__br_tmp60', 'p__br_tmp70', 'p_state_001']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp40', 'p__br_tmp00', 'p_pkt_0', 'p__br_tmp60', 'p__br_tmp70', 'p_state_001']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp40', 'p__br_tmp00', 'p__br_tmp50', 'p_pkt_0', 'p__br_tmp70', 'p_state_001']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp40', 'p__br_tmp00', 'p__br_tmp50', 'p_pkt_0', 'p__br_tmp60', 'p_state_001']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
 --- cannot fold. too many stateless inputs:  ['p_state_000', 'p__br_tmp40', 'p__br_tmp50', 'p_pkt_0', 'p__br_tmp60', 'p__br_tmp70']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70'}
{'p__br_tmp40', 'p__br_tmp00', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_0<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_0<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
u:  p__br_tmp40 = !(!(!(!(!(!(p_pkt_0<p_state_001))))))&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp50 = !(!(!(!(p_pkt_0<p_state_001))))&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp60 = !(!(p_pkt_0<p_state_001))&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp70 = p_pkt_0<p_state_001&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_0<p_state_000)))))))&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
Error: stateful update does not fit in the stateful ALU.
node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70']
outputs:  ['state_1']
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));

lhs p__br_tmp00 rhs !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1))
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));

lhs p__br_tmp10 rhs 1==1&&!(!(p_pkt_0<p_state_100&&1==1))
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;

lhs p__br_tmp20 rhs 1==1&&1==1&&p_pkt_0<p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_state_000', 'p_state_000']
p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1);

lhs p__br_tmp30 rhs !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1);

lhs p__br_tmp40 rhs 1==1&&!(p_pkt_0<p_state_100&&1==1)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
RAW p_state_100 = state_1; p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
RAW p_state_100 = state_1; p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
RAW p_state_100 = state_1; p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1);
RAW p_state_100 = state_1; p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1);
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1)); p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100);
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f04cf593bb0>, 'write': <dependencyGraph.Statement object at 0x7f04ce571610>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f04ce571700>, 'write': <dependencyGraph.Statement object at 0x7f04ce5717c0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f04cf593bb0>, 'write': <dependencyGraph.Statement object at 0x7f04ce571610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f04ce571700>, 'write': <dependencyGraph.Statement object at 0x7f04ce5717c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  11
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1)) stmts len 1
p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
SCC 2
v p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100 stmts len 1
p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
SCC 3
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)) stmts len 1
p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
v p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1) stmts len 1
p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1);
v p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1) stmts len 1
p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1);
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f04ce571a30>, <dependencyGraph.Codelet object at 0x7f04ce571a00>, <dependencyGraph.Codelet object at 0x7f04ce571ac0>, <dependencyGraph.Codelet object at 0x7f04ce571b50>]
p_state_000 = state_0;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
p_state_100 = state_1;
p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1);
p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1);
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f04ce571a30>, <dependencyGraph.Codelet object at 0x7f04ce571b50>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_100', 'p__br_tmp00'}
p_state_100  is read flank
elements in v_outputs:  {'p_state_100', 'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1))
2   p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)
3   p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1)
4   p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100)
5   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp40  not in state vars
 statement:  p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1)
 rhs_vars:  ['p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1))
 rhs_vars:  ['p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp30  not in state vars
 statement:  p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)
 rhs_vars:  ['p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  4
output  p_state_100    read_flanks:  ['p_state_100']   write_flanks:  []
output  p__br_tmp00    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1))
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)) p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1) p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1))
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001', 'p_state_101', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)) p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1) p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)) p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1) p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)) p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1) p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)) p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1) p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));', 'p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;', 'p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));', 'p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'p_state_001', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
redundant outputs []
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['p_state_100', 'state_0', 'p__br_tmp00', 'p_pkt_0', 'p__br_tmp20']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p__br_tmp00', 'p_pkt_0', 'p__br_tmp20']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['p_state_100', 'p__br_tmp10', 'state_0', 'p__br_tmp00', 'p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p__br_tmp10', 'p__br_tmp00', 'p_pkt_0']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['p_state_100', 'p__br_tmp10', 'state_0', 'p_pkt_0', 'p__br_tmp20']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p__br_tmp10', 'p_pkt_0', 'p__br_tmp20']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'state_0', 'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
     |  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_0', 'p_state_100', 'p_pkt_0', 'p_state_100', 'p_pkt_0', 'p_state_100']
redundant outputs ['p__br_tmp40', 'p__br_tmp00', 'p__br_tmp30', 'p_state_101']
state_var ['state_1']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_pkt_0', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'state_0', 'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
     |  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_0', 'p_state_100', 'p_pkt_0', 'p_state_100', 'p_pkt_0', 'p_state_100']
redundant outputs []
state_var ['state_1']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
 * recursive_merge: node ::  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_pkt_0', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp20', 'state_0', 'p__br_tmp10', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
     |  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_0', 'p_state_100', 'p_pkt_0', 'p_state_100', 'p_pkt_0', 'p_state_100']
redundant outputs []
state_var ['state_1']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
 --- cannot fold. too many stateless inputs:  ['p_state_100', 'p__br_tmp00', 'p_pkt_0', 'p__br_tmp20']
trying to fold node:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
 --- cannot fold. too many stateless inputs:  ['p_state_100', 'p__br_tmp10', 'p__br_tmp00', 'p_pkt_0']
trying to fold node:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
 --- cannot fold. too many stateless inputs:  ['p_state_100', 'p__br_tmp10', 'p_pkt_0', 'p__br_tmp20']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00'}
{'p__br_tmp20', 'p__br_tmp10', 'p__br_tmp00'}
u:  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
v:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
u:  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
v:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
u:  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
v:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp10 = 1==1&&!(!(p_pkt_0<p_state_100&&1==1));
u:  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp20 = 1==1&&1==1&&p_pkt_0<p_state_100;
u:  p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1)); p__br_tmp30 = !(!(!(p_pkt_0<p_state_100&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_0<p_state_100&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = !(!(!(!(p_pkt_0<p_state_100&&1==1))&&1==1));
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
 ~~~| state var:  ['state_0']
Error: Cannot have > 2 metadata fields in a stateful ALU. Component:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 problematic inputs:  ['state_0', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20']
 problematic state vars:  ['state_0']
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));

lhs p__br_tmp00 rhs 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)))
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_pkt_0<p_state_000)&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p_pkt_0', 'p_state_000']
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(!(p_pkt_0<p_state_001))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;

lhs p__br_tmp30 rhs 1==1&&p_pkt_0<p_state_001&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f92378cebb0>, 'write': <dependencyGraph.Statement object at 0x7f92368ac8e0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f92368ac700>, 'write': <dependencyGraph.Statement object at 0x7f92368ac820>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f92378cebb0>, 'write': <dependencyGraph.Statement object at 0x7f92368ac8e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f92368ac700>, 'write': <dependencyGraph.Statement object at 0x7f92368ac820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
SCC 2
v p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1 stmts len 1
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
SCC 3
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) stmts len 1
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
v p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f92368ac940>, <dependencyGraph.Codelet object at 0x7f92368ac0a0>, <dependencyGraph.Codelet object at 0x7f92368ac910>, <dependencyGraph.Codelet object at 0x7f92368ac040>]
p_state_100 = state_1;
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f92368ac940>, <dependencyGraph.Codelet object at 0x7f92368ac040>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp00'}
p_state_001  is write flank
elements in v_outputs:  {'p_state_001', 'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)))
2   p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1
3   p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
4   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)))
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  4
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)))
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)))
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_001', 'p_state_000', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;', 'p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;', 'p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_101', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['p_state_001', 'state_1', 'p__br_tmp30', 'p_pkt_0', 'p__br_tmp00']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_001', 'p__br_tmp30', 'p_pkt_0', 'p__br_tmp00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p_state_001', 'state_1', 'p_pkt_0', 'p__br_tmp00', 'p__br_tmp20']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_001', 'p_pkt_0', 'p__br_tmp00', 'p__br_tmp20']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p__br_tmp30', 'p_state_000', 'p_pkt_0', 'state_1', 'p__br_tmp20']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp30', 'p_state_000', 'p_pkt_0', 'p__br_tmp20']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'state_1', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs ['p_state_000', 'p__br_tmp10', 'p__br_tmp00']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'state_1', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp30', 'p__br_tmp00', 'state_1', 'p__br_tmp20'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000']
redundant outputs ['p_state_001', 'p__br_tmp10', 'p__br_tmp00']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));  with *************************
[<dependencyGraph.Statement object at 0x7f92368acf10>]
adj_inputs ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp10']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  6
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
 --- cannot fold. too many stateless inputs:  ['p_state_001', 'p__br_tmp30', 'p_pkt_0', 'p__br_tmp00']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
 --- cannot fold. too many stateless inputs:  ['p_state_001', 'p_pkt_0', 'p__br_tmp00', 'p__br_tmp20']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
 --- cannot fold. too many stateless inputs:  ['p__br_tmp30', 'p_state_000', 'p_pkt_0', 'p__br_tmp20']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20'}
{'p__br_tmp30', 'p__br_tmp00', 'p__br_tmp20'}
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
u:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000)));
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp20 = 1==1&&!(!(p_pkt_0<p_state_001))&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_0<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_0<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp30 = 1==1&&p_pkt_0<p_state_001&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 ~~~| state var:  ['state_1']
Error: Cannot have > 2 metadata fields in a stateful ALU. Component:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 problematic inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 problematic state vars:  ['state_1']
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_000']
p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100);
RAW p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fc239422bb0>, 'write': <dependencyGraph.Statement object at 0x7fc238400670>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fc238400700>, 'write': <dependencyGraph.Statement object at 0x7fc2384007f0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fc239422bb0>, 'write': <dependencyGraph.Statement object at 0x7fc238400670>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fc238400700>, 'write': <dependencyGraph.Statement object at 0x7fc2384007f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
v p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc238400880>, <dependencyGraph.Codelet object at 0x7fc238400040>, <dependencyGraph.Codelet object at 0x7fc2384009a0>]
p_state_100 = state_1;
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
p_state_000 = state_0;
p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc238400880>, <dependencyGraph.Codelet object at 0x7fc2384009a0>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp00'}
p_state_001  is write flank
elements in v_outputs:  {'p_state_001', 'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
2   p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp00', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  4
finding node for codelet:  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;', 'p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'p_state_100', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp10']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['p__br_tmp00', 'state_1', 'p_state_001', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp00', 'p_state_001', 'p_pkt_0']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['p__br_tmp10', 'p_pkt_0', 'state_1', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p__br_tmp10', 'p_pkt_0', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 node outputs:  ['p__br_tmp10']
 node inputs:  ['p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp10', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0']
redundant outputs ['p__br_tmp00', 'p_state_000']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fc2384006a0>]
adj_inputs ['state_1', 'p__br_tmp00', 'p__br_tmp10']
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['p__br_tmp10', 'state_0', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp10', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000']
redundant outputs ['p__br_tmp00', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fc238400d60>]
adj_inputs ['state_1', 'p__br_tmp00', 'p__br_tmp10']
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['p__br_tmp00', 'state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  5
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_001', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp00', 'p_state_001', 'p_pkt_0']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['p__br_tmp10', 'p_pkt_0', 'p_state_000']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp10', 'p__br_tmp00'}
{'p__br_tmp10', 'p__br_tmp00'}
u:  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp10)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_0<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp10 = 1==1&&1==1&&p_pkt_0<p_state_001&&1==1&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p__br_tmp10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp10 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp10_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp10_bnd_1.sk.out
['comp_5']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_6_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p__br_tmp00_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_5', 4: 'comp_6'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_5', 4: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc238436490>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_5', 4: 'comp_6'}
Stateless ALU id 3 has output p__br_tmp10
 *** found dependency between stateless ALU  3  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_5', 4: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_5', 4: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc238436490>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_5', 4: 'comp_6'}
Stateless ALU id 4 has output p__br_tmp00
 *** found dependency between stateless ALU  4  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
3,
+---> dependencies of ALU  3 : 
0,
+---> dependencies of ALU  4 : 
0,
# alus: =  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  4  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 5}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 4), (2, 3), (3, 0), (4, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 99 rows, 67 columns and 212 nonzeros
Model fingerprint: 0xcc33b3fc
Model has 60 general constraints
Variable types: 0 continuous, 67 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 11 columns
Presolve time: 0.00s
Presolved: 104 rows, 56 columns, 248 nonzeros
Variable types: 0 continuous, 56 integer (50 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 2
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
************************************************
Obj: 2
number of stages:  3
stage:  2.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
 > get_alu_stage: table  0 , alu_id =  0 :  2.0
alu  0  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7fc238436310>, 0), (<alus.DominoALU object at 0x7fc238436340>, 1)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fc238436490>, 0), (<alus.DominoGenericSALU object at 0x7fc238400610>, 1), (<alus.DominoGenericSALU object at 0x7fc2384362e0>, 2)]
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  4  and  0
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 4), (2, 3), (3, 0), (4, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p__br_tmp10'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp10', 'immediate_operand': '0'}, {'id': 4, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp00', 'immediate_operand': '3'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(1, 4), (2, 3), (3, 0), (4, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp00', 'p__br_tmp10'], 'outputs': ['state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp10', 'immediate_operand': '0'}, {'id': 4, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': 'p__br_tmp00', 'immediate_operand': '3'}]}
Time taken: 7.542826414108276 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;

lhs p__br_tmp00 rhs !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(p_pkt_0<p_state_000)&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p_pkt_0', 'p_state_000']
p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;

lhs p__br_tmp20 rhs !(!(p_pkt_0<p_state_001)&&1==1)&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;

lhs p__br_tmp30 rhs p_pkt_0<p_state_001&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f1dfe9a3bb0>, 'write': <dependencyGraph.Statement object at 0x7f1dfd9808e0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f1dfd980700>, 'write': <dependencyGraph.Statement object at 0x7f1dfd980820>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1dfe9a3bb0>, 'write': <dependencyGraph.Statement object at 0x7f1dfd9808e0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f1dfd980700>, 'write': <dependencyGraph.Statement object at 0x7f1dfd980820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1 stmts len 1
p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
SCC 2
v p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
SCC 3
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 stmts len 1
p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
v p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1dfd980940>, <dependencyGraph.Codelet object at 0x7f1dfd980040>, <dependencyGraph.Codelet object at 0x7f1dfd980910>, <dependencyGraph.Codelet object at 0x7f1dfd980070>]
p_state_100 = state_1;
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
p_state_000 = state_0;
p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1dfd980940>, <dependencyGraph.Codelet object at 0x7f1dfd980070>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00', 'p_state_001'}
p_state_001  is write flank
elements in v_outputs:  {'p__br_tmp00', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1
2   p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1
3   p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
4   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp00', 'p__br_tmp10', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp10  not in state vars
 statement:  p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  4
output  p__br_tmp00    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  5
finding node for codelet:  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
adding stmt :  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_100', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;', 'p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;', 'p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'p_state_100', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['state_1', 'p_state_001', 'p__br_tmp00', 'p_pkt_0', 'p__br_tmp30']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_001', 'p__br_tmp00', 'p_pkt_0', 'p__br_tmp30']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1', 'p_state_001', 'p__br_tmp20', 'p__br_tmp00', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_001', 'p__br_tmp20', 'p__br_tmp00', 'p_pkt_0']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1', 'p_state_000', 'p__br_tmp20', 'p_pkt_0', 'p__br_tmp30']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p__br_tmp20', 'p_pkt_0', 'p__br_tmp30']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0']
redundant outputs ['p_state_001', 'p__br_tmp10', 'p__br_tmp00']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f1dfd980f10>]
adj_inputs ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp10']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['p__br_tmp00', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  6
 * recursive_merge: finished processing  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
 * recursive_merge: node ::  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
 node outputs:  ['p__br_tmp30']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs ['p_state_000', 'p__br_tmp10', 'p__br_tmp00']
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
 * recursive_merge: node ::  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
 node outputs:  ['p__br_tmp20']
 node inputs:  ['p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
     |  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_pkt_0', 'p_state_001']
redundant outputs []
state_var ['state_0']
redundant outputs []
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_state_001'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_001']
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
 --- cannot fold. too many stateless inputs:  ['p_state_001', 'p__br_tmp00', 'p_pkt_0', 'p__br_tmp30']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
 --- cannot fold. too many stateless inputs:  ['p_state_001', 'p__br_tmp20', 'p__br_tmp00', 'p_pkt_0']
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
 --- cannot fold. too many stateless inputs:  ['p_state_000', 'p__br_tmp20', 'p_pkt_0', 'p__br_tmp30']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20'}
{'p__br_tmp00', 'p__br_tmp30', 'p__br_tmp20'}
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
u:  p__br_tmp20 = !(!(p_pkt_0<p_state_001)&&1==1)&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp30 = p_pkt_0<p_state_001&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_0<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp00 = !(!(!(p_pkt_0<p_state_000)&&1==1))&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 ~~~| state var:  ['state_1']
Error: Cannot have > 2 metadata fields in a stateful ALU. Component:  p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_state_100+1) : (p_state_100); state_1 = p_state_101;
 problematic inputs:  ['state_1', 'p__br_tmp00', 'p__br_tmp20', 'p__br_tmp30']
 problematic state vars:  ['state_1']
preprocessor time:
