running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_000', 'p_state_000']
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f2284d1abb0>, 'write': <dependencyGraph.Statement object at 0x7f2283cf8490>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f2283cf8700>, 'write': <dependencyGraph.Statement object at 0x7f2283cf87f0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2284d1abb0>, 'write': <dependencyGraph.Statement object at 0x7f2283cf8490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f2283cf8700>, 'write': <dependencyGraph.Statement object at 0x7f2283cf87f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2283cf80a0>, <dependencyGraph.Codelet object at 0x7f2283cf89a0>, <dependencyGraph.Codelet object at 0x7f2283cf8130>]
p_state_000 = state_0;
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2283cf80a0>, <dependencyGraph.Codelet object at 0x7f2283cf89a0>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00'}
elements in v_outputs:  {'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
2   p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp00    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000', 'p_state_101', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_state_100']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f2283cf8b20>]
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp00']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_10', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'state_0', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs ['p__br_tmp00', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f2283cf8b20>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['state_1', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10;
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_pkt_0', 'state_1', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f2283cf8b20>]
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp00']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp00'}
{'p_pkt_10', 'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f2283cf8730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f2283cf8eb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f2283cf8730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f2283cf8eb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f2283cf8730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  5
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f2283cf8eb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f2283cf8730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f2283cf8eb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f2283cf8730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp00
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,4,5,
+---> dependencies of ALU  2 : 
1,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  1
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 4), (1, 5), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0xfb3ebc32
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 4
T0_A_1 1
T0_A_2 -0
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  4.0
action:  0
num stages:  5
stage:  1.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
alu  0  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f2283d2e460>, 0), (<alus.DominoALU object at 0x7f2283d2e670>, 1), (<alus.DominoALU object at 0x7f2283d2e430>, 2), (<alus.DominoALU object at 0x7f2283d2e6d0>, 3), (<alus.DominoALU object at 0x7f2283d2e1c0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f2283cf8eb0>, 0), (<alus.DominoGenericSALU object at 0x7f2283cf8730>, 1)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  1
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_100'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '5'}, {'id': 4, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '16'}, {'id': 5, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_100'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '5'}, {'id': 4, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '16'}, {'id': 5, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '1'}]}
Time taken: 12.43757939338684 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_000', 'p_state_000']
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f0043430700>, 'write': <dependencyGraph.Statement object at 0x7f00434307f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f0044452bb0>, 'write': <dependencyGraph.Statement object at 0x7f0043430490>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f0043430700>, 'write': <dependencyGraph.Statement object at 0x7f00434307f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f0044452bb0>, 'write': <dependencyGraph.Statement object at 0x7f0043430490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f00434300a0>, <dependencyGraph.Codelet object at 0x7f00434309a0>, <dependencyGraph.Codelet object at 0x7f0043430130>]
p_state_000 = state_0;
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f00434300a0>, <dependencyGraph.Codelet object at 0x7f00434309a0>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00'}
elements in v_outputs:  {'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
2   p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp00    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'p_state_100', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_state_100']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f0043430b20>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp00', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_10', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs ['p__br_tmp00', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f0043430b20>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['state_1', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10;
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p_pkt_10', 'p_state_100', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f0043430b20>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp00', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp00', 'p_pkt_10'}
{'p__br_tmp00', 'p_pkt_10'}
u:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f0043430eb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 2 has output _out_s12
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f0043430730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f0043430eb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f0043430730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f0043430eb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f0043430730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f0043430eb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 5 has output p__br_tmp00
 *** found dependency between stateless ALU  5  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f0043430730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 5 has output p__br_tmp00
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f0043430730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 6 has output p_pkt_10
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,4,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x216808f3
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 11 rows and 27 columns
Presolve time: 0.01s
Presolved: 123 rows, 66 columns, 290 nonzeros
Variable types: 0 continuous, 66 integer (58 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 4
T0_A_1 1
T0_A_2 2
T0_A_3 -0
T0_A_4 2
T0_A_5 3
T0_A_6 -0
************************************************
Obj: 4
number of stages:  5
stage:  4.0
action:  0
num stages:  5
stage:  1.0
action:  1
num stages:  5
stage:  2.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  3.0
action:  5
num stages:  5
stage:  -0.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
alu  0  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f0043466340>, 0), (<alus.DominoALU object at 0x7f00434663a0>, 1), (<alus.DominoALU object at 0x7f00434664c0>, 2), (<alus.DominoALU object at 0x7f0043466160>, 3), (<alus.DominoALU object at 0x7f0043466190>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f0043430eb0>, 0), (<alus.DominoGenericSALU object at 0x7f0043430730>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 2), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_100'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 4, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '31'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 2), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_100'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 4, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '31'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
Time taken: 13.417864322662354 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_pkt_10>p_state_100&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_000', 'p_state_000']
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f3ad206ebb0>, 'write': <dependencyGraph.Statement object at 0x7f3ad104b490>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f3ad104b700>, 'write': <dependencyGraph.Statement object at 0x7f3ad104b7f0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f3ad206ebb0>, 'write': <dependencyGraph.Statement object at 0x7f3ad104b490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f3ad104b700>, 'write': <dependencyGraph.Statement object at 0x7f3ad104b7f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3ad104b040>, <dependencyGraph.Codelet object at 0x7f3ad104b9a0>, <dependencyGraph.Codelet object at 0x7f3ad104b130>]
p_state_000 = state_0;
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f3ad104b9a0>, <dependencyGraph.Codelet object at 0x7f3ad104b040>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00'}
elements in v_outputs:  {'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1
2   p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp00    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_001', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['p_state_100', 'p_pkt_10', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f3ad104bb20>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_100', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs ['p__br_tmp00', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f3ad104bb20>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['p__br_tmp00', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10;
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_pkt_10', 'p_pkt_0', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f3ad104bb20>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp00', 'p_pkt_10'}
{'p__br_tmp00', 'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1;
v:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
 *** found stateless dependency between ALU  0  and ALU  2
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3ad10822b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 2 has output _out_s12
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f3ad104b730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3ad10822b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12_0
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f3ad104b730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3ad10822b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_1
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f3ad104b730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3ad10822b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 5 has output p__br_tmp00
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f3ad104b730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 5 has output p__br_tmp00
 *** found dependency between stateless ALU  5  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3ad10822b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 6 has output p_pkt_10
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,4,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
1,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x6f1cec5a
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 2
T0_A_3 2
T0_A_4 2
T0_A_5 3
T0_A_6 -0
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  2.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  3.0
action:  5
num stages:  5
stage:  -0.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f3ad1082310>, 0), (<alus.DominoALU object at 0x7f3ad1082340>, 1), (<alus.DominoALU object at 0x7f3ad10824f0>, 2), (<alus.DominoALU object at 0x7f3ad10821c0>, 3), (<alus.DominoALU object at 0x7f3ad1082070>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f3ad10822b0>, 0), (<alus.DominoGenericSALU object at 0x7f3ad104b730>, 1)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '8'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 4, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '29'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '8'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '8'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 4, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '29'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '8'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
Time taken: 14.42809772491455 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_000', 'p_state_000']
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f23d1788bb0>, 'write': <dependencyGraph.Statement object at 0x7f23d0766490>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f23d0766700>, 'write': <dependencyGraph.Statement object at 0x7f23d07667f0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f23d1788bb0>, 'write': <dependencyGraph.Statement object at 0x7f23d0766490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f23d0766700>, 'write': <dependencyGraph.Statement object at 0x7f23d07667f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f23d07660a0>, <dependencyGraph.Codelet object at 0x7f23d07669a0>, <dependencyGraph.Codelet object at 0x7f23d0766130>]
p_state_000 = state_0;
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f23d07660a0>, <dependencyGraph.Codelet object at 0x7f23d07669a0>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00'}
elements in v_outputs:  {'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
2   p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp00    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f23d0766b20>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp00']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_100', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'state_0', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs ['p_state_101', 'p__br_tmp00']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f23d0766b20>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['state_1', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10;
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_pkt_10', 'state_1', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f23d0766b20>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp00']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp00'}
{'p_pkt_10', 'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f23d0766730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f23d0766eb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f23d0766730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f23d0766eb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f23d0766730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f23d0766eb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f23d0766730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f23d0766eb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f23d0766730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp00
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,
+---> dependencies of ALU  2 : 
1,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  1
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 133 rows, 93 columns and 296 nonzeros
Model fingerprint: 0x0cf0cf20
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 7 rows and 25 columns
Presolve time: 0.01s
Presolved: 126 rows, 68 columns, 298 nonzeros
Variable types: 0 continuous, 68 integer (60 binary)
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 4 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 4
T0_A_1 1
T0_A_2 -0
T0_A_3 2
T0_A_4 -0
T0_A_5 -0
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  4.0
action:  0
num stages:  5
stage:  1.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  -0.0
action:  4
num stages:  5
stage:  -0.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
alu  0  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f23d079c460>, 0), (<alus.DominoALU object at 0x7f23d079c670>, 1), (<alus.DominoALU object at 0x7f23d079c430>, 2), (<alus.DominoALU object at 0x7f23d079c6d0>, 3), (<alus.DominoALU object at 0x7f23d079c1c0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f23d0766eb0>, 0), (<alus.DominoGenericSALU object at 0x7f23d0766730>, 1)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  1
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 3), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '13'}, {'id': 5, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 3), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '13'}, {'id': 5, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '1'}]}
Time taken: 13.231809616088867 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_000', 'p_state_000']
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f569489a700>, 'write': <dependencyGraph.Statement object at 0x7f569489a7f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f56958bcbb0>, 'write': <dependencyGraph.Statement object at 0x7f569489a490>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f569489a700>, 'write': <dependencyGraph.Statement object at 0x7f569489a7f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f56958bcbb0>, 'write': <dependencyGraph.Statement object at 0x7f569489a490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f569489a0a0>, <dependencyGraph.Codelet object at 0x7f569489a9a0>, <dependencyGraph.Codelet object at 0x7f569489a130>]
p_state_000 = state_0;
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f569489a0a0>, <dependencyGraph.Codelet object at 0x7f569489a9a0>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00'}
elements in v_outputs:  {'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
2   p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp00    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000', 'p_state_101', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'p_state_100', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_state_100']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f569489ab20>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp00', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_10', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs ['p__br_tmp00', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f569489ab20>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['p__br_tmp00', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10;
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'state_1', 'p_pkt_0', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f569489ab20>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp00', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp00'}
{'p_pkt_10', 'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_2.sk.out
['comp_4']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f569489a730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f569489aeb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f569489a730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f569489aeb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f569489a730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  5
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f569489aeb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f569489a730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f569489aeb0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f569489a730>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp00
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,4,5,
+---> dependencies of ALU  2 : 
1,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  1
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 4), (1, 5), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0xfb3ebc32
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 4
T0_A_1 1
T0_A_2 -0
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  4.0
action:  0
num stages:  5
stage:  1.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
alu  0  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f56948d0460>, 0), (<alus.DominoALU object at 0x7f56948d0670>, 1), (<alus.DominoALU object at 0x7f56948d0430>, 2), (<alus.DominoALU object at 0x7f56948d06d0>, 3), (<alus.DominoALU object at 0x7f56948d01c0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f569489aeb0>, 0), (<alus.DominoGenericSALU object at 0x7f569489a730>, 1)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  1
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 5, 'opcode': 9, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 5, 'opcode': 9, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '0'}]}
Time taken: 13.795973062515259 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp00 = p_pkt_10>p_state_100&&1==1;

lhs p__br_tmp00 rhs p_pkt_10>p_state_100&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_000', 'p_state_000']
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
RAW p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fcc760ee700>, 'write': <dependencyGraph.Statement object at 0x7fcc760ee7f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fcc77111bb0>, 'write': <dependencyGraph.Statement object at 0x7fcc760ee490>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fcc760ee700>, 'write': <dependencyGraph.Statement object at 0x7fcc760ee7f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fcc77111bb0>, 'write': <dependencyGraph.Statement object at 0x7fcc760ee490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = p_pkt_10>p_state_100&&1==1 stmts len 1
p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fcc760ee160>, <dependencyGraph.Codelet object at 0x7fcc760ee9a0>, <dependencyGraph.Codelet object at 0x7fcc760ee1c0>]
p_state_000 = state_0;
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fcc760ee9a0>, <dependencyGraph.Codelet object at 0x7fcc760ee160>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00'}
elements in v_outputs:  {'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = p_pkt_10>p_state_100&&1==1
2   p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp00    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = p_pkt_10>p_state_100&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = p_pkt_10>p_state_100&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = p_pkt_10>p_state_100&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = p_pkt_10>p_state_100&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = p_pkt_10>p_state_100&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_state_100', 'state_0', 'p_pkt_10']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fcc760eeb20>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp00', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_100', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'state_0', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs ['p__br_tmp00', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fcc760eeb20>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['state_1', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
  - recursive_merge: looking at preds of  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10;
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'state_1', 'p_pkt_10', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fcc760eeb20>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp00', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp00', 'p_pkt_10'}
{'p__br_tmp00', 'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
u:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1;
v:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
 *** found stateless dependency between ALU  0  and ALU  2
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fcc761192b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 2 has output _out_s12
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fcc760ee610>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fcc761192b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12_0
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fcc760ee610>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fcc761192b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_1
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fcc760ee610>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fcc761192b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 5 has output p__br_tmp00
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fcc760ee610>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 5 has output p__br_tmp00
 *** found dependency between stateless ALU  5  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fcc761192b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 6 has output p_pkt_10
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,4,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
1,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x6f1cec5a
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 2
T0_A_3 2
T0_A_4 2
T0_A_5 3
T0_A_6 -0
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  2.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  3.0
action:  5
num stages:  5
stage:  -0.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7fcc76119310>, 0), (<alus.DominoALU object at 0x7fcc76119340>, 1), (<alus.DominoALU object at 0x7fcc761194f0>, 2), (<alus.DominoALU object at 0x7fcc761191c0>, 3), (<alus.DominoALU object at 0x7fcc76119070>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fcc761192b0>, 0), (<alus.DominoGenericSALU object at 0x7fcc760ee610>, 1)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '11'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 4, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '0'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '11'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 4, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '0'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
Time taken: 13.434715270996094 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_000', 'p_state_000']
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f8971318700>, 'write': <dependencyGraph.Statement object at 0x7f89713187f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f897233bbb0>, 'write': <dependencyGraph.Statement object at 0x7f8971318490>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f8971318700>, 'write': <dependencyGraph.Statement object at 0x7f89713187f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f897233bbb0>, 'write': <dependencyGraph.Statement object at 0x7f8971318490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f8971318040>, <dependencyGraph.Codelet object at 0x7f89713189a0>, <dependencyGraph.Codelet object at 0x7f8971318130>]
p_state_000 = state_0;
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f89713189a0>, <dependencyGraph.Codelet object at 0x7f8971318040>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00'}
elements in v_outputs:  {'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100
2   p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp00    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'p_state_100', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_state_100']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f8971318b20>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_10', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs ['p__br_tmp00', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f8971318b20>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['p__br_tmp00', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10;
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_100', 'p_pkt_0', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f8971318b20>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp00'}
{'p_pkt_10', 'p__br_tmp00'}
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100;
v:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f897134e2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f897134e2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f8971318670>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f897134e2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f8971318670>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  5
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f897134e2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f8971318670>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f897134e2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 6 has output p__br_tmp00
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f8971318670>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 6 has output p__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,5,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0xe66b0105
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 -0
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f897134e1f0>, 0), (<alus.DominoALU object at 0x7f897134e6a0>, 1), (<alus.DominoALU object at 0x7f897134e3a0>, 2), (<alus.DominoALU object at 0x7f897134e700>, 3), (<alus.DominoALU object at 0x7f897134e460>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f897134e2b0>, 0), (<alus.DominoGenericSALU object at 0x7f8971318670>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '16'}, {'id': 4, 'opcode': 2, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '11'}, {'id': 5, 'opcode': 13, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '16'}, {'id': 4, 'opcode': 2, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '11'}, {'id': 5, 'opcode': 13, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '10'}]}
Time taken: 9.96744966506958 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_10>p_state_100&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_000', 'p_state_000']
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fe47af18bb0>, 'write': <dependencyGraph.Statement object at 0x7fe479ef5490>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fe479ef5700>, 'write': <dependencyGraph.Statement object at 0x7fe479ef57f0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe47af18bb0>, 'write': <dependencyGraph.Statement object at 0x7fe479ef5490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe479ef5700>, 'write': <dependencyGraph.Statement object at 0x7fe479ef57f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe479ef5160>, <dependencyGraph.Codelet object at 0x7fe479ef59a0>, <dependencyGraph.Codelet object at 0x7fe479ef51c0>]
p_state_000 = state_0;
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe479ef59a0>, <dependencyGraph.Codelet object at 0x7fe479ef5160>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00'}
elements in v_outputs:  {'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1
2   p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp00    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_state_100']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fe479ef5b20>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp00']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_10', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'state_0', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs ['p_state_101', 'p__br_tmp00']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fe479ef5b20>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['p__br_tmp00', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10;
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_pkt_0', 'state_1', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fe479ef5b20>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp00']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp00'}
{'p_pkt_10', 'p__br_tmp00'}
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
u:  p__br_tmp00 = 1==1&&p_pkt_10>p_state_100&&1==1;
v:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe479f2b2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe479f2b2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe479ef5670>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe479f2b2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe479ef5670>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe479f2b2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe479ef5670>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe479f2b2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 6 has output p__br_tmp00
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe479ef5670>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 6 has output p__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x82f3ee61
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 11 rows and 27 columns
Presolve time: 0.01s
Presolved: 123 rows, 66 columns, 290 nonzeros
Variable types: 0 continuous, 66 integer (58 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 -0
T0_A_3 2
T0_A_4 2
T0_A_5 -0
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  -0.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7fe479f2b1f0>, 0), (<alus.DominoALU object at 0x7fe479f2b6a0>, 1), (<alus.DominoALU object at 0x7fe479f2b3a0>, 2), (<alus.DominoALU object at 0x7fe479f2b700>, 3), (<alus.DominoALU object at 0x7fe479f2b460>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fe479f2b2b0>, 0), (<alus.DominoGenericSALU object at 0x7fe479ef5670>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '11'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 0, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '14'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '11'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 0, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '14'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '1'}]}
Time taken: 17.6239595413208 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_000', 'p_state_000']
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f3a9bbcf700>, 'write': <dependencyGraph.Statement object at 0x7f3a9bbcf7f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f3a9cbf2bb0>, 'write': <dependencyGraph.Statement object at 0x7f3a9bbcf490>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f3a9bbcf700>, 'write': <dependencyGraph.Statement object at 0x7f3a9bbcf7f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f3a9cbf2bb0>, 'write': <dependencyGraph.Statement object at 0x7f3a9bbcf490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3a9bbcf160>, <dependencyGraph.Codelet object at 0x7f3a9bbcf9a0>, <dependencyGraph.Codelet object at 0x7f3a9bbcf1c0>]
p_state_000 = state_0;
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f3a9bbcf9a0>, <dependencyGraph.Codelet object at 0x7f3a9bbcf160>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00'}
elements in v_outputs:  {'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1
2   p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp00    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f3a9bbcfb20>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_100', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs ['p__br_tmp00', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_0', 'p_pkt_10']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f3a9bbcfb20>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['p__br_tmp00', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs ['p_state_100', 'p_pkt_10']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10;
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'state_1', 'p_state_100', 'p_pkt_10'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f3a9bbcfb20>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp00', 'p_pkt_10'}
{'p__br_tmp00', 'p_pkt_10'}
u:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_10>p_state_100&&1==1&&1==1;
v:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
 *** found stateless dependency between ALU  0  and ALU  2
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3a9bc052b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 2 has output _out_s12
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f3a9bbcf340>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3a9bc052b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12_0
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f3a9bbcf340>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3a9bc052b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_1
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f3a9bbcf340>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3a9bc052b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 5 has output p__br_tmp00
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f3a9bbcf340>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 5 has output p__br_tmp00
 *** found dependency between stateless ALU  5  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3a9bc052b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_4'}
Stateless ALU id 6 has output p_pkt_10
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,4,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
1,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x6f1cec5a
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 2
T0_A_3 2
T0_A_4 2
T0_A_5 3
T0_A_6 -0
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  2.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  3.0
action:  5
num stages:  5
stage:  -0.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f3a9bc05310>, 0), (<alus.DominoALU object at 0x7f3a9bc05340>, 1), (<alus.DominoALU object at 0x7f3a9bc054f0>, 2), (<alus.DominoALU object at 0x7f3a9bc051c0>, 3), (<alus.DominoALU object at 0x7f3a9bc05070>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f3a9bc052b0>, 0), (<alus.DominoGenericSALU object at 0x7f3a9bbcf340>, 1)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 3, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '12'}, {'id': 4, 'opcode': 12, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '12'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 3, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '12'}, {'id': 4, 'opcode': 12, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '12'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
Time taken: 12.512442827224731 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;

lhs p__br_tmp00 rhs p_pkt_10>p_state_100&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_000', 'p_state_000']
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
RAW p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
RAW p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fdd89aa4700>, 'write': <dependencyGraph.Statement object at 0x7fdd89aa47f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fdd8aac7bb0>, 'write': <dependencyGraph.Statement object at 0x7fdd89aa4490>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fdd89aa4700>, 'write': <dependencyGraph.Statement object at 0x7fdd89aa47f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fdd8aac7bb0>, 'write': <dependencyGraph.Statement object at 0x7fdd89aa4490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fdd89aa4040>, <dependencyGraph.Codelet object at 0x7fdd89aa49a0>, <dependencyGraph.Codelet object at 0x7fdd89aa4130>]
p_state_000 = state_0;
p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fdd89aa49a0>, <dependencyGraph.Codelet object at 0x7fdd89aa4040>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp00'}
elements in v_outputs:  {'p__br_tmp00'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1
2   p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_101  not in state vars
 statement:  p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp00  not in state vars
 statement:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp00    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1 p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;', 'p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'p_state_100', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_state_100']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fdd89aa4b20>]
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp00']
state_var ['state_0']
resultant component: 
p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_10', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs ['p_state_101', 'p__br_tmp00']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fdd89aa4b20>]
adj_inputs ['state_0', 'p__br_tmp00']
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
new component outputs:  ['state_1', 'p__br_tmp00']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  4
  - recursive_merge: looking at preds of  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_10', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs ['p_pkt_10', 'p_state_100']
redundant outputs []
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10;
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p_pkt_10', 'p_pkt_0', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
 | b:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fdd89aa4b20>]
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp00']
state_var ['state_0']
resultant component: 
p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp00'}
{'p_pkt_10', 'p__br_tmp00'}
u:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
u:  p__br_tmp00 = p_pkt_10>p_state_100&&1==1&&1==1;
v:  p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)) ? (p_state_000+1) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_5_stateless_p__br_tmp00_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp00_bnd_2.sk.out
['comp_5']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fdd89ada2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fdd89ada2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fdd89aa4670>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fdd89ada2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fdd89aa4670>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  5
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fdd89ada2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fdd89aa4670>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fdd89ada2b0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 6 has output p__br_tmp00
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fdd89aa4670>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 6 has output p__br_tmp00
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,5,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0xe66b0105
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 -0
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7fdd89ada1f0>, 0), (<alus.DominoALU object at 0x7fdd89ada6a0>, 1), (<alus.DominoALU object at 0x7fdd89ada3a0>, 2), (<alus.DominoALU object at 0x7fdd89ada700>, 3), (<alus.DominoALU object at 0x7fdd89ada460>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fdd89ada2b0>, 0), (<alus.DominoGenericSALU object at 0x7fdd89aa4670>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 2, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '11'}, {'id': 5, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '7'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp00'], 'outputs': ['state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 2, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '11'}, {'id': 5, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp00', 'immediate_operand': '7'}]}
Time taken: 10.868143320083618 s
preprocessor time:
