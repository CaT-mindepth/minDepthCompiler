running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_1_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000&&1==1)))&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(!(!(p_pkt_3<p_state_000&&1==1)))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_pkt_4==p_state_100&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_4', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_pkt_3', 'p_state_000']
p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001&&1==1))&&1==1;

lhs p__br_tmp30 rhs 1==1&&!(!(p_pkt_3<p_state_001&&1==1))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;

lhs p__br_tmp40 rhs 1==1&&p_pkt_3<p_state_001&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_3', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000&&1==1)))&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000&&1==1)))&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000&&1==1)))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001&&1==1))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001&&1==1))&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001&&1==1))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fdf985fbbb0>, 'write': <dependencyGraph.Statement object at 0x7fdf975d8490>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fdf975d8700>, 'write': <dependencyGraph.Statement object at 0x7fdf975d8370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fdf985fbbb0>, 'write': <dependencyGraph.Statement object at 0x7fdf975d8490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fdf975d8700>, 'write': <dependencyGraph.Statement object at 0x7fdf975d8370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  14
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
v p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000&&1==1)))&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000&&1==1)))&&1==1;
v p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
v p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001&&1==1))&&1==1 stmts len 1
p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001&&1==1))&&1==1;
v p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
v p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fdf975d8c40>, <dependencyGraph.Codelet object at 0x7fdf975d8d30>, <dependencyGraph.Codelet object at 0x7fdf975d8df0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000&&1==1)))&&1==1;
p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001&&1==1))&&1==1;
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fdf975d8c40>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1 p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000&&1==1)))&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000) p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1 p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001) p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001&&1==1))&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;']
 * recursive_merge: node ::  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_20']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001&&1==1))&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 node outputs:  ['p_state_001', 'state_1', 'p_state_101', 'p_state_000', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40', 'state_0', 'p_state_100', 'p_state_002']
 node inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000&&1==1)))&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001&&1==1))&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_20', 'p_pkt_10'}
{'p_pkt_20', 'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7fdf975f8130>, 0), (<alus.DominoALU object at 0x7fdf975f8310>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fdf975f82b0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_001', 'state_1', 'p_state_101', 'p_state_000', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40', 'state_0', 'p_state_100', 'p_state_002'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) < 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - pkt_1;\n', '      state_1 = pkt_2 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((0 - pkt_1) == 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 0;\n', '        state_1 = pkt_1 + pkt_2;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = pkt_2 - 0;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '2'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_001', 'state_1', 'p_state_101', 'p_state_000', 'p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40', 'state_0', 'p_state_100', 'p_state_002'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) < 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - pkt_1;\n', '      state_1 = pkt_2 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((0 - pkt_1) == 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 0;\n', '        state_1 = pkt_1 + pkt_2;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = pkt_2 - 0;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '2'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '2'}]}
Time taken: 2.0873665809631348 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_2_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p__br_tmp00 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1;

lhs p__br_tmp00 rhs !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp10 = !(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_pkt_4==p_state_100&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_4', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_pkt_3', 'p_state_000']
p__br_tmp30 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1;

lhs p__br_tmp30 rhs !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp30 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;

lhs p__br_tmp40 rhs 1==1&&p_pkt_3<p_state_001&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_3', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp00 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp00 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp00 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp10 = !(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp30 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp30 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f55b6961700>, 'write': <dependencyGraph.Statement object at 0x7f55b6961370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f55b7983bb0>, 'write': <dependencyGraph.Statement object at 0x7f55b6961490>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f55b6961700>, 'write': <dependencyGraph.Statement object at 0x7f55b6961370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f55b7983bb0>, 'write': <dependencyGraph.Statement object at 0x7f55b6961490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  14
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
v p__br_tmp00 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1 stmts len 1
p__br_tmp00 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1;
v p__br_tmp10 = !(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
v p__br_tmp30 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1 stmts len 1
p__br_tmp30 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1;
v p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
v p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f55b6961c40>, <dependencyGraph.Codelet object at 0x7f55b6961d30>, <dependencyGraph.Codelet object at 0x7f55b6961df0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
p__br_tmp00 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1;
p__br_tmp10 = !(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
p__br_tmp30 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1;
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f55b6961c40>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1 p__br_tmp00 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1 p__br_tmp10 = !(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000) p__br_tmp30 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1 p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1 p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001) p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;']
 * recursive_merge: node ::  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_20']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 node outputs:  ['p_state_000', 'p_state_001', 'p__br_tmp30', 'state_1', 'p__br_tmp10', 'p_state_100', 'p__br_tmp20', 'p__br_tmp40', 'p_state_002', 'state_0', 'p_state_101', 'p__br_tmp00']
 node inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1; p__br_tmp10 = !(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_20', 'p_pkt_10'}
{'p_pkt_20', 'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7f55b6980130>, 0), (<alus.DominoALU object at 0x7f55b6980310>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f55b69802b0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_000', 'p_state_001', 'p__br_tmp30', 'state_1', 'p__br_tmp10', 'p_state_100', 'p__br_tmp20', 'p__br_tmp40', 'p_state_002', 'state_0', 'p_state_101', 'p__br_tmp00'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_1) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 + pkt_1;\n', '      state_1 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = pkt_2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((state_0_0 - 0) == 14)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_1 - 0;\n', '        state_1 = state_1_1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = pkt_2 - 0;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_000', 'p_state_001', 'p__br_tmp30', 'state_1', 'p__br_tmp10', 'p_state_100', 'p__br_tmp20', 'p__br_tmp40', 'p_state_002', 'state_0', 'p_state_101', 'p__br_tmp00'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_1) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 + pkt_1;\n', '      state_1 = 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = pkt_2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((state_0_0 - 0) == 14)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_1 - 0;\n', '        state_1 = state_1_1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = pkt_2 - 0;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}]}
Time taken: 4.506784439086914 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_3_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_3<p_state_000&&1==1))))&&1==1);

lhs p__br_tmp00 rhs !(!(!(!(1==1&&!(p_pkt_3<p_state_000&&1==1))))&&1==1)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_3<p_state_000&&1==1))))&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp10 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1;

lhs p__br_tmp10 rhs !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp20 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1;

lhs p__br_tmp20 rhs 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp30 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1;

lhs p__br_tmp30 rhs 1==1&&1==1&&p_pkt_4==p_state_100&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_4', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p_pkt_3', 'p_state_000']
p__br_tmp40 = !(!(!(1==1&&!(p_pkt_3<p_state_001&&1==1))))&&1==1;

lhs p__br_tmp40 rhs !(!(!(1==1&&!(p_pkt_3<p_state_001&&1==1))))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp40 = !(!(!(1==1&&!(p_pkt_3<p_state_001&&1==1))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p__br_tmp50 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1;

lhs p__br_tmp50 rhs !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp50 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p__br_tmp60 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1;

lhs p__br_tmp60 rhs 1==1&&1==1&&p_pkt_3<p_state_001&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp60 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p_pkt_3', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp40', 'p__br_tmp50', 'p__br_tmp60', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_3<p_state_000&&1==1))))&&1==1);
RAW p_state_000 = state_0; p__br_tmp10 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp20 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp30 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_3<p_state_000&&1==1))))&&1==1); p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_3<p_state_000&&1==1))))&&1==1); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_3<p_state_000&&1==1))))&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp10 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp20 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp30 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000); p__br_tmp40 = !(!(!(1==1&&!(p_pkt_3<p_state_001&&1==1))))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000); p__br_tmp50 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000); p__br_tmp60 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp40 = !(!(!(1==1&&!(p_pkt_3<p_state_001&&1==1))))&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp40 = !(!(!(1==1&&!(p_pkt_3<p_state_001&&1==1))))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp50 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp50 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp60 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp60 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fbf38686700>, 'write': <dependencyGraph.Statement object at 0x7fbf38686250>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fbf396a8bb0>, 'write': <dependencyGraph.Statement object at 0x7fbf386865b0>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fbf38686700>, 'write': <dependencyGraph.Statement object at 0x7fbf38686250>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fbf396a8bb0>, 'write': <dependencyGraph.Statement object at 0x7fbf386865b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  16
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp30 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1 stmts len 1
p__br_tmp30 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1;
v p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_3<p_state_000&&1==1))))&&1==1) stmts len 1
p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_3<p_state_000&&1==1))))&&1==1);
v p__br_tmp10 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1 stmts len 1
p__br_tmp10 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1;
v p__br_tmp20 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1 stmts len 1
p__br_tmp20 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000);
v p__br_tmp40 = !(!(!(1==1&&!(p_pkt_3<p_state_001&&1==1))))&&1==1 stmts len 1
p__br_tmp40 = !(!(!(1==1&&!(p_pkt_3<p_state_001&&1==1))))&&1==1;
v p__br_tmp50 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1 stmts len 1
p__br_tmp50 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1;
v p__br_tmp60 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1 stmts len 1
p__br_tmp60 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1;
v p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001);
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fbf38686e20>, <dependencyGraph.Codelet object at 0x7fbf38686c70>, <dependencyGraph.Codelet object at 0x7fbf38686f10>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp30 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1;
p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_3<p_state_000&&1==1))))&&1==1);
p__br_tmp10 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1;
p__br_tmp20 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000);
p__br_tmp40 = !(!(!(1==1&&!(p_pkt_3<p_state_001&&1==1))))&&1==1;
p__br_tmp50 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1;
p__br_tmp60 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1;
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001);
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fbf38686e20>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp30 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1 p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_3<p_state_000&&1==1))))&&1==1) p__br_tmp10 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1 p__br_tmp20 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000) p__br_tmp40 = !(!(!(1==1&&!(p_pkt_3<p_state_001&&1==1))))&&1==1 p__br_tmp50 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1 p__br_tmp60 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1 p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001) p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_state_100 = state_1; p_state_000 = state_0; p__br_tmp30 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_3<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000); p__br_tmp40 = !(!(!(1==1&&!(p_pkt_3<p_state_001&&1==1))))&&1==1; p__br_tmp50 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1; p__br_tmp60 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;']
 * recursive_merge: node ::  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_20']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp30 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_3<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000); p__br_tmp40 = !(!(!(1==1&&!(p_pkt_3<p_state_001&&1==1))))&&1==1; p__br_tmp50 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1; p__br_tmp60 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 node outputs:  ['p_state_000', 'p__br_tmp20', 'p_state_001', 'p_state_100', 'p_state_002', 'p__br_tmp00', 'state_1', 'p__br_tmp30', 'p__br_tmp50', 'p_state_101', 'p__br_tmp40', 'state_0', 'p__br_tmp60', 'p__br_tmp10']
 node inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp30 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1; p__br_tmp00 = !(!(!(!(1==1&&!(p_pkt_3<p_state_000&&1==1))))&&1==1); p__br_tmp10 = !(!(1==1&&!(p_pkt_3<p_state_000&&1==1)))&&1==1; p__br_tmp20 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)) ? (p_pkt_3) : (p_state_000); p__br_tmp40 = !(!(!(1==1&&!(p_pkt_3<p_state_001&&1==1))))&&1==1; p__br_tmp50 = !(1==1&&!(p_pkt_3<p_state_001&&1==1))&&1==1; p__br_tmp60 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp40)&&(p__br_tmp50)&&(p__br_tmp60)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7fbf386bf250>, 0), (<alus.DominoALU object at 0x7fbf386bf430>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fbf386bf3d0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_000', 'p__br_tmp20', 'p_state_001', 'p_state_100', 'p_state_002', 'p__br_tmp00', 'state_1', 'p__br_tmp30', 'p__br_tmp50', 'p_state_101', 'p__br_tmp40', 'state_0', 'p__br_tmp60', 'p__br_tmp10'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((state_1_1 - pkt_2) != 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_2 - 2;\n', '        state_1 = 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = state_1_1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '2'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_000', 'p__br_tmp20', 'p_state_001', 'p_state_100', 'p_state_002', 'p__br_tmp00', 'state_1', 'p__br_tmp30', 'p__br_tmp50', 'p_state_101', 'p__br_tmp40', 'state_0', 'p__br_tmp60', 'p__br_tmp10'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((state_1_1 - pkt_2) != 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_2 - 2;\n', '        state_1 = 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = state_1_1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '2'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '2'}]}
Time taken: 2.0954842567443848 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_4_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000))&&1==1)&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(!(!(p_pkt_3<p_state_000))&&1==1)&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000))&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_pkt_3<p_state_000)&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_pkt_4==p_state_100&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_4', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_pkt_3', 'p_state_000']
p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1&&1==1;

lhs p__br_tmp30 rhs 1==1&&!(!(p_pkt_3<p_state_001))&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;

lhs p__br_tmp40 rhs 1==1&&p_pkt_3<p_state_001&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_3', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000))&&1==1)&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000))&&1==1)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000))&&1==1)&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000))&&1==1)&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fe52ed05700>, 'write': <dependencyGraph.Statement object at 0x7fe52ed05370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fe52fd28bb0>, 'write': <dependencyGraph.Statement object at 0x7fe52ed05490>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe52ed05700>, 'write': <dependencyGraph.Statement object at 0x7fe52ed05370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe52fd28bb0>, 'write': <dependencyGraph.Statement object at 0x7fe52ed05490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  14
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
v p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000))&&1==1)&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000))&&1==1)&&1==1;
v p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
v p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1&&1==1 stmts len 1
p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1&&1==1;
v p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
v p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe52ed05c40>, <dependencyGraph.Codelet object at 0x7fe52ed05d30>, <dependencyGraph.Codelet object at 0x7fe52ed05df0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000))&&1==1)&&1==1;
p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1&&1==1;
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe52ed05c40>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_100', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1 p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000))&&1==1)&&1==1 p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000) p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1 p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001) p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;']
 * recursive_merge: node ::  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_20']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 node outputs:  ['p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p_state_002', 'p_state_101', 'p_state_100', 'state_0', 'state_1', 'p__br_tmp40', 'p_state_000', 'p_state_001', 'p__br_tmp00']
 node inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = 1==1&&!(!(!(p_pkt_3<p_state_000))&&1==1)&&1==1; p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_20', 'p_pkt_10'}
{'p_pkt_20', 'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7fe52ed25130>, 0), (<alus.DominoALU object at 0x7fe52ed25310>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fe52ed252b0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p_state_002', 'p_state_101', 'p_state_100', 'state_0', 'state_1', 'p__br_tmp40', 'p_state_000', 'p_state_001', 'p__br_tmp00'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((pkt_2 - pkt_1) < 1)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_1 - 0;\n', '        state_1 = pkt_2;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = pkt_2;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p_state_002', 'p_state_101', 'p_state_100', 'state_0', 'state_1', 'p__br_tmp40', 'p_state_000', 'p_state_001', 'p__br_tmp00'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((pkt_2 - pkt_1) < 1)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_1 - 0;\n', '        state_1 = pkt_2;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = pkt_2;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}]}
Time taken: 4.766101837158203 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_5_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p__br_tmp00 = !(!(!(1==1&&p_pkt_3<p_state_000))&&1==1&&1==1);

lhs p__br_tmp00 rhs !(!(!(1==1&&p_pkt_3<p_state_000))&&1==1&&1==1)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(1==1&&p_pkt_3<p_state_000))&&1==1&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp10 = !(1==1&&p_pkt_3<p_state_000)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(1==1&&p_pkt_3<p_state_000)&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(1==1&&p_pkt_3<p_state_000)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_pkt_4==p_state_100&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_4', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_pkt_3', 'p_state_000']
p__br_tmp30 = !(!(1==1&&p_pkt_3<p_state_001))&&1==1&&1==1;

lhs p__br_tmp30 rhs !(!(1==1&&p_pkt_3<p_state_001))&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp30 = !(!(1==1&&p_pkt_3<p_state_001))&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;

lhs p__br_tmp40 rhs 1==1&&p_pkt_3<p_state_001&&1==1&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_3', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(1==1&&p_pkt_3<p_state_000))&&1==1&&1==1);
RAW p_state_000 = state_0; p__br_tmp10 = !(1==1&&p_pkt_3<p_state_000)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp00 = !(!(!(1==1&&p_pkt_3<p_state_000))&&1==1&&1==1); p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp00 = !(!(!(1==1&&p_pkt_3<p_state_000))&&1==1&&1==1); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp00 = !(!(!(1==1&&p_pkt_3<p_state_000))&&1==1&&1==1); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp10 = !(1==1&&p_pkt_3<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = !(!(1==1&&p_pkt_3<p_state_001))&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp30 = !(!(1==1&&p_pkt_3<p_state_001))&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp30 = !(!(1==1&&p_pkt_3<p_state_001))&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fb68b3d7700>, 'write': <dependencyGraph.Statement object at 0x7fb68b3d7370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fb68c3f9bb0>, 'write': <dependencyGraph.Statement object at 0x7fb68b3d7490>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fb68b3d7700>, 'write': <dependencyGraph.Statement object at 0x7fb68b3d7370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb68c3f9bb0>, 'write': <dependencyGraph.Statement object at 0x7fb68b3d7490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  14
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
v p__br_tmp00 = !(!(!(1==1&&p_pkt_3<p_state_000))&&1==1&&1==1) stmts len 1
p__br_tmp00 = !(!(!(1==1&&p_pkt_3<p_state_000))&&1==1&&1==1);
v p__br_tmp10 = !(1==1&&p_pkt_3<p_state_000)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(1==1&&p_pkt_3<p_state_000)&&1==1&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
v p__br_tmp30 = !(!(1==1&&p_pkt_3<p_state_001))&&1==1&&1==1 stmts len 1
p__br_tmp30 = !(!(1==1&&p_pkt_3<p_state_001))&&1==1&&1==1;
v p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
v p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb68b3d7c40>, <dependencyGraph.Codelet object at 0x7fb68b3d7d30>, <dependencyGraph.Codelet object at 0x7fb68b3d7df0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
p__br_tmp00 = !(!(!(1==1&&p_pkt_3<p_state_000))&&1==1&&1==1);
p__br_tmp10 = !(1==1&&p_pkt_3<p_state_000)&&1==1&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
p__br_tmp30 = !(!(1==1&&p_pkt_3<p_state_001))&&1==1&&1==1;
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb68b3d7c40>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1 p__br_tmp00 = !(!(!(1==1&&p_pkt_3<p_state_000))&&1==1&&1==1) p__br_tmp10 = !(1==1&&p_pkt_3<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000) p__br_tmp30 = !(!(1==1&&p_pkt_3<p_state_001))&&1==1&&1==1 p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1 p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001) p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = !(!(!(1==1&&p_pkt_3<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_3<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = !(!(1==1&&p_pkt_3<p_state_001))&&1==1&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;']
 * recursive_merge: node ::  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_20']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = !(!(!(1==1&&p_pkt_3<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_3<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = !(!(1==1&&p_pkt_3<p_state_001))&&1==1&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'p_state_002', 'state_0', 'p_state_000', 'p_state_101', 'state_1', 'p__br_tmp40', 'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00', 'p_state_001', 'p__br_tmp10']
 node inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = !(!(!(1==1&&p_pkt_3<p_state_000))&&1==1&&1==1); p__br_tmp10 = !(1==1&&p_pkt_3<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = !(!(1==1&&p_pkt_3<p_state_001))&&1==1&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7fb68b3f6130>, 0), (<alus.DominoALU object at 0x7fb68b3f6310>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fb68b3f62b0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_100', 'p_state_002', 'state_0', 'p_state_000', 'p_state_101', 'state_1', 'p__br_tmp40', 'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00', 'p_state_001', 'p__br_tmp10'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 2);\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = pkt_2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((state_1_1 - pkt_2) < 1)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = state_1_1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = 0;\n', '        state_1 = state_1_1 + (pkt_2 - pkt_1);\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '2'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_100', 'p_state_002', 'state_0', 'p_state_000', 'p_state_101', 'state_1', 'p__br_tmp40', 'p__br_tmp30', 'p__br_tmp20', 'p__br_tmp00', 'p_state_001', 'p__br_tmp10'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) == 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 2);\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = pkt_2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((state_1_1 - pkt_2) < 1)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = state_1_1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = 0;\n', '        state_1 = state_1_1 + (pkt_2 - pkt_1);\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '2'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '2'}]}
Time taken: 2.3899359703063965 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_6_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_3<p_state_000)))))))&&1==1;

lhs p__br_tmp00 rhs !(!(!(!(!(!(!(p_pkt_3<p_state_000)))))))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_3<p_state_000)))))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp10 = !(!(!(!(!(p_pkt_3<p_state_000)))))&&1==1;

lhs p__br_tmp10 rhs !(!(!(!(!(p_pkt_3<p_state_000)))))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp10 = !(!(!(!(!(p_pkt_3<p_state_000)))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp20 = !(!(!(p_pkt_3<p_state_000)))&&1==1;

lhs p__br_tmp20 rhs !(!(!(p_pkt_3<p_state_000)))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp20 = !(!(!(p_pkt_3<p_state_000)))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp30 = !(p_pkt_3<p_state_000)&&1==1;

lhs p__br_tmp30 rhs !(p_pkt_3<p_state_000)&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp30 = !(p_pkt_3<p_state_000)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp40 = p_pkt_4==p_state_100&&1==1;

lhs p__br_tmp40 rhs p_pkt_4==p_state_100&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp40 = p_pkt_4==p_state_100&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_4', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_3', 'p_state_000']
p__br_tmp50 = !(!(!(!(!(!(p_pkt_3<p_state_001))))))&&1==1;

lhs p__br_tmp50 rhs !(!(!(!(!(!(p_pkt_3<p_state_001))))))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp50 = !(!(!(!(!(!(p_pkt_3<p_state_001))))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p__br_tmp60 = !(!(!(!(p_pkt_3<p_state_001))))&&1==1;

lhs p__br_tmp60 rhs !(!(!(!(p_pkt_3<p_state_001))))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp60 = !(!(!(!(p_pkt_3<p_state_001))))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p__br_tmp70 = !(!(p_pkt_3<p_state_001))&&1==1;

lhs p__br_tmp70 rhs !(!(p_pkt_3<p_state_001))&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp70 = !(!(p_pkt_3<p_state_001))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p__br_tmp80 = p_pkt_3<p_state_001&&1==1;

lhs p__br_tmp80 rhs p_pkt_3<p_state_001&&1==1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp80 = p_pkt_3<p_state_001&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70', 'p__br_tmp80', 'p_pkt_3', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp50', 'p__br_tmp60', 'p__br_tmp70', 'p__br_tmp80', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_3<p_state_000)))))))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !(!(!(!(!(p_pkt_3<p_state_000)))))&&1==1;
RAW p_state_000 = state_0; p__br_tmp20 = !(!(!(p_pkt_3<p_state_000)))&&1==1;
RAW p_state_000 = state_0; p__br_tmp30 = !(p_pkt_3<p_state_000)&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp40 = p_pkt_4==p_state_100&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_3<p_state_000)))))))&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_3<p_state_000)))))))&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_3<p_state_000)))))))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp10 = !(!(!(!(!(p_pkt_3<p_state_000)))))&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp20 = !(!(!(p_pkt_3<p_state_000)))&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp30 = !(p_pkt_3<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp40 = p_pkt_4==p_state_100&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000); p__br_tmp50 = !(!(!(!(!(!(p_pkt_3<p_state_001))))))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000); p__br_tmp60 = !(!(!(!(p_pkt_3<p_state_001))))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000); p__br_tmp70 = !(!(p_pkt_3<p_state_001))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000); p__br_tmp80 = p_pkt_3<p_state_001&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp50 = !(!(!(!(!(!(p_pkt_3<p_state_001))))))&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp50 = !(!(!(!(!(!(p_pkt_3<p_state_001))))))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp60 = !(!(!(!(p_pkt_3<p_state_001))))&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp60 = !(!(!(!(p_pkt_3<p_state_001))))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp70 = !(!(p_pkt_3<p_state_001))&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp70 = !(!(p_pkt_3<p_state_001))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp80 = p_pkt_3<p_state_001&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp80 = p_pkt_3<p_state_001&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f752d84d700>, 'write': <dependencyGraph.Statement object at 0x7f752d84d310>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f752e870bb0>, 'write': <dependencyGraph.Statement object at 0x7f752d84d190>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f752d84d700>, 'write': <dependencyGraph.Statement object at 0x7f752d84d310>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f752e870bb0>, 'write': <dependencyGraph.Statement object at 0x7f752d84d190>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  18
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp40 = p_pkt_4==p_state_100&&1==1 stmts len 1
p__br_tmp40 = p_pkt_4==p_state_100&&1==1;
v p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_3<p_state_000)))))))&&1==1 stmts len 1
p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_3<p_state_000)))))))&&1==1;
v p__br_tmp10 = !(!(!(!(!(p_pkt_3<p_state_000)))))&&1==1 stmts len 1
p__br_tmp10 = !(!(!(!(!(p_pkt_3<p_state_000)))))&&1==1;
v p__br_tmp20 = !(!(!(p_pkt_3<p_state_000)))&&1==1 stmts len 1
p__br_tmp20 = !(!(!(p_pkt_3<p_state_000)))&&1==1;
v p__br_tmp30 = !(p_pkt_3<p_state_000)&&1==1 stmts len 1
p__br_tmp30 = !(p_pkt_3<p_state_000)&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000);
v p__br_tmp50 = !(!(!(!(!(!(p_pkt_3<p_state_001))))))&&1==1 stmts len 1
p__br_tmp50 = !(!(!(!(!(!(p_pkt_3<p_state_001))))))&&1==1;
v p__br_tmp60 = !(!(!(!(p_pkt_3<p_state_001))))&&1==1 stmts len 1
p__br_tmp60 = !(!(!(!(p_pkt_3<p_state_001))))&&1==1;
v p__br_tmp70 = !(!(p_pkt_3<p_state_001))&&1==1 stmts len 1
p__br_tmp70 = !(!(p_pkt_3<p_state_001))&&1==1;
v p__br_tmp80 = p_pkt_3<p_state_001&&1==1 stmts len 1
p__br_tmp80 = p_pkt_3<p_state_001&&1==1;
v p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001);
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f752d84de80>, <dependencyGraph.Codelet object at 0x7f752d84de50>, <dependencyGraph.Codelet object at 0x7f752d84d430>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp40 = p_pkt_4==p_state_100&&1==1;
p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_3<p_state_000)))))))&&1==1;
p__br_tmp10 = !(!(!(!(!(p_pkt_3<p_state_000)))))&&1==1;
p__br_tmp20 = !(!(!(p_pkt_3<p_state_000)))&&1==1;
p__br_tmp30 = !(p_pkt_3<p_state_000)&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000);
p__br_tmp50 = !(!(!(!(!(!(p_pkt_3<p_state_001))))))&&1==1;
p__br_tmp60 = !(!(!(!(p_pkt_3<p_state_001))))&&1==1;
p__br_tmp70 = !(!(p_pkt_3<p_state_001))&&1==1;
p__br_tmp80 = p_pkt_3<p_state_001&&1==1;
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001);
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f752d84de80>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_002', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp40 = p_pkt_4==p_state_100&&1==1 p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_3<p_state_000)))))))&&1==1 p__br_tmp10 = !(!(!(!(!(p_pkt_3<p_state_000)))))&&1==1 p__br_tmp20 = !(!(!(p_pkt_3<p_state_000)))&&1==1 p__br_tmp30 = !(p_pkt_3<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000) p__br_tmp50 = !(!(!(!(!(!(p_pkt_3<p_state_001))))))&&1==1 p__br_tmp60 = !(!(!(!(p_pkt_3<p_state_001))))&&1==1 p__br_tmp70 = !(!(p_pkt_3<p_state_001))&&1==1 p__br_tmp80 = p_pkt_3<p_state_001&&1==1 p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001) p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_state_100 = state_1; p_state_000 = state_0; p__br_tmp40 = p_pkt_4==p_state_100&&1==1; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_3<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_3<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_3<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_3<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000); p__br_tmp50 = !(!(!(!(!(!(p_pkt_3<p_state_001))))))&&1==1; p__br_tmp60 = !(!(!(!(p_pkt_3<p_state_001))))&&1==1; p__br_tmp70 = !(!(p_pkt_3<p_state_001))&&1==1; p__br_tmp80 = p_pkt_3<p_state_001&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;']
 * recursive_merge: node ::  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_20']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp40 = p_pkt_4==p_state_100&&1==1; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_3<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_3<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_3<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_3<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000); p__br_tmp50 = !(!(!(!(!(!(p_pkt_3<p_state_001))))))&&1==1; p__br_tmp60 = !(!(!(!(p_pkt_3<p_state_001))))&&1==1; p__br_tmp70 = !(!(p_pkt_3<p_state_001))&&1==1; p__br_tmp80 = p_pkt_3<p_state_001&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 node outputs:  ['p__br_tmp50', 'p_state_000', 'p__br_tmp80', 'p_state_002', 'state_1', 'p__br_tmp00', 'p__br_tmp70', 'p_state_100', 'p__br_tmp10', 'p__br_tmp20', 'p_state_001', 'p__br_tmp30', 'p__br_tmp60', 'p_state_101', 'state_0', 'p__br_tmp40']
 node inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp40 = p_pkt_4==p_state_100&&1==1; p__br_tmp00 = !(!(!(!(!(!(!(p_pkt_3<p_state_000)))))))&&1==1; p__br_tmp10 = !(!(!(!(!(p_pkt_3<p_state_000)))))&&1==1; p__br_tmp20 = !(!(!(p_pkt_3<p_state_000)))&&1==1; p__br_tmp30 = !(p_pkt_3<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_000); p__br_tmp50 = !(!(!(!(!(!(p_pkt_3<p_state_001))))))&&1==1; p__br_tmp60 = !(!(!(!(p_pkt_3<p_state_001))))&&1==1; p__br_tmp70 = !(!(p_pkt_3<p_state_001))&&1==1; p__br_tmp80 = p_pkt_3<p_state_001&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp50)&&(p__br_tmp60)&&(p__br_tmp70)&&(p__br_tmp80)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7f752d885370>, 0), (<alus.DominoALU object at 0x7f752d885340>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f752d8854f0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p__br_tmp50', 'p_state_000', 'p__br_tmp80', 'p_state_002', 'state_1', 'p__br_tmp00', 'p__br_tmp70', 'p_state_100', 'p__br_tmp10', 'p__br_tmp20', 'p_state_001', 'p__br_tmp30', 'p__br_tmp60', 'p_state_101', 'state_0', 'p__br_tmp40'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_1_1 + pkt_1) - pkt_1) != 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((state_0_0 - 0) < 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 15;\n', '        state_1 = 5 - pkt_1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = state_1_1 + (pkt_2 - pkt_2);\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '2'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p__br_tmp50', 'p_state_000', 'p__br_tmp80', 'p_state_002', 'state_1', 'p__br_tmp00', 'p__br_tmp70', 'p_state_100', 'p__br_tmp10', 'p__br_tmp20', 'p_state_001', 'p__br_tmp30', 'p__br_tmp60', 'p_state_101', 'state_0', 'p__br_tmp40'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_1_1 + pkt_1) - pkt_1) != 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((state_0_0 - 0) < 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 15;\n', '        state_1 = 5 - pkt_1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = state_1_1 + (pkt_2 - pkt_2);\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '2'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '2'}]}
Time taken: 2.005100727081299 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_7_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p__br_tmp00 = !(!(!(!(p_pkt_3<p_state_000&&1==1))&&1==1));

lhs p__br_tmp00 rhs !(!(!(!(p_pkt_3<p_state_000&&1==1))&&1==1))
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(!(p_pkt_3<p_state_000&&1==1))&&1==1));

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp10 = 1==1&&!(!(p_pkt_3<p_state_000&&1==1));

lhs p__br_tmp10 rhs 1==1&&!(!(p_pkt_3<p_state_000&&1==1))
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(!(p_pkt_3<p_state_000&&1==1));

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_000;

lhs p__br_tmp20 rhs 1==1&&1==1&&p_pkt_3<p_state_000
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_pkt_3', 'p_state_000']
p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_pkt_4', 'p_state_100']
p__br_tmp30 = !(!(!(p_pkt_3<p_state_001&&1==1))&&1==1);

lhs p__br_tmp30 rhs !(!(!(p_pkt_3<p_state_001&&1==1))&&1==1)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = !(!(!(p_pkt_3<p_state_001&&1==1))&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p__br_tmp40 = 1==1&&!(p_pkt_3<p_state_001&&1==1);

lhs p__br_tmp40 rhs 1==1&&!(p_pkt_3<p_state_001&&1==1)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&!(p_pkt_3<p_state_001&&1==1);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p__br_tmp50 = 1==1&&1==1&&p_pkt_4==p_state_101;

lhs p__br_tmp50 rhs 1==1&&1==1&&p_pkt_4==p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp50 = 1==1&&1==1&&p_pkt_4==p_state_101;

 is_read_flank: processing rhs_vars =  ['p_pkt_4', 'p_state_101']
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p__br_tmp50', 'p_pkt_3', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(!(p_pkt_3<p_state_000&&1==1))&&1==1));
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(!(p_pkt_3<p_state_000&&1==1));
RAW p_state_000 = state_0; p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_000;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp00 = !(!(!(!(p_pkt_3<p_state_000&&1==1))&&1==1)); p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp00 = !(!(!(!(p_pkt_3<p_state_000&&1==1))&&1==1)); p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp00 = !(!(!(!(p_pkt_3<p_state_000&&1==1))&&1==1)); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp10 = 1==1&&!(!(p_pkt_3<p_state_000&&1==1)); p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp10 = 1==1&&!(!(p_pkt_3<p_state_000&&1==1)); p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_000; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_000; p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = !(!(!(p_pkt_3<p_state_001&&1==1))&&1==1);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp40 = 1==1&&!(p_pkt_3<p_state_001&&1==1);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001);
RAW p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100); p__br_tmp50 = 1==1&&1==1&&p_pkt_4==p_state_101;
RAW p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
RAW p__br_tmp30 = !(!(!(p_pkt_3<p_state_001&&1==1))&&1==1); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp40 = 1==1&&!(p_pkt_3<p_state_001&&1==1); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp50 = 1==1&&1==1&&p_pkt_4==p_state_101; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001);
RAW p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f08e975dbb0>, 'write': <dependencyGraph.Statement object at 0x7f08e873a490>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f08e873a700>, 'write': <dependencyGraph.Statement object at 0x7f08e873a190>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f08e975dbb0>, 'write': <dependencyGraph.Statement object at 0x7f08e873a490>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f08e873a700>, 'write': <dependencyGraph.Statement object at 0x7f08e873a190>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  15
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = !(!(!(!(p_pkt_3<p_state_000&&1==1))&&1==1)) stmts len 1
p__br_tmp00 = !(!(!(!(p_pkt_3<p_state_000&&1==1))&&1==1));
v p__br_tmp10 = 1==1&&!(!(p_pkt_3<p_state_000&&1==1)) stmts len 1
p__br_tmp10 = 1==1&&!(!(p_pkt_3<p_state_000&&1==1));
v p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_000 stmts len 1
p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_000;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
v p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);
v p__br_tmp30 = !(!(!(p_pkt_3<p_state_001&&1==1))&&1==1) stmts len 1
p__br_tmp30 = !(!(!(p_pkt_3<p_state_001&&1==1))&&1==1);
v p__br_tmp40 = 1==1&&!(p_pkt_3<p_state_001&&1==1) stmts len 1
p__br_tmp40 = 1==1&&!(p_pkt_3<p_state_001&&1==1);
v p__br_tmp50 = 1==1&&1==1&&p_pkt_4==p_state_101 stmts len 1
p__br_tmp50 = 1==1&&1==1&&p_pkt_4==p_state_101;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
v p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC 1
v p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f08e873aca0>, <dependencyGraph.Codelet object at 0x7f08e873adc0>, <dependencyGraph.Codelet object at 0x7f08e873ae80>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp00 = !(!(!(!(p_pkt_3<p_state_000&&1==1))&&1==1));
p__br_tmp10 = 1==1&&!(!(p_pkt_3<p_state_000&&1==1));
p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_000;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);
p__br_tmp30 = !(!(!(p_pkt_3<p_state_001&&1==1))&&1==1);
p__br_tmp40 = 1==1&&!(p_pkt_3<p_state_001&&1==1);
p__br_tmp50 = 1==1&&1==1&&p_pkt_4==p_state_101;
state_1 = p_state_101;
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f08e873aca0>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_100', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp00 = !(!(!(!(p_pkt_3<p_state_000&&1==1))&&1==1)) p__br_tmp10 = 1==1&&!(!(p_pkt_3<p_state_000&&1==1)) p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_000 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000) p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100) p__br_tmp30 = !(!(!(p_pkt_3<p_state_001&&1==1))&&1==1) p__br_tmp40 = 1==1&&!(p_pkt_3<p_state_001&&1==1) p__br_tmp50 = 1==1&&1==1&&p_pkt_4==p_state_101 state_1 = p_state_101 p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_3<p_state_000&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_pkt_3<p_state_000&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_000; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100); p__br_tmp30 = !(!(!(p_pkt_3<p_state_001&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_3<p_state_001&&1==1); p__br_tmp50 = 1==1&&1==1&&p_pkt_4==p_state_101; state_1 = p_state_101; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_20']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_3<p_state_000&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_pkt_3<p_state_000&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_000; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100); p__br_tmp30 = !(!(!(p_pkt_3<p_state_001&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_3<p_state_001&&1==1); p__br_tmp50 = 1==1&&1==1&&p_pkt_4==p_state_101; state_1 = p_state_101; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
 node outputs:  ['p_state_000', 'p__br_tmp50', 'state_1', 'p_state_101', 'p__br_tmp10', 'p_state_001', 'state_0', 'p_state_002', 'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp40', 'p__br_tmp30', 'p_state_100']
 node inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = !(!(!(!(p_pkt_3<p_state_000&&1==1))&&1==1)); p__br_tmp10 = 1==1&&!(!(p_pkt_3<p_state_000&&1==1)); p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_000; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p_state_101 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100); p__br_tmp30 = !(!(!(p_pkt_3<p_state_001&&1==1))&&1==1); p__br_tmp40 = 1==1&&!(p_pkt_3<p_state_001&&1==1); p__br_tmp50 = 1==1&&1==1&&p_pkt_4==p_state_101; state_1 = p_state_101; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)&&(p__br_tmp50)) ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_20', 'p_pkt_10'}
{'p_pkt_20', 'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7f08e876a1c0>, 0), (<alus.DominoALU object at 0x7f08e876a3a0>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f08e876a340>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_000', 'p__br_tmp50', 'state_1', 'p_state_101', 'p__br_tmp10', 'p_state_001', 'state_0', 'p_state_002', 'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp40', 'p__br_tmp30', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) > 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1 + pkt_2;\n', '      state_1 = state_1_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((0 - pkt_2) != 1)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = pkt_2;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + (2 - pkt_2);\n', '        state_1 = 1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_000', 'p__br_tmp50', 'state_1', 'p_state_101', 'p__br_tmp10', 'p_state_001', 'state_0', 'p_state_002', 'p__br_tmp20', 'p__br_tmp00', 'p__br_tmp40', 'p__br_tmp30', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) > 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = 1 + pkt_2;\n', '      state_1 = state_1_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((0 - pkt_2) != 1)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = pkt_2;\n', '      }\n', '      else\n', '      {\n', '        state_0 = state_0_0 + (2 - pkt_2);\n', '        state_1 = 1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}]}
Time taken: 2.200331449508667 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_8_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_3<p_state_000)));

lhs p__br_tmp00 rhs 1==1&&!(1==1&&!(!(p_pkt_3<p_state_000)))
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_3<p_state_000)));

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1;

lhs p__br_tmp10 rhs 1==1&&!(p_pkt_3<p_state_000)&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1;

lhs p__br_tmp20 rhs 1==1&&p_pkt_4==p_state_100&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_4', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_pkt_3', 'p_state_000']
p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1;

lhs p__br_tmp30 rhs 1==1&&!(!(p_pkt_3<p_state_001))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1;

lhs p__br_tmp40 rhs 1==1&&p_pkt_3<p_state_001&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_3', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_3<p_state_000)));
RAW p_state_000 = state_0; p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_3<p_state_000))); p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_3<p_state_000))); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_3<p_state_000))); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fd019b33bb0>, 'write': <dependencyGraph.Statement object at 0x7fd018b113d0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fd018b11700>, 'write': <dependencyGraph.Statement object at 0x7fd018b11370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fd019b33bb0>, 'write': <dependencyGraph.Statement object at 0x7fd018b113d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fd018b11700>, 'write': <dependencyGraph.Statement object at 0x7fd018b11370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  14
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1 stmts len 1
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1;
v p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_3<p_state_000))) stmts len 1
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_3<p_state_000)));
v p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1 stmts len 1
p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
v p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1 stmts len 1
p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1;
v p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1 stmts len 1
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1;
v p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd018b11c40>, <dependencyGraph.Codelet object at 0x7fd018b11c10>, <dependencyGraph.Codelet object at 0x7fd018b11df0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1;
p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_3<p_state_000)));
p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1;
p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1;
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd018b11c40>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1 p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_3<p_state_000))) p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000) p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1 p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1 p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001) p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_3<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;']
 * recursive_merge: node ::  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_20']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_3<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 node outputs:  ['p__br_tmp00', 'p__br_tmp30', 'p_state_000', 'p__br_tmp10', 'p_state_002', 'state_0', 'p__br_tmp20', 'p_state_101', 'p_state_001', 'state_1', 'p_state_100', 'p__br_tmp40']
 node inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = 1==1&&p_pkt_4==p_state_100&&1==1; p__br_tmp00 = 1==1&&!(1==1&&!(!(p_pkt_3<p_state_000))); p__br_tmp10 = 1==1&&!(p_pkt_3<p_state_000)&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = 1==1&&!(!(p_pkt_3<p_state_001))&&1==1; p__br_tmp40 = 1==1&&p_pkt_3<p_state_001&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7fd018b4b130>, 0), (<alus.DominoALU object at 0x7fd018b4b310>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fd018b4b2b0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p__br_tmp00', 'p__br_tmp30', 'p_state_000', 'p__br_tmp10', 'p_state_002', 'state_0', 'p__br_tmp20', 'p_state_101', 'p_state_001', 'state_1', 'p_state_100', 'p__br_tmp40'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '      state_1 = pkt_2 - 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_1_1 + pkt_1) - pkt_2) == 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_2 - pkt_2;\n', '        state_1 = state_1_1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = pkt_2;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '2'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p__br_tmp00', 'p__br_tmp30', 'p_state_000', 'p__br_tmp10', 'p_state_002', 'state_0', 'p__br_tmp20', 'p_state_101', 'p_state_001', 'state_1', 'p_state_100', 'p__br_tmp40'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 0;\n', '      state_1 = pkt_2 - 1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_1_1 + pkt_1) - pkt_2) == 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_2 - pkt_2;\n', '        state_1 = state_1_1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = pkt_2;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '2'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}]}
Time taken: 2.5049245357513428 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_9_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p__br_tmp00 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp10 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1&&1==1;

lhs p__br_tmp10 rhs 1==1&&1==1&&p_pkt_4==p_state_100&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_4', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p_pkt_3', 'p_state_000']
p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1&&1==1;

lhs p__br_tmp20 rhs 1==1&&1==1&&p_pkt_3<p_state_001&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p_pkt_3', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp20', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp10 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp00 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp00 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp00 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp10 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000); p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fd46cd38bb0>, 'write': <dependencyGraph.Statement object at 0x7fd46bd15730>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fd46bd15700>, 'write': <dependencyGraph.Statement object at 0x7fd46bd15190>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fd46cd38bb0>, 'write': <dependencyGraph.Statement object at 0x7fd46bd15730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fd46bd15700>, 'write': <dependencyGraph.Statement object at 0x7fd46bd15190>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1;
v p__br_tmp10 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp10 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000);
v p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
v p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_001);
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd46bd15a60>, <dependencyGraph.Codelet object at 0x7fd46bd15970>, <dependencyGraph.Codelet object at 0x7fd46bd15b50>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp00 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1;
p__br_tmp10 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000);
p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1&&1==1;
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_001);
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd46bd15a60>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_002', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp00 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1 p__br_tmp10 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000) p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1&&1==1 p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_001) p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp10 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000); p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;']
 * recursive_merge: node ::  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_20']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp10 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000); p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 node outputs:  ['p_state_000', 'p_state_002', 'p_state_101', 'p__br_tmp20', 'p_state_100', 'p_state_001', 'state_0', 'state_1', 'p__br_tmp10', 'p__br_tmp00']
 node inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_100 = state_1; p__br_tmp00 = 1==1&&!(p_pkt_3<p_state_000&&1==1)&&1==1&&1==1; p__br_tmp10 = 1==1&&1==1&&p_pkt_4==p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)) ? (p_pkt_3) : (p_state_000); p__br_tmp20 = 1==1&&1==1&&p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp20)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_20', 'p_pkt_10'}
{'p_pkt_20', 'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7fd46bd15be0>, 0), (<alus.DominoALU object at 0x7fd46bd4c190>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fd46bd15f70>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_000', 'p_state_002', 'p_state_101', 'p__br_tmp20', 'p_state_100', 'p_state_001', 'state_0', 'state_1', 'p__br_tmp10', 'p__br_tmp00'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = pkt_2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_2) - pkt_1) != 0)/*comp_0_..ateful.sk:143*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = pkt_2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_2 - 3);\n', '      state_1 = pkt_2;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}, {'id': 2, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_000', 'p_state_002', 'p_state_101', 'p__br_tmp20', 'p_state_100', 'p_state_001', 'state_0', 'state_1', 'p__br_tmp10', 'p__br_tmp00'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = pkt_2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_2) - pkt_1) != 0)/*comp_0_..ateful.sk:143*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = pkt_2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_2 - 3);\n', '      state_1 = pkt_2;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}, {'id': 2, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
Time taken: 3.0133118629455566 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_10_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs (p_pkt_0<0) ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_pkt_0']
p__br_tmp00 = !(!(!(p_pkt_3<p_state_000)&&1==1))&&1==1;

lhs p__br_tmp00 rhs !(!(!(p_pkt_3<p_state_000)&&1==1))&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = !(!(!(p_pkt_3<p_state_000)&&1==1))&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp10 = !(p_pkt_3<p_state_000)&&1==1&&1==1;

lhs p__br_tmp10 rhs !(p_pkt_3<p_state_000)&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp10 = !(p_pkt_3<p_state_000)&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p__br_tmp20 = p_pkt_4==p_state_100&&1==1&&1==1;

lhs p__br_tmp20 rhs p_pkt_4==p_state_100&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp20 = p_pkt_4==p_state_100&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_4', 'p_state_100']
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp10', 'p__br_tmp20', 'p_pkt_3', 'p_state_000']
p__br_tmp30 = !(!(p_pkt_3<p_state_001)&&1==1)&&1==1;

lhs p__br_tmp30 rhs !(!(p_pkt_3<p_state_001)&&1==1)&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp30 = !(!(p_pkt_3<p_state_001)&&1==1)&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p__br_tmp40 = p_pkt_3<p_state_001&&1==1&&1==1;

lhs p__br_tmp40 rhs p_pkt_3<p_state_001&&1==1&&1==1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp40 = p_pkt_3<p_state_001&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_001']
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_3', 'p_state_001']
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p__br_tmp30', 'p__br_tmp40', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = !(!(!(p_pkt_3<p_state_000)&&1==1))&&1==1;
RAW p_state_000 = state_0; p__br_tmp10 = !(p_pkt_3<p_state_000)&&1==1&&1==1;
RAW p_state_000 = state_0; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp20 = p_pkt_4==p_state_100&&1==1&&1==1;
RAW p_state_100 = state_1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp00 = !(!(!(p_pkt_3<p_state_000)&&1==1))&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp00 = !(!(!(p_pkt_3<p_state_000)&&1==1))&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp00 = !(!(!(p_pkt_3<p_state_000)&&1==1))&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp10 = !(p_pkt_3<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp20 = p_pkt_4==p_state_100&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = !(!(p_pkt_3<p_state_001)&&1==1)&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp40 = p_pkt_3<p_state_001&&1==1&&1==1;
RAW p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp30 = !(!(p_pkt_3<p_state_001)&&1==1)&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp30 = !(!(p_pkt_3<p_state_001)&&1==1)&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp40 = p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp40 = p_pkt_3<p_state_001&&1==1&&1==1; p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fd00af77bb0>, 'write': <dependencyGraph.Statement object at 0x7fd009f543d0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fd009f54700>, 'write': <dependencyGraph.Statement object at 0x7fd009f54370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fd00af77bb0>, 'write': <dependencyGraph.Statement object at 0x7fd009f543d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fd009f54700>, 'write': <dependencyGraph.Statement object at 0x7fd009f54370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  14
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp20 = p_pkt_4==p_state_100&&1==1&&1==1 stmts len 1
p__br_tmp20 = p_pkt_4==p_state_100&&1==1&&1==1;
v p__br_tmp00 = !(!(!(p_pkt_3<p_state_000)&&1==1))&&1==1 stmts len 1
p__br_tmp00 = !(!(!(p_pkt_3<p_state_000)&&1==1))&&1==1;
v p__br_tmp10 = !(p_pkt_3<p_state_000)&&1==1&&1==1 stmts len 1
p__br_tmp10 = !(p_pkt_3<p_state_000)&&1==1&&1==1;
v p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
v p__br_tmp30 = !(!(p_pkt_3<p_state_001)&&1==1)&&1==1 stmts len 1
p__br_tmp30 = !(!(p_pkt_3<p_state_001)&&1==1)&&1==1;
v p__br_tmp40 = p_pkt_3<p_state_001&&1==1&&1==1 stmts len 1
p__br_tmp40 = p_pkt_3<p_state_001&&1==1&&1==1;
v p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
v p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd009f54c40>, <dependencyGraph.Codelet object at 0x7fd009f54c10>, <dependencyGraph.Codelet object at 0x7fd009f54df0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp20 = p_pkt_4==p_state_100&&1==1&&1==1;
p__br_tmp00 = !(!(!(p_pkt_3<p_state_000)&&1==1))&&1==1;
p__br_tmp10 = !(p_pkt_3<p_state_000)&&1==1&&1==1;
p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000);
p__br_tmp30 = !(!(p_pkt_3<p_state_001)&&1==1)&&1==1;
p__br_tmp40 = p_pkt_3<p_state_001&&1==1&&1==1;
p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001);
p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd009f54c40>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_100', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp20 = p_pkt_4==p_state_100&&1==1&&1==1 p__br_tmp00 = !(!(!(p_pkt_3<p_state_000)&&1==1))&&1==1 p__br_tmp10 = !(p_pkt_3<p_state_000)&&1==1&&1==1 p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000) p__br_tmp30 = !(!(p_pkt_3<p_state_001)&&1==1)&&1==1 p__br_tmp40 = p_pkt_3<p_state_001&&1==1&&1==1 p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001) p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);', 'p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = !(!(!(p_pkt_3<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_3<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = !(!(p_pkt_3<p_state_001)&&1==1)&&1==1; p__br_tmp40 = p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;']
 * recursive_merge: node ::  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_20']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_20 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = (p_pkt_0<0) ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = !(!(!(p_pkt_3<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_3<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = !(!(p_pkt_3<p_state_001)&&1==1)&&1==1; p__br_tmp40 = p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 node outputs:  ['p__br_tmp30', 'p__br_tmp00', 'p_state_000', 'state_1', 'p__br_tmp10', 'p_state_100', 'p_state_002', 'state_0', 'p__br_tmp20', 'p_state_001', 'p_state_101', 'p__br_tmp40']
 node inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_000 = state_0; p__br_tmp20 = p_pkt_4==p_state_100&&1==1&&1==1; p__br_tmp00 = !(!(!(p_pkt_3<p_state_000)&&1==1))&&1==1; p__br_tmp10 = !(p_pkt_3<p_state_000)&&1==1&&1==1; p_state_001 = (1&&(p__br_tmp00)&&(p__br_tmp10)&&(p__br_tmp20)) ? (p_pkt_3) : (p_state_000); p__br_tmp30 = !(!(p_pkt_3<p_state_001)&&1==1)&&1==1; p__br_tmp40 = p_pkt_3<p_state_001&&1==1&&1==1; p_state_002 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_3) : (p_state_001); p_state_101 = (1&&!(p__br_tmp00)&&(p__br_tmp30)&&(p__br_tmp40)) ? (p_pkt_4) : (p_state_100); state_0 = p_state_002; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_20', 'p_pkt_10'}
{'p_pkt_20', 'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_20_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7fd009f8f130>, 0), (<alus.DominoALU object at 0x7fd009f8f310>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fd009f8f2b0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p__br_tmp30', 'p__br_tmp00', 'p_state_000', 'state_1', 'p__br_tmp10', 'p_state_100', 'p_state_002', 'state_0', 'p__br_tmp20', 'p_state_001', 'p_state_101', 'p__br_tmp40'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = state_1_1 + (pkt_1 - pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) > 0)/*comp_0_..ateful.sk:143*/\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 1;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '2'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p__br_tmp30', 'p__br_tmp00', 'p_state_000', 'state_1', 'p__br_tmp10', 'p_state_100', 'p_state_002', 'state_0', 'p__br_tmp20', 'p_state_001', 'p_state_101', 'p__br_tmp40'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = state_1_1 + (pkt_1 - pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) > 0)/*comp_0_..ateful.sk:143*/\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 - 1;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '2'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '2'}]}
Time taken: 2.196780204772949 s
preprocessor time:
