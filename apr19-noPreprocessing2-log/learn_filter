running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_1_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs (1&&(p__br_tmp00)) ? (1) : (p_pkt_0)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0']
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_00']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0); p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fab02c99700>, 'write': <dependencyGraph.Statement object at 0x7fab02c997c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fab03cbcbb0>, 'write': <dependencyGraph.Statement object at 0x7fab02c99820>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fab02c991f0>, 'write': <dependencyGraph.Statement object at 0x7fab02c99130>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fab02c99700>, 'write': <dependencyGraph.Statement object at 0x7fab02c997c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fab03cbcbb0>, 'write': <dependencyGraph.Statement object at 0x7fab02c99820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fab02c991f0>, 'write': <dependencyGraph.Statement object at 0x7fab02c99130>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  12
SCC 0
v p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
SCC 3
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 4
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 5
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 6
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 7
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 8
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fab02c99a60>, <dependencyGraph.Codelet object at 0x7fab02c99af0>, <dependencyGraph.Codelet object at 0x7fab02c99b50>, <dependencyGraph.Codelet object at 0x7fab02c99be0>, <dependencyGraph.Codelet object at 0x7fab02c99c70>, <dependencyGraph.Codelet object at 0x7fab02c99d00>, <dependencyGraph.Codelet object at 0x7fab02c99bb0>, <dependencyGraph.Codelet object at 0x7fab02c99d90>, <dependencyGraph.Codelet object at 0x7fab02c99df0>]
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fab02c99d00>, <dependencyGraph.Codelet object at 0x7fab02c99be0>, <dependencyGraph.Codelet object at 0x7fab02c99c70>}
total number of nodes created:  9
state vars {'state_1', 'state_2', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_201', 'p_state_100', 'p_state_200', 'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1;', 'p_state_201 = 1;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp00', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp00', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_100', 'p_state_200', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p_pkt_0', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_201', 'p_state_100', 'p_state_000']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_201', 'p_state_100', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_101', 'p_state_200', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_101', 'p_state_200', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_200', 'p_state_001']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_state_200', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fab02c997f0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fab02c997f0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['state_1', 'p_state_100']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fab02c993d0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['state_2', 'p_state_200']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fab02c993d0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['state_2', 'p_state_200']
		* state_pkt_fields of new component:  ['p_state_200', 'p_state_201']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fab02c998e0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['p_state_000', 'state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fab02c998e0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['p_state_000', 'state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;']
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
u:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,
+---> dependencies of ALU  1 : 
3,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (1, 3), (2, 4), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x2cd982da
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 15 rows and 0 columns
Presolve removed 0 rows and 14 columns
Presolve time: 0.00s
Presolved: 149 rows, 79 columns, 355 nonzeros
Variable types: 0 continuous, 79 integer (71 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 -0
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  -0.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fab02ccea90>, 0), (<alus.DominoALU object at 0x7fab02ccec40>, 1), (<alus.DominoALU object at 0x7fab02ccee80>, 2), (<alus.DominoALU object at 0x7fab02cceca0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fab02cceb50>, 0), (<alus.DominoGenericSALU object at 0x7fab02c99340>, 1), (<alus.DominoGenericSALU object at 0x7fab02cceac0>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 4), (1, 3), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 2, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '26'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 4), (1, 3), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 2, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '26'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '0'}]}
Time taken: 8.304169654846191 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_2_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs (1&&(p__br_tmp00)) ? (1) : (p_pkt_0)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0']
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_00']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0); p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7f887578fbb0>, 'write': <dependencyGraph.Statement object at 0x7f887476c820>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f887476c700>, 'write': <dependencyGraph.Statement object at 0x7f887476c7c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f887476c1f0>, 'write': <dependencyGraph.Statement object at 0x7f887476c130>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f887578fbb0>, 'write': <dependencyGraph.Statement object at 0x7f887476c820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f887476c700>, 'write': <dependencyGraph.Statement object at 0x7f887476c7c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f887476c1f0>, 'write': <dependencyGraph.Statement object at 0x7f887476c130>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  12
SCC 0
v p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
SCC 3
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 4
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 5
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 6
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 7
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 8
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f887476ca60>, <dependencyGraph.Codelet object at 0x7f887476caf0>, <dependencyGraph.Codelet object at 0x7f887476cb50>, <dependencyGraph.Codelet object at 0x7f887476cbe0>, <dependencyGraph.Codelet object at 0x7f887476cc70>, <dependencyGraph.Codelet object at 0x7f887476cd00>, <dependencyGraph.Codelet object at 0x7f887476cbb0>, <dependencyGraph.Codelet object at 0x7f887476cd90>, <dependencyGraph.Codelet object at 0x7f887476cdf0>]
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f887476cd00>, <dependencyGraph.Codelet object at 0x7f887476cbe0>, <dependencyGraph.Codelet object at 0x7f887476cc70>}
total number of nodes created:  9
state vars {'state_2', 'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_200', 'p_state_101', 'p_state_001', 'p_state_000', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1;', 'p_state_201 = 1;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_100', 'p_state_200', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p_pkt_00', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_000', 'p_state_201']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_100', 'p_state_000', 'p_state_201']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_101', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_200', 'p_state_101', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_200', 'p_state_001']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_state_200', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f887476c7f0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['p_state_100', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f887476c7f0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['p_state_100', 'state_1']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f887476c3d0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f887476c3d0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['p_state_200', 'state_2']
		* state_pkt_fields of new component:  ['p_state_201', 'p_state_200']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f887476c8e0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['p_state_000', 'state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f887476c8e0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['p_state_000', 'state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;']
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
u:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,5,
+---> dependencies of ALU  1 : 
3,4,5,
+---> dependencies of ALU  2 : 
3,4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 5), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 138 rows, 93 columns and 306 nonzeros
Model fingerprint: 0x0afacb89
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 151 rows, 78 columns, 358 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f88747a1a90>, 0), (<alus.DominoALU object at 0x7f88747a1c40>, 1), (<alus.DominoALU object at 0x7f88747a1e80>, 2), (<alus.DominoALU object at 0x7f88747a1ca0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f88747a1b50>, 0), (<alus.DominoGenericSALU object at 0x7f887476c340>, 1), (<alus.DominoGenericSALU object at 0x7f88747a1ac0>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 3, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '15'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 3, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '15'}]}
Time taken: 14.339579820632935 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_3_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs (1&&(p__br_tmp00)) ? (1) : (p_pkt_0)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0']
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_00']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1; p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1; p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0); p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f2bd5030700>, 'write': <dependencyGraph.Statement object at 0x7f2bd50307c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f2bd50301f0>, 'write': <dependencyGraph.Statement object at 0x7f2bd5030130>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f2bd6053bb0>, 'write': <dependencyGraph.Statement object at 0x7f2bd5030820>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f2bd5030700>, 'write': <dependencyGraph.Statement object at 0x7f2bd50307c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2bd50301f0>, 'write': <dependencyGraph.Statement object at 0x7f2bd5030130>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f2bd6053bb0>, 'write': <dependencyGraph.Statement object at 0x7f2bd5030820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  12
SCC 0
v p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
SCC 3
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 4
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 5
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 6
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 7
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 8
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2bd5030a60>, <dependencyGraph.Codelet object at 0x7f2bd5030af0>, <dependencyGraph.Codelet object at 0x7f2bd5030b50>, <dependencyGraph.Codelet object at 0x7f2bd5030be0>, <dependencyGraph.Codelet object at 0x7f2bd5030c70>, <dependencyGraph.Codelet object at 0x7f2bd5030d00>, <dependencyGraph.Codelet object at 0x7f2bd5030bb0>, <dependencyGraph.Codelet object at 0x7f2bd5030d90>, <dependencyGraph.Codelet object at 0x7f2bd5030df0>]
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2bd5030d00>, <dependencyGraph.Codelet object at 0x7f2bd5030be0>, <dependencyGraph.Codelet object at 0x7f2bd5030c70>}
total number of nodes created:  9
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_001', 'p_state_000', 'p_state_200', 'p_state_101', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1;', 'p_state_201 = 1;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp00', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp00', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
     |  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_100', 'p_state_200', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p_pkt_00', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_201', 'p_state_000', 'p_state_100']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_201', 'p_state_000', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_200', 'p_state_101']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p_state_200', 'p_state_101']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_001', 'p_state_200', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_001', 'p_state_200', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f2bd50307f0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f2bd50307f0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['state_1', 'p_state_100']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f2bd50303d0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['state_2', 'p_state_200']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f2bd50303d0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['state_2', 'p_state_200']
		* state_pkt_fields of new component:  ['p_state_201', 'p_state_200']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f2bd50308e0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f2bd50308e0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['state_0', 'p_state_000']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;']
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
v:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
u:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,5,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
3,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (0, 5), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0xa77b4736
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 148 rows, 78 columns, 352 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f2bd5065a90>, 0), (<alus.DominoALU object at 0x7f2bd5065c40>, 1), (<alus.DominoALU object at 0x7f2bd5065e80>, 2), (<alus.DominoALU object at 0x7f2bd5065ca0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f2bd5065b50>, 0), (<alus.DominoGenericSALU object at 0x7f2bd5030340>, 1), (<alus.DominoGenericSALU object at 0x7f2bd5065ac0>, 2)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (0, 5), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_100', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '14'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (0, 5), (1, 4), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_100', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '14'}]}
Time taken: 7.776960134506226 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_4_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs (1&&(p__br_tmp00)) ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0']
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_00']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0); p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f4b7325a1f0>, 'write': <dependencyGraph.Statement object at 0x7f4b7325a130>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f4b7325a700>, 'write': <dependencyGraph.Statement object at 0x7f4b7325a7c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f4b7427dbb0>, 'write': <dependencyGraph.Statement object at 0x7f4b7325a820>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f4b7325a1f0>, 'write': <dependencyGraph.Statement object at 0x7f4b7325a130>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f4b7325a700>, 'write': <dependencyGraph.Statement object at 0x7f4b7325a7c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f4b7427dbb0>, 'write': <dependencyGraph.Statement object at 0x7f4b7325a820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  12
SCC 0
v p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
SCC 3
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 4
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 5
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 6
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 7
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 8
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f4b7325aa60>, <dependencyGraph.Codelet object at 0x7f4b7325aaf0>, <dependencyGraph.Codelet object at 0x7f4b7325ab50>, <dependencyGraph.Codelet object at 0x7f4b7325abe0>, <dependencyGraph.Codelet object at 0x7f4b7325ac70>, <dependencyGraph.Codelet object at 0x7f4b7325ad00>, <dependencyGraph.Codelet object at 0x7f4b7325abb0>, <dependencyGraph.Codelet object at 0x7f4b7325ad90>, <dependencyGraph.Codelet object at 0x7f4b7325adf0>]
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f4b7325ad00>, <dependencyGraph.Codelet object at 0x7f4b7325abe0>, <dependencyGraph.Codelet object at 0x7f4b7325ac70>}
total number of nodes created:  9
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_101', 'p_state_100', 'p_state_201', 'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1;', 'p_state_201 = 1;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp00', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp00', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_200', 'p_state_100', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p_pkt_0', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_201', 'p_state_000']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_100', 'p_state_201', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_101', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_200', 'p_state_101', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_100', 'p_state_001']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_200', 'p_state_100', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f4b7325a7f0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f4b7325a7f0>]
removing two old components
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['state_1', 'p_state_100']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f4b7325a3d0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f4b7325a3d0>]
removing two old components
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['p_state_200', 'state_2']
		* state_pkt_fields of new component:  ['p_state_200', 'p_state_201']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f4b7325a8e0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f4b7325a8e0>]
removing two old components
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['state_0', 'p_state_000']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;']
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
u:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,
+---> dependencies of ALU  1 : 
3,5,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x1e69e6c6
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 147 rows, 78 columns, 350 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f4b7328fa90>, 0), (<alus.DominoALU object at 0x7f4b7328fc40>, 1), (<alus.DominoALU object at 0x7f4b7328fe80>, 2), (<alus.DominoALU object at 0x7f4b7328fca0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f4b7328fb50>, 0), (<alus.DominoGenericSALU object at 0x7f4b7325a340>, 1), (<alus.DominoGenericSALU object at 0x7f4b7328fac0>, 2)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 16, 'operand0': 'p_state_200', 'operand1': 'p_state_200', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 4, 'operand0': '1', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '23'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 16, 'operand0': 'p_state_200', 'operand1': 'p_state_200', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 4, 'operand0': '1', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '23'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '1'}]}
Time taken: 8.299835443496704 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_5_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs (1&&(p__br_tmp00)) ? (1) : (p_pkt_0)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0']
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_00']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0); p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fb984a56700>, 'write': <dependencyGraph.Statement object at 0x7fb984a567c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fb985a79bb0>, 'write': <dependencyGraph.Statement object at 0x7fb984a56820>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fb984a561f0>, 'write': <dependencyGraph.Statement object at 0x7fb984a56190>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fb984a56700>, 'write': <dependencyGraph.Statement object at 0x7fb984a567c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fb985a79bb0>, 'write': <dependencyGraph.Statement object at 0x7fb984a56820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb984a561f0>, 'write': <dependencyGraph.Statement object at 0x7fb984a56190>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  12
SCC 0
v p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
SCC 3
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 4
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 5
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 6
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 7
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 8
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb984a56a60>, <dependencyGraph.Codelet object at 0x7fb984a56af0>, <dependencyGraph.Codelet object at 0x7fb984a56b50>, <dependencyGraph.Codelet object at 0x7fb984a56be0>, <dependencyGraph.Codelet object at 0x7fb984a56c70>, <dependencyGraph.Codelet object at 0x7fb984a56d00>, <dependencyGraph.Codelet object at 0x7fb984a56bb0>, <dependencyGraph.Codelet object at 0x7fb984a56d90>, <dependencyGraph.Codelet object at 0x7fb984a56df0>]
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb984a56d00>, <dependencyGraph.Codelet object at 0x7fb984a56be0>, <dependencyGraph.Codelet object at 0x7fb984a56c70>}
total number of nodes created:  9
state vars {'state_1', 'state_2', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_000', 'p_state_101', 'p_state_201', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1;', 'p_state_201 = 1;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp00', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_200', 'p_state_000', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp00', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_000', 'p_state_201', 'p_state_100']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_000', 'p_state_201', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_000', 'p_state_101']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_200', 'p_state_000', 'p_state_101']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_001', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_200', 'p_state_001', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fb984a567f0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fb984a567f0>]
removing two old components
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['state_1', 'p_state_100']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fb984a563d0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['state_2', 'p_state_200']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fb984a563d0>]
removing two old components
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['state_2', 'p_state_200']
		* state_pkt_fields of new component:  ['p_state_201', 'p_state_200']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fb984a568e0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fb984a568e0>]
removing two old components
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['state_0', 'p_state_000']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;']
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
u:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,
+---> dependencies of ALU  1 : 
3,5,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x55a15a07
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 148 rows, 78 columns, 352 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fb984a8ba90>, 0), (<alus.DominoALU object at 0x7fb984a8bc40>, 1), (<alus.DominoALU object at 0x7fb984a8be80>, 2), (<alus.DominoALU object at 0x7fb984a8bca0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fb984a8bb50>, 0), (<alus.DominoGenericSALU object at 0x7fb984a56340>, 1), (<alus.DominoGenericSALU object at 0x7fb984a8bac0>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 4), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 15, 'operand0': 'p_state_200', 'operand1': 'p_pkt_0', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '3'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 4), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['state_2', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 15, 'operand0': 'p_state_200', 'operand1': 'p_pkt_0', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '3'}]}
Time taken: 6.71370267868042 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_6_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;

lhs p__br_tmp00 rhs p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs (1&&(p__br_tmp00)) ? (1) : (p_pkt_0)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0']
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_00']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_100 = state_1; p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_000 = state_0; p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1; p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
RAW p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1; p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0); p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f37280ee700>, 'write': <dependencyGraph.Statement object at 0x7f37280ee7c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f3729111bb0>, 'write': <dependencyGraph.Statement object at 0x7f37280ee820>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f37280ee1f0>, 'write': <dependencyGraph.Statement object at 0x7f37280ee130>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f37280ee700>, 'write': <dependencyGraph.Statement object at 0x7f37280ee7c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f3729111bb0>, 'write': <dependencyGraph.Statement object at 0x7f37280ee820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f37280ee1f0>, 'write': <dependencyGraph.Statement object at 0x7f37280ee130>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  12
SCC 0
v p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1 stmts len 1
p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
SCC 3
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 4
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 5
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 6
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 7
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 8
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f37280eea60>, <dependencyGraph.Codelet object at 0x7f37280eeaf0>, <dependencyGraph.Codelet object at 0x7f37280eeb50>, <dependencyGraph.Codelet object at 0x7f37280eebe0>, <dependencyGraph.Codelet object at 0x7f37280eec70>, <dependencyGraph.Codelet object at 0x7f37280eed00>, <dependencyGraph.Codelet object at 0x7f37280eebb0>, <dependencyGraph.Codelet object at 0x7f37280eed90>, <dependencyGraph.Codelet object at 0x7f37280eedf0>]
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f37280eed00>, <dependencyGraph.Codelet object at 0x7f37280eebe0>, <dependencyGraph.Codelet object at 0x7f37280eec70>}
total number of nodes created:  9
state vars {'state_1', 'state_2', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_101', 'p_state_000', 'p_state_001', 'p_state_100', 'p_state_200'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1;', 'p_state_201 = 1;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp00', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
     |  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_000', 'p_state_100', 'p_state_200']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp00', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_201', 'p_state_000', 'p_state_100']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_201', 'p_state_000', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_101', 'p_state_000', 'p_state_200']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_101', 'p_state_000', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_001', 'p_state_100', 'p_state_200']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_001', 'p_state_100', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f37280ee7f0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f37280ee7f0>]
removing two old components
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['state_1', 'p_state_100']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f37280ee3d0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f37280ee3d0>]
removing two old components
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['p_state_200', 'state_2']
		* state_pkt_fields of new component:  ['p_state_201', 'p_state_200']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f37280ee8e0>]
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['p_state_000', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f37280ee8e0>]
removing two old components
adj_inputs ['p_state_000', 'p_state_100', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['p_state_000', 'state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;']
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_000', 'p_state_200', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
v:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
u:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,5,
+---> dependencies of ALU  1 : 
4,5,
+---> dependencies of ALU  2 : 
3,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (0, 5), (1, 4), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 136 rows, 93 columns and 302 nonzeros
Model fingerprint: 0xab028af2
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 149 rows, 78 columns, 354 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f3728123a90>, 0), (<alus.DominoALU object at 0x7f3728123c40>, 1), (<alus.DominoALU object at 0x7f3728123e80>, 2), (<alus.DominoALU object at 0x7f3728123ca0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f3728123b50>, 0), (<alus.DominoGenericSALU object at 0x7f37280ee760>, 1), (<alus.DominoGenericSALU object at 0x7f3728123ac0>, 2)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (0, 5), (1, 4), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 19, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '27'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (0, 5), (1, 4), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 19, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '27'}]}
Time taken: 7.303909063339233 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_7_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs (1&&(p__br_tmp00)) ? (1) : (p_pkt_0)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0']
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_00']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
RAW p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0; p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0; p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0); p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fe9f0481700>, 'write': <dependencyGraph.Statement object at 0x7fe9f04817c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fe9f04811f0>, 'write': <dependencyGraph.Statement object at 0x7fe9f0481190>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fe9f14a3bb0>, 'write': <dependencyGraph.Statement object at 0x7fe9f0481820>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe9f0481700>, 'write': <dependencyGraph.Statement object at 0x7fe9f04817c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe9f04811f0>, 'write': <dependencyGraph.Statement object at 0x7fe9f0481190>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fe9f14a3bb0>, 'write': <dependencyGraph.Statement object at 0x7fe9f0481820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  12
SCC 0
v p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
SCC 3
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 4
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 5
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 6
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 7
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 8
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe9f0481a60>, <dependencyGraph.Codelet object at 0x7fe9f0481af0>, <dependencyGraph.Codelet object at 0x7fe9f0481b50>, <dependencyGraph.Codelet object at 0x7fe9f0481be0>, <dependencyGraph.Codelet object at 0x7fe9f0481c70>, <dependencyGraph.Codelet object at 0x7fe9f0481d00>, <dependencyGraph.Codelet object at 0x7fe9f0481bb0>, <dependencyGraph.Codelet object at 0x7fe9f0481d90>, <dependencyGraph.Codelet object at 0x7fe9f0481df0>]
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe9f0481d00>, <dependencyGraph.Codelet object at 0x7fe9f0481be0>, <dependencyGraph.Codelet object at 0x7fe9f0481c70>}
total number of nodes created:  9
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_001', 'p_state_201', 'p_state_101', 'p_state_000', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1;', 'p_state_201 = 1;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
     |  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_100', 'p_state_200', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_00', 'p_pkt_0', 'p__br_tmp00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_201', 'p_state_000', 'p_state_100']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_201', 'p_state_000', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_101', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_200', 'p_state_101', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_001', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_200', 'p_state_001', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe9f04817f0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['p_state_100', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe9f04817f0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['p_state_100', 'state_1']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe9f04813d0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe9f04813d0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['p_state_200', 'state_2']
		* state_pkt_fields of new component:  ['p_state_201', 'p_state_200']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe9f04818e0>]
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fe9f04818e0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_200', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['state_0', 'p_state_000']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;']
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_200', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
v:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
u:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0;
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,5,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 5), (1, 4), (2, 4), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x3c4fca63
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 147 rows, 78 columns, 350 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fe9f04b5a90>, 0), (<alus.DominoALU object at 0x7fe9f04b5c40>, 1), (<alus.DominoALU object at 0x7fe9f04b5e80>, 2), (<alus.DominoALU object at 0x7fe9f04b5ca0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fe9f04b5b50>, 0), (<alus.DominoGenericSALU object at 0x7fe9f04816a0>, 1), (<alus.DominoGenericSALU object at 0x7fe9f04b5ac0>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 4), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 16, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 4), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': '1', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 16, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '2'}]}
Time taken: 9.337565898895264 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_8_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs (1&&(p__br_tmp00)) ? (1) : (p_pkt_0)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0']
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_00']
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1; p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1; p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0); p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_state_001 = 1; state_0 = p_state_001;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_201 = 1; state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fcc3fdeb700>, 'write': <dependencyGraph.Statement object at 0x7fcc3fdeb7c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fcc3fdeb1f0>, 'write': <dependencyGraph.Statement object at 0x7fcc3fdeb190>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fcc40e0ebb0>, 'write': <dependencyGraph.Statement object at 0x7fcc3fdeb820>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fcc3fdeb700>, 'write': <dependencyGraph.Statement object at 0x7fcc3fdeb7c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fcc3fdeb1f0>, 'write': <dependencyGraph.Statement object at 0x7fcc3fdeb190>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fcc40e0ebb0>, 'write': <dependencyGraph.Statement object at 0x7fcc3fdeb820>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  12
SCC 0
v p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
SCC 3
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 4
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 5
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 6
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC 7
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 8
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fcc3fdeba60>, <dependencyGraph.Codelet object at 0x7fcc3fdebaf0>, <dependencyGraph.Codelet object at 0x7fcc3fdebb50>, <dependencyGraph.Codelet object at 0x7fcc3fdebbe0>, <dependencyGraph.Codelet object at 0x7fcc3fdebc70>, <dependencyGraph.Codelet object at 0x7fcc3fdebd00>, <dependencyGraph.Codelet object at 0x7fcc3fdebbb0>, <dependencyGraph.Codelet object at 0x7fcc3fdebd90>, <dependencyGraph.Codelet object at 0x7fcc3fdebdf0>]
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_001 = 1;
p_state_101 = 1;
p_state_201 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fcc3fdebd00>, <dependencyGraph.Codelet object at 0x7fcc3fdebbe0>, <dependencyGraph.Codelet object at 0x7fcc3fdebc70>}
total number of nodes created:  9
state vars {'state_1', 'state_2', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_200', 'p_state_201', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1;', 'p_state_001 = 1;', 'p_state_201 = 1;']
 * recursive_merge: node ::  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp00', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp00', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
     |  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_200', 'p_state_100', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p_pkt_00', 'p_pkt_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_200', 'p_state_001']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_state_200', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_101', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_200', 'p_state_101', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_201', 'p_state_000']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_100', 'p_state_201', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fcc3fdeb7f0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fcc3fdeb7f0>]
removing two old components
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['state_1', 'p_state_100']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1;', 'p_state_201 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fcc3fdeb3d0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fcc3fdeb3d0>]
removing two old components
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['state_0', 'p_state_000']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fcc3fdeb8e0>]
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fcc3fdeb8e0>]
removing two old components
adj_inputs ['p_state_200', 'p_state_100', 'p_state_000']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['p_state_200', 'state_2']
		* state_pkt_fields of new component:  ['p_state_200', 'p_state_201']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;']
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_100', 'p_state_000'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
v:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
u:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 
3,5,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x9596c560
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 147 rows, 78 columns, 350 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fcc3fe20a90>, 0), (<alus.DominoALU object at 0x7fcc3fe20c40>, 1), (<alus.DominoALU object at 0x7fcc3fe20e80>, 2), (<alus.DominoALU object at 0x7fcc3fe20ca0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fcc3fe20b50>, 0), (<alus.DominoGenericSALU object at 0x7fcc3fdeb6a0>, 1), (<alus.DominoGenericSALU object at 0x7fcc3fe20ac0>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_200', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 16, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (1, 3), (1, 5), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_200', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 16, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '1'}]}
Time taken: 7.437333822250366 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_9_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs (1&&(p__br_tmp00)) ? (1) : (p_pkt_0)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0']
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_00']
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_100 = state_1; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_200 = state_2; p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
RAW p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0); p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_state_001 = 1; state_0 = p_state_001;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_201 = 1; state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fdc38f8d700>, 'write': <dependencyGraph.Statement object at 0x7fdc38f8d7c0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fdc39fb0bb0>, 'write': <dependencyGraph.Statement object at 0x7fdc38f8d820>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fdc38f8d1f0>, 'write': <dependencyGraph.Statement object at 0x7fdc38f8d190>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fdc38f8d700>, 'write': <dependencyGraph.Statement object at 0x7fdc38f8d7c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fdc39fb0bb0>, 'write': <dependencyGraph.Statement object at 0x7fdc38f8d820>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fdc38f8d1f0>, 'write': <dependencyGraph.Statement object at 0x7fdc38f8d190>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  12
SCC 0
v p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
SCC 3
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 4
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 5
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 6
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC 7
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 8
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fdc38f8da60>, <dependencyGraph.Codelet object at 0x7fdc38f8daf0>, <dependencyGraph.Codelet object at 0x7fdc38f8db50>, <dependencyGraph.Codelet object at 0x7fdc38f8dbe0>, <dependencyGraph.Codelet object at 0x7fdc38f8dc70>, <dependencyGraph.Codelet object at 0x7fdc38f8dd00>, <dependencyGraph.Codelet object at 0x7fdc38f8dbb0>, <dependencyGraph.Codelet object at 0x7fdc38f8dd90>, <dependencyGraph.Codelet object at 0x7fdc38f8ddf0>]
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_001 = 1;
p_state_101 = 1;
p_state_201 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fdc38f8dd00>, <dependencyGraph.Codelet object at 0x7fdc38f8dbe0>, <dependencyGraph.Codelet object at 0x7fdc38f8dc70>}
total number of nodes created:  9
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_101', 'p_state_001', 'p_state_201', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1;', 'p_state_001 = 1;', 'p_state_201 = 1;']
 * recursive_merge: node ::  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp00', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
     |  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_200', 'p_state_000', 'p_state_100']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp00', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_001', 'p_state_100']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_200', 'p_state_001', 'p_state_100']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_200', 'p_state_101', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_200', 'p_state_101', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_201', 'p_state_100', 'p_state_000']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_201', 'p_state_100', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fdc38f8d7f0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['state_1', 'p_state_100']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fdc38f8d7f0>]
removing two old components
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['state_1', 'p_state_100']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1;', 'p_state_201 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fdc38f8d3d0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['p_state_000', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fdc38f8d3d0>]
removing two old components
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['p_state_000', 'state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fdc38f8d8e0>]
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7fdc38f8d8e0>]
removing two old components
adj_inputs ['p_state_200', 'p_state_000', 'p_state_100']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['p_state_200', 'state_2']
		* state_pkt_fields of new component:  ['p_state_200', 'p_state_201']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;']
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_200', 'p_state_000', 'p_state_100'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
u:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp00 = 1==1&&1==1&&p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,5,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
3,4,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 5), (1, 4), (2, 3), (2, 4), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0xb0332e9e
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 148 rows, 78 columns, 352 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fdc38fc2a90>, 0), (<alus.DominoALU object at 0x7fdc38fc2c40>, 1), (<alus.DominoALU object at 0x7fdc38fc2e80>, 2), (<alus.DominoALU object at 0x7fdc38fc2ca0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fdc38fc2b50>, 0), (<alus.DominoGenericSALU object at 0x7fdc38f8d670>, 1), (<alus.DominoGenericSALU object at 0x7fdc38fc2ac0>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 4), (2, 3), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 19, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '10'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 3), (0, 5), (1, 4), (2, 3), (2, 4), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 19, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '10'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '1'}]}
Time taken: 7.459119558334351 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_10_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

lhs p__br_tmp00 rhs p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_state_200', 'p_state_100', 'p_state_000']
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs (1&&(p__br_tmp00)) ? (1) : (p_pkt_0)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0']
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_00']
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_100 = state_1; p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p_state_200 = state_2; p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
RAW p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
RAW p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1; p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0); p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
RAW p_state_001 = 1; state_0 = p_state_001;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_201 = 1; state_2 = p_state_201;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7f029c3521f0>, 'write': <dependencyGraph.Statement object at 0x7f029c352130>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f029d375bb0>, 'write': <dependencyGraph.Statement object at 0x7f029c352820>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f029c352700>, 'write': <dependencyGraph.Statement object at 0x7f029c3527c0>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f029c3521f0>, 'write': <dependencyGraph.Statement object at 0x7f029c352130>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f029d375bb0>, 'write': <dependencyGraph.Statement object at 0x7f029c352820>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f029c352700>, 'write': <dependencyGraph.Statement object at 0x7f029c3527c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1 stmts len 1
p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
SCC 3
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 4
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 5
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 6
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC 7
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 8
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f029c352a60>, <dependencyGraph.Codelet object at 0x7f029c352af0>, <dependencyGraph.Codelet object at 0x7f029c352b50>, <dependencyGraph.Codelet object at 0x7f029c352be0>, <dependencyGraph.Codelet object at 0x7f029c352c70>, <dependencyGraph.Codelet object at 0x7f029c352d00>, <dependencyGraph.Codelet object at 0x7f029c352bb0>, <dependencyGraph.Codelet object at 0x7f029c352d90>, <dependencyGraph.Codelet object at 0x7f029c352df0>]
p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_001 = 1;
p_state_101 = 1;
p_state_201 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f029c352d00>, <dependencyGraph.Codelet object at 0x7f029c352be0>, <dependencyGraph.Codelet object at 0x7f029c352c70>}
total number of nodes created:  9
state vars {'state_2', 'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  9
total number of nodes created:  9
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_201', 'p_state_001', 'p_state_200', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
number of nodes on SCC_GRAPH:  9
number of nodes in comp_graph:  9
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_100 = state_1; state_1 = p_state_101;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1;', 'p_state_001 = 1;', 'p_state_201 = 1;']
 * recursive_merge: node ::  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp00', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
     |  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
 * recursive_merge: node ::  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp00', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_00']
  - recursive_merge: looking at preds of  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
     |  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
 * recursive_merge: finished processing  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_state_100', 'p_state_000', 'p_state_200']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'p__br_tmp00', 'p_pkt_00'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_000 = state_0; state_0 = p_state_001;
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs []
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_001', 'p_state_200']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_state_001', 'p_state_200']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_100 = state_1; state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs []
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_state_101', 'p_state_200', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_101', 'p_state_200', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
     |  p_state_200 = state_2; state_2 = p_state_201;
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs []
state_var ['state_2']
redundant outputs []
     | merged inputs:  ['p_state_100', 'p_state_201', 'p_state_000']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  ['p_state_100', 'p_state_201', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
 * recursive_merge: node ::  p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1', 'p_state_101']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
  - recursive_merge: looking at preds of  p_state_100 = state_1; state_1 = p_state_101;
     |  p_state_101 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs []
state_var ['state_1']
     | merged inputs:  ['state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_101 = 1;
 | b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f029c3527f0>]
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
resultant component: 
p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
new component inputs:  ['state_1']
new component outputs:  ['p_state_100', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_101 = 1;
 | component b:  p_state_100 = state_1; state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; state_1 = p_state_101;
 ********************** adding statements from component  p_state_101 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f029c3527f0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs ['p_state_101']
state_var ['state_1']
		* new component :  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
		* new component inputs :  ['state_1']
		* new component outputs :  ['p_state_100', 'state_1']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_000 = state_0; state_0 = p_state_001;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_001 = 1;', 'p_state_201 = 1;']
 * recursive_merge: node ::  p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
  - recursive_merge: looking at preds of  p_state_000 = state_0; state_0 = p_state_001;
     |  p_state_001 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs []
state_var ['state_0']
     | merged inputs:  ['state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_001 = 1;
 | b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f029c3523d0>]
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
resultant component: 
p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
new component inputs:  ['state_0']
new component outputs:  ['state_0', 'p_state_000']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_001 = 1;
 | component b:  p_state_000 = state_0; state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; state_0 = p_state_001;
 ********************** adding statements from component  p_state_001 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f029c3523d0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs ['p_state_001']
state_var ['state_0']
		* new component :  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
		* new component inputs :  ['state_0']
		* new component outputs :  ['state_0', 'p_state_000']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;', 'p_state_201 = 1;']
 * recursive_merge: node ::  p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2', 'p_state_201']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
  - recursive_merge: looking at preds of  p_state_200 = state_2; state_2 = p_state_201;
     |  p_state_201 = 1;
redundant outputs []
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs []
state_var ['state_2']
     | merged inputs:  ['state_2']
		| merged state vars:  {'state_2'}
		| merged stateless vars:  []
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_201 = 1;
 | b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f029c3528e0>]
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
resultant component: 
p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
new component inputs:  ['state_2']
new component outputs:  ['p_state_200', 'state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_201 = 1;
 | component b:  p_state_200 = state_2; state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; state_2 = p_state_201;
 ********************** adding statements from component  p_state_201 = 1;  with *************************
[<dependencyGraph.Statement object at 0x7f029c3528e0>]
removing two old components
adj_inputs ['p_state_100', 'p_state_000', 'p_state_200']
redundant outputs ['p_state_201']
state_var ['state_2']
		* new component :  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
		* new component inputs :  ['state_2']
		* new component outputs :  ['p_state_200', 'state_2']
		* state_pkt_fields of new component:  ['p_state_201', 'p_state_200']
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);', 'p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);', 'p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;', 'p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;', 'p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;', 'p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;']
 * recursive_merge: node ::  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2']
 node inputs:  ['state_2']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_200']
 * recursive_merge: finished processing  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: node ::  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000']
 node inputs:  ['state_0']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_000']
 * recursive_merge: finished processing  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: node ::  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1']
 node inputs:  ['state_1']
 exclude_read_write_flanks: successor inputs:  {'p_state_100', 'p_state_000', 'p_state_200'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_state_100']
 * recursive_merge: finished processing  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
 * recursive_merge: finished processing  p_state_200 = state_2; state_2 = p_state_201;
 * recursive_merge: finished processing  p_state_000 = state_0; state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; state_1 = p_state_101;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
v:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
u:  p_pkt_00 = (1&&(p__br_tmp00)) ? (1) : (p_pkt_0);
v:  p_pkt_01 = (1&&!(p__br_tmp00)) ? (0) : (p_pkt_00);
u:  p_state_101 = 1; p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_state_001 = 1; p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
u:  p_state_201 = 1; p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp00 = p_state_200!=0&&p_state_100!=0&&p_state_000!=0&&1==1&&1==1;
~~~~~~~~~~set_alu_inputs:  ['state_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_2']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_9_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_9 , type?  STATELESS
filename_to_compname: filename =  comp_9_stateless_p_pkt_01_bnd_2.sk.out
['comp_9']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_9  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
------predecessor of comp  comp_9  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_2', 1: 'comp_1', 2: 'comp_0', 3: 'comp_9', 4: 'comp_9', 5: 'comp_9', 6: 'comp_9'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,5,
+---> dependencies of ALU  1 : 
3,5,
+---> dependencies of ALU  2 : 
3,4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

# alus: =  7
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (0, 5), (1, 3), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 137 rows, 93 columns and 304 nonzeros
Model fingerprint: 0x3f228b82
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 15 columns
Presolve time: 0.01s
Presolved: 150 rows, 78 columns, 356 nonzeros
Variable types: 0 continuous, 78 integer (70 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 2 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  -0.0
action:  1
num stages:  3
stage:  -0.0
action:  2
num stages:  3
stage:  1.0
action:  3
num stages:  3
stage:  1.0
action:  4
num stages:  3
stage:  1.0
action:  5
num stages:  3
stage:  2.0
action:  6
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f029c387a90>, 0), (<alus.DominoALU object at 0x7f029c387c40>, 1), (<alus.DominoALU object at 0x7f029c387e80>, 2), (<alus.DominoALU object at 0x7f029c387ca0>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f029c387b50>, 0), (<alus.DominoGenericSALU object at 0x7f029c3526a0>, 1), (<alus.DominoGenericSALU object at 0x7f029c387ac0>, 2)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (0, 5), (1, 3), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_state_200', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_100', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 4), (0, 5), (1, 3), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6)], 'stateful_alus': [{'inputs': ['state_1'], 'outputs': ['p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2'], 'outputs': ['p_state_200', 'state_2'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = 1;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_state_200', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_100', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '30'}]}
Time taken: 7.5129921436309814 s
preprocessor time:
