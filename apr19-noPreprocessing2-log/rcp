running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_state_000+p_pkt_0;

lhs p_state_001 rhs p_state_000+p_pkt_0
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p_state_000+p_pkt_0;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0']
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_1<30&&1==1&&1==1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7fa8186ba1f0>, 'write': <dependencyGraph.Statement object at 0x7fa8186ba820>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fa8196dcbb0>, 'write': <dependencyGraph.Statement object at 0x7fa8186ba340>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fa8186ba700>, 'write': <dependencyGraph.Statement object at 0x7fa8186ba8e0>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fa8186ba1f0>, 'write': <dependencyGraph.Statement object at 0x7fa8186ba820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa8196dcbb0>, 'write': <dependencyGraph.Statement object at 0x7fa8186ba340>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fa8186ba700>, 'write': <dependencyGraph.Statement object at 0x7fa8186ba8e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_state_000+p_pkt_0 stmts len 1
p_state_001 = p_state_000+p_pkt_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa8186ba940>, <dependencyGraph.Codelet object at 0x7fa8186ba040>, <dependencyGraph.Codelet object at 0x7fa8186ba910>, <dependencyGraph.Codelet object at 0x7fa8186ba9d0>]
p_state_000 = state_0;
p_state_001 = p_state_000+p_pkt_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa8186ba910>, <dependencyGraph.Codelet object at 0x7fa8186ba940>, <dependencyGraph.Codelet object at 0x7fa8186ba040>}
total number of nodes created:  4
state vars {'state_2', 'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_100', 'p_state_000', 'p_state_201', 'p_state_200'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_state_000+p_pkt_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_101', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200', 'p_state_201']
 node inputs:  ['state_2', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'state_2', 'state_1', 'p__br_tmp00', 'p_pkt_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fa8186ba760>]
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201', 'p__br_tmp00']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fa8186ba760>]
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100', 'p__br_tmp00']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fa8186baf10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fa8186ba5b0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,2,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0x3db5f63f
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fa8186f1160>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fa8186baf10>, 0), (<alus.DominoGenericSALU object at 0x7fa8186bafd0>, 1), (<alus.DominoGenericSALU object at 0x7fa8186ba5b0>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 19.08475399017334 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_state_000+p_pkt_0;

lhs p_state_001 rhs p_state_000+p_pkt_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_001 = p_state_000+p_pkt_0;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0']
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_1<30&&1==1&&1==1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f0baad81bb0>, 'write': <dependencyGraph.Statement object at 0x7f0ba9d5e340>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f0ba9d5e1f0>, 'write': <dependencyGraph.Statement object at 0x7f0ba9d5e820>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f0ba9d5e700>, 'write': <dependencyGraph.Statement object at 0x7f0ba9d5e8e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f0baad81bb0>, 'write': <dependencyGraph.Statement object at 0x7f0ba9d5e340>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f0ba9d5e1f0>, 'write': <dependencyGraph.Statement object at 0x7f0ba9d5e820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f0ba9d5e700>, 'write': <dependencyGraph.Statement object at 0x7f0ba9d5e8e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_state_000+p_pkt_0 stmts len 1
p_state_001 = p_state_000+p_pkt_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f0ba9d5e940>, <dependencyGraph.Codelet object at 0x7f0ba9d5e070>, <dependencyGraph.Codelet object at 0x7f0ba9d5e910>, <dependencyGraph.Codelet object at 0x7f0ba9d5e9d0>]
p_state_000 = state_0;
p_state_001 = p_state_000+p_pkt_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f0ba9d5e910>, <dependencyGraph.Codelet object at 0x7f0ba9d5e940>, <dependencyGraph.Codelet object at 0x7f0ba9d5e070>}
total number of nodes created:  4
state vars {'state_0', 'state_2', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_200', 'p_state_000', 'p_state_201', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_state_000+p_pkt_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1', 'p_state_101']
 node inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_201', 'p_state_200']
 node inputs:  ['state_2', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_201', 'p_state_200']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_2', 'p_pkt_1', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f0ba9d5e760>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_201', 'p_state_200']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f0ba9d5e760>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f0ba9d5ef10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f0ba9d5e5b0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,2,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0x3db5f63f
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f0ba9d96160>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f0ba9d5ef10>, 0), (<alus.DominoGenericSALU object at 0x7f0ba9d5efd0>, 1), (<alus.DominoGenericSALU object at 0x7f0ba9d5e5b0>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 8.092617750167847 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_state_000+p_pkt_0;

lhs p_state_001 rhs p_state_000+p_pkt_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = p_state_000+p_pkt_0;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0']
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_pkt_1<30&&1==1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fab60796700>, 'write': <dependencyGraph.Statement object at 0x7fab607968e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fab617b8bb0>, 'write': <dependencyGraph.Statement object at 0x7fab60796340>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fab607961f0>, 'write': <dependencyGraph.Statement object at 0x7fab60796820>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fab60796700>, 'write': <dependencyGraph.Statement object at 0x7fab607968e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fab617b8bb0>, 'write': <dependencyGraph.Statement object at 0x7fab60796340>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fab607961f0>, 'write': <dependencyGraph.Statement object at 0x7fab60796820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_state_000+p_pkt_0 stmts len 1
p_state_001 = p_state_000+p_pkt_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fab60796940>, <dependencyGraph.Codelet object at 0x7fab60796070>, <dependencyGraph.Codelet object at 0x7fab60796910>, <dependencyGraph.Codelet object at 0x7fab607969d0>]
p_state_000 = state_0;
p_state_001 = p_state_000+p_pkt_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fab60796910>, <dependencyGraph.Codelet object at 0x7fab60796940>, <dependencyGraph.Codelet object at 0x7fab60796070>}
total number of nodes created:  4
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_000', 'p_state_201', 'p_state_100', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_state_000+p_pkt_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_101', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_201', 'p_state_200']
 node inputs:  ['state_2', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_201', 'p_state_200']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp00', 'state_2', 'p_pkt_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
 | b:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fab60796760>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_201', 'p_state_200']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1; p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
 | b:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7fab60796760>]
adj_inputs []
redundant outputs ['p_state_101', 'p__br_tmp00', 'p_state_100']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1; p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
v:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fab60796f10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fab607965b0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,2,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0x3db5f63f
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fab607cd160>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fab60796f10>, 0), (<alus.DominoGenericSALU object at 0x7fab60796fd0>, 1), (<alus.DominoGenericSALU object at 0x7fab607965b0>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'state_0', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'state_0', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 6.139864444732666 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_state_000+p_pkt_0;

lhs p_state_001 rhs p_state_000+p_pkt_0
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_001 = p_state_000+p_pkt_0;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0']
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_1<30&&1==1&&1==1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f6ea922d700>, 'write': <dependencyGraph.Statement object at 0x7f6ea922d8e0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f6ea922d1f0>, 'write': <dependencyGraph.Statement object at 0x7f6ea922d820>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f6eaa250bb0>, 'write': <dependencyGraph.Statement object at 0x7f6ea922d340>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f6ea922d700>, 'write': <dependencyGraph.Statement object at 0x7f6ea922d8e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f6ea922d1f0>, 'write': <dependencyGraph.Statement object at 0x7f6ea922d820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f6eaa250bb0>, 'write': <dependencyGraph.Statement object at 0x7f6ea922d340>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_state_000+p_pkt_0 stmts len 1
p_state_001 = p_state_000+p_pkt_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f6ea922d940>, <dependencyGraph.Codelet object at 0x7f6ea922d070>, <dependencyGraph.Codelet object at 0x7f6ea922d910>, <dependencyGraph.Codelet object at 0x7f6ea922d9d0>]
p_state_000 = state_0;
p_state_001 = p_state_000+p_pkt_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f6ea922d910>, <dependencyGraph.Codelet object at 0x7f6ea922d940>, <dependencyGraph.Codelet object at 0x7f6ea922d070>}
total number of nodes created:  4
state vars {'state_1', 'state_2', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_200', 'p_state_100', 'p_state_101', 'p_state_001', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_state_000+p_pkt_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_101', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_200', 'p_state_201']
 node inputs:  ['state_2', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_2', 'state_1', 'p_pkt_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f6ea922d760>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_200', 'p_state_201']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f6ea922d760>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_101', 'p_state_100']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6ea922df10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f6ea922d5b0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,2,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0x3db5f63f
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f6ea9265160>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f6ea922df10>, 0), (<alus.DominoGenericSALU object at 0x7f6ea922dfd0>, 1), (<alus.DominoGenericSALU object at 0x7f6ea922d5b0>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 6.049729824066162 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_state_000+p_pkt_0;

lhs p_state_001 rhs p_state_000+p_pkt_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_001 = p_state_000+p_pkt_0;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0']
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_1<30&&1==1&&1==1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f6d12442bb0>, 'write': <dependencyGraph.Statement object at 0x7f6d11420340>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f6d114201f0>, 'write': <dependencyGraph.Statement object at 0x7f6d11420820>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f6d11420700>, 'write': <dependencyGraph.Statement object at 0x7f6d114208e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f6d12442bb0>, 'write': <dependencyGraph.Statement object at 0x7f6d11420340>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f6d114201f0>, 'write': <dependencyGraph.Statement object at 0x7f6d11420820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f6d11420700>, 'write': <dependencyGraph.Statement object at 0x7f6d114208e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_state_000+p_pkt_0 stmts len 1
p_state_001 = p_state_000+p_pkt_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f6d11420940>, <dependencyGraph.Codelet object at 0x7f6d11420070>, <dependencyGraph.Codelet object at 0x7f6d11420910>, <dependencyGraph.Codelet object at 0x7f6d114209d0>]
p_state_000 = state_0;
p_state_001 = p_state_000+p_pkt_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f6d11420910>, <dependencyGraph.Codelet object at 0x7f6d11420940>, <dependencyGraph.Codelet object at 0x7f6d11420070>}
total number of nodes created:  4
state vars {'state_0', 'state_2', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_000', 'p_state_200', 'p_state_100', 'p_state_001', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_state_000+p_pkt_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'p_state_101', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_201', 'p_state_200']
 node inputs:  ['state_2', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_201', 'p_state_200']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_2', 'p_pkt_1', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f6d11420760>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_201', 'p_state_200']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f6d11420760>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1; p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6d11420f10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f6d114205b0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,2,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0x3db5f63f
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f6d11457160>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f6d11420f10>, 0), (<alus.DominoGenericSALU object at 0x7f6d11420fd0>, 1), (<alus.DominoGenericSALU object at 0x7f6d114205b0>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 10.181800127029419 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_state_000+p_pkt_0;

lhs p_state_001 rhs p_state_000+p_pkt_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = p_state_000+p_pkt_0;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0']
p__br_tmp00 = p_pkt_1<30&&1==1;

lhs p__br_tmp00 rhs p_pkt_1<30&&1==1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = p_pkt_1<30&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
RAW p__br_tmp00 = p_pkt_1<30&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp00 = p_pkt_1<30&&1==1; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7feb2e0bbbb0>, 'write': <dependencyGraph.Statement object at 0x7feb2d098730>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7feb2d098700>, 'write': <dependencyGraph.Statement object at 0x7feb2d0988e0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7feb2d0981f0>, 'write': <dependencyGraph.Statement object at 0x7feb2d098820>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7feb2e0bbbb0>, 'write': <dependencyGraph.Statement object at 0x7feb2d098730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7feb2d098700>, 'write': <dependencyGraph.Statement object at 0x7feb2d0988e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7feb2d0981f0>, 'write': <dependencyGraph.Statement object at 0x7feb2d098820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_state_000+p_pkt_0 stmts len 1
p_state_001 = p_state_000+p_pkt_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp00 = p_pkt_1<30&&1==1 stmts len 1
p__br_tmp00 = p_pkt_1<30&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7feb2d098940>, <dependencyGraph.Codelet object at 0x7feb2d0980a0>, <dependencyGraph.Codelet object at 0x7feb2d098910>, <dependencyGraph.Codelet object at 0x7feb2d0989d0>]
p_state_000 = state_0;
p_state_001 = p_state_000+p_pkt_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp00 = p_pkt_1<30&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7feb2d098910>, <dependencyGraph.Codelet object at 0x7feb2d0980a0>, <dependencyGraph.Codelet object at 0x7feb2d098940>}
total number of nodes created:  4
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_000', 'p_state_200', 'p_state_201', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_state_000+p_pkt_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;', 'p__br_tmp00 = p_pkt_1<30&&1==1;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1', 'p_state_101']
 node inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = p_pkt_1<30&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'state_2', 'p_state_201']
 node inputs:  ['state_2', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp00 = p_pkt_1<30&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = p_pkt_1<30&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'state_2', 'state_1', 'p_pkt_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = p_pkt_1<30&&1==1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = p_pkt_1<30&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_1<30&&1==1;
 | b:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_1<30&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7feb2d098760>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_201', 'p_state_200']
state_var ['state_2']
resultant component: 
p__br_tmp00 = p_pkt_1<30&&1==1; p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = p_pkt_1<30&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_1<30&&1==1;
 | b:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_1<30&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7feb2d098760>]
adj_inputs []
redundant outputs ['p_state_101', 'p__br_tmp00', 'p_state_100']
state_var ['state_1']
resultant component: 
p__br_tmp00 = p_pkt_1<30&&1==1; p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = p_pkt_1<30&&1==1;
v:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
u:  p__br_tmp00 = p_pkt_1<30&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7feb2d098f10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7feb2d098fd0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7feb2d0cf160>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7feb2d098f10>, 0), (<alus.DominoGenericSALU object at 0x7feb2d098fd0>, 1), (<alus.DominoGenericSALU object at 0x7feb2d098610>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 9.03809404373169 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_state_000+p_pkt_0;

lhs p_state_001 rhs p_state_000+p_pkt_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = p_state_000+p_pkt_0;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0']
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_pkt_1<30
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f7f14cf2700>, 'write': <dependencyGraph.Statement object at 0x7f7f14cf28e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f7f15d14bb0>, 'write': <dependencyGraph.Statement object at 0x7f7f14cf2610>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f7f14cf21f0>, 'write': <dependencyGraph.Statement object at 0x7f7f14cf2820>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f7f14cf2700>, 'write': <dependencyGraph.Statement object at 0x7f7f14cf28e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f7f15d14bb0>, 'write': <dependencyGraph.Statement object at 0x7f7f14cf2610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f7f14cf21f0>, 'write': <dependencyGraph.Statement object at 0x7f7f14cf2820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_state_000+p_pkt_0 stmts len 1
p_state_001 = p_state_000+p_pkt_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7f14cf2940>, <dependencyGraph.Codelet object at 0x7f7f14cf2040>, <dependencyGraph.Codelet object at 0x7f7f14cf2910>, <dependencyGraph.Codelet object at 0x7f7f14cf29d0>]
p_state_000 = state_0;
p_state_001 = p_state_000+p_pkt_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f7f14cf2910>, <dependencyGraph.Codelet object at 0x7f7f14cf2940>, <dependencyGraph.Codelet object at 0x7f7f14cf2040>}
total number of nodes created:  4
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_100', 'p_state_101', 'p_state_200', 'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_state_000+p_pkt_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1', 'p_state_101']
 node inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_201', 'state_2', 'p_state_200']
 node inputs:  ['state_2', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_201', 'p_state_200']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p_pkt_1', 'state_1', 'state_2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
 | b:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;  with *************************
[<dependencyGraph.Statement object at 0x7f7f14cf2760>]
adj_inputs []
redundant outputs ['p_state_201', 'p__br_tmp00', 'p_state_200']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30; p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
 | b:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;  with *************************
[<dependencyGraph.Statement object at 0x7f7f14cf2760>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30; p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f7f14cf2f10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f7f14cf2340>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,2,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0x3db5f63f
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f7f14d29160>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f7f14cf2f10>, 0), (<alus.DominoGenericSALU object at 0x7f7f14cf2fd0>, 1), (<alus.DominoGenericSALU object at 0x7f7f14cf2340>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 5.0929179191589355 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_state_000+p_pkt_0;

lhs p_state_001 rhs p_state_000+p_pkt_0
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p_state_000+p_pkt_0;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0']
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;

lhs p__br_tmp00 rhs 1==1&&p_pkt_1<30&&1==1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7ff763b891f0>, 'write': <dependencyGraph.Statement object at 0x7ff763b89820>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7ff763b89700>, 'write': <dependencyGraph.Statement object at 0x7ff763b898e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7ff764bacbb0>, 'write': <dependencyGraph.Statement object at 0x7ff763b89610>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7ff763b891f0>, 'write': <dependencyGraph.Statement object at 0x7ff763b89820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7ff763b89700>, 'write': <dependencyGraph.Statement object at 0x7ff763b898e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7ff764bacbb0>, 'write': <dependencyGraph.Statement object at 0x7ff763b89610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_state_000+p_pkt_0 stmts len 1
p_state_001 = p_state_000+p_pkt_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1 stmts len 1
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff763b89940>, <dependencyGraph.Codelet object at 0x7ff763b890a0>, <dependencyGraph.Codelet object at 0x7ff763b89910>, <dependencyGraph.Codelet object at 0x7ff763b899d0>]
p_state_000 = state_0;
p_state_001 = p_state_000+p_pkt_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff763b89910>, <dependencyGraph.Codelet object at 0x7ff763b890a0>, <dependencyGraph.Codelet object at 0x7ff763b89940>}
total number of nodes created:  4
state vars {'state_2', 'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_000', 'p_state_200', 'p_state_001', 'p_state_101', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_state_000+p_pkt_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'p_state_100', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_201', 'p_state_200']
 node inputs:  ['state_2', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_201', 'p_state_200']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_1', 'p__br_tmp00', 'state_2', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
 | b:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7ff763b89760>]
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201', 'p__br_tmp00']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1; p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
 | b:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7ff763b89760>]
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100', 'p__br_tmp00']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1; p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
v:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
u:  p__br_tmp00 = 1==1&&p_pkt_1<30&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7ff763b89f10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff763b89fd0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7ff763bc1160>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7ff763b89f10>, 0), (<alus.DominoGenericSALU object at 0x7ff763b89fd0>, 1), (<alus.DominoGenericSALU object at 0x7ff763b89340>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 7.1444525718688965 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_state_000+p_pkt_0;

lhs p_state_001 rhs p_state_000+p_pkt_0
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p_state_000+p_pkt_0;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0']
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;

lhs p__br_tmp00 rhs 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7f5030c491f0>, 'write': <dependencyGraph.Statement object at 0x7f5030c49820>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f5031c6bbb0>, 'write': <dependencyGraph.Statement object at 0x7f5030c495b0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f5030c49700>, 'write': <dependencyGraph.Statement object at 0x7f5030c498e0>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f5030c491f0>, 'write': <dependencyGraph.Statement object at 0x7f5030c49820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f5031c6bbb0>, 'write': <dependencyGraph.Statement object at 0x7f5030c495b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f5030c49700>, 'write': <dependencyGraph.Statement object at 0x7f5030c498e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_state_000+p_pkt_0 stmts len 1
p_state_001 = p_state_000+p_pkt_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1 stmts len 1
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f5030c49940>, <dependencyGraph.Codelet object at 0x7f5030c49070>, <dependencyGraph.Codelet object at 0x7f5030c49910>, <dependencyGraph.Codelet object at 0x7f5030c499d0>]
p_state_000 = state_0;
p_state_001 = p_state_000+p_pkt_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f5030c49910>, <dependencyGraph.Codelet object at 0x7f5030c49940>, <dependencyGraph.Codelet object at 0x7f5030c49070>}
total number of nodes created:  4
state vars {'state_2', 'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_000', 'p_state_100', 'p_state_201', 'p_state_200'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_state_000+p_pkt_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;', 'p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['state_2', 'p_state_201', 'p_state_200']
 node inputs:  ['state_2', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_201', 'p_state_200']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'p_state_001', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp00', 'p_pkt_1', 'state_2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_201', 'p_state_200']
merge component: component is ----  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f5030c49760>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_201', 'p_state_200']
state_var ['state_2']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1; p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_201', 'p_state_200']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
 | b:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f5030c49760>]
adj_inputs []
redundant outputs ['p_state_101', 'p__br_tmp00', 'p_state_100']
state_var ['state_1']
resultant component: 
p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1; p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
u:  p__br_tmp00 = 1==1&&1==1&&p_pkt_1<30&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f5030c49f10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f5030c49670>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,2,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0x3db5f63f
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f5030c80160>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f5030c49f10>, 0), (<alus.DominoGenericSALU object at 0x7f5030c49fd0>, 1), (<alus.DominoGenericSALU object at 0x7f5030c49670>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 5.099862337112427 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_state_000+p_pkt_0;

lhs p_state_001 rhs p_state_000+p_pkt_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = p_state_000+p_pkt_0;

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_pkt_0']
p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;

lhs p__br_tmp00 rhs p_pkt_1<30&&1==1&&1==1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

lhs p_state_101 rhs (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_100', 'p_pkt_1', 'p_state_100']
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

lhs p_state_201 rhs (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0;
RAW p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
RAW p__br_tmp00 = p_pkt_1<30&&1==1&&1==1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
RAW p__br_tmp00 = p_pkt_1<30&&1==1&&1==1; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
RAW p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f22bc043700>, 'write': <dependencyGraph.Statement object at 0x7f22bc0438e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f22bd065bb0>, 'write': <dependencyGraph.Statement object at 0x7f22bc043610>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f22bc0431f0>, 'write': <dependencyGraph.Statement object at 0x7f22bc043820>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f22bc043700>, 'write': <dependencyGraph.Statement object at 0x7f22bc0438e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f22bd065bb0>, 'write': <dependencyGraph.Statement object at 0x7f22bc043610>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f22bc0431f0>, 'write': <dependencyGraph.Statement object at 0x7f22bc043820>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_state_000+p_pkt_0 stmts len 1
p_state_001 = p_state_000+p_pkt_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) stmts len 1
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) stmts len 1
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp00 = p_pkt_1<30&&1==1&&1==1 stmts len 1
p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f22bc043940>, <dependencyGraph.Codelet object at 0x7f22bc043040>, <dependencyGraph.Codelet object at 0x7f22bc043910>, <dependencyGraph.Codelet object at 0x7f22bc0439d0>]
p_state_000 = state_0;
p_state_001 = p_state_000+p_pkt_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f22bc043910>, <dependencyGraph.Codelet object at 0x7f22bc043940>, <dependencyGraph.Codelet object at 0x7f22bc043040>}
total number of nodes created:  4
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_200', 'p_state_001', 'p_state_100', 'p_state_201', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_state_000+p_pkt_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;', 'p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;', 'p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;', 'p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 node outputs:  ['p_state_200', 'p_state_201', 'state_2']
 node inputs:  ['state_2', 'p__br_tmp00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
     |  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_200', 'p_state_201']
state_var ['state_2']
    ~ merge_candidate: predecessor packing condition not met.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p_state_000+p_pkt_0; state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
 node outputs:  ['p__br_tmp00']
 node inputs:  ['p_pkt_1']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp00', 'p_pkt_1', 'state_1', 'state_2'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
trying to fold predecessor:  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
 | b:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 | state_pkt_fields of component b:  ['p_state_200', 'p_state_201']
merge component: component is ----  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f22bc043760>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_200', 'p_state_201']
state_var ['state_2']
resultant component: 
p__br_tmp00 = p_pkt_1<30&&1==1&&1==1; p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
new component inputs:  ['state_2', 'p_pkt_1']
new component outputs:  ['state_2']
new component state_pkt_fields:  ['p_state_200', 'p_state_201']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_pkt_1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
trying to fold node:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
trying to fold predecessor:  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
try_merge: trying to merge components: 
 | a:  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
 | b:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100']
merge component: component is ----  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;  with *************************
[<dependencyGraph.Statement object at 0x7f22bc043760>]
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_100', 'p_state_101']
state_var ['state_1']
resultant component: 
p__br_tmp00 = p_pkt_1<30&&1==1&&1==1; p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
new component inputs:  ['state_1', 'p_pkt_1']
new component outputs:  ['state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp00'}
{'p__br_tmp00'}
u:  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
v:  p_state_200 = state_2; p_state_201 = (1&&(p__br_tmp00)) ? (p_state_200+1) : (p_state_200); state_2 = p_state_201;
u:  p__br_tmp00 = p_pkt_1<30&&1==1&&1==1;
v:  p_state_100 = state_1; p_state_101 = (1&&(p__br_tmp00)) ? (p_state_100+p_pkt_1) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp00']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp00', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp00', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp00_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp00 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp00_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f22bc043f10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f22bc043340>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp00
 *** found dependency between stateless ALU  3  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,2,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0x3db5f63f
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
T0_A_2 1
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
stage:  1.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f22bc07a160>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f22bc043f10>, 0), (<alus.DominoGenericSALU object at 0x7f22bc043fd0>, 1), (<alus.DominoGenericSALU object at 0x7f22bc043340>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  2
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'state_0', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 2)], 'stateful_alus': [{'inputs': ['state_2', 'p__br_tmp00'], 'outputs': ['state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'state_0', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p__br_tmp00', 'p_pkt_1'], 'outputs': ['state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp00', 'immediate_operand': '30'}]}
Time taken: 12.207810401916504 s
preprocessor time:
