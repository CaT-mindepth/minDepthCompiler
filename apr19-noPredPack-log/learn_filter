running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_1_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

lhs p__br_tmp2 rhs !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0))
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_200 = state_2; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f1fa45e9220>, 'write': <dependencyGraph.Statement object at 0x7f1fa45e98b0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f1fa462a580>, 'write': <dependencyGraph.Statement object at 0x7f1fa45e9880>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f1fa45e9760>, 'write': <dependencyGraph.Statement object at 0x7f1fa45e91c0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1fa45e9220>, 'write': <dependencyGraph.Statement object at 0x7f1fa45e98b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f1fa462a580>, 'write': <dependencyGraph.Statement object at 0x7f1fa45e9880>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f1fa45e9760>, 'write': <dependencyGraph.Statement object at 0x7f1fa45e91c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  13
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 3
v p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)) stmts len 1
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
SCC 4
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 5
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 6
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 7
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 8
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 9
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1fa45e9ca0>, <dependencyGraph.Codelet object at 0x7f1fa45e9d30>, <dependencyGraph.Codelet object at 0x7f1fa45e9d90>, <dependencyGraph.Codelet object at 0x7f1fa45e9df0>, <dependencyGraph.Codelet object at 0x7f1fa45e9e80>, <dependencyGraph.Codelet object at 0x7f1fa45e9ee0>, <dependencyGraph.Codelet object at 0x7f1fa45e9f40>, <dependencyGraph.Codelet object at 0x7f1fa45e9e20>, <dependencyGraph.Codelet object at 0x7f1fa45e9fd0>, <dependencyGraph.Codelet object at 0x7f1fa45e9d60>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1fa45e9e80>, <dependencyGraph.Codelet object at 0x7f1fa45e9f40>, <dependencyGraph.Codelet object at 0x7f1fa45e9ee0>}
total number of nodes created:  10
state vars {'state_0', 'state_2', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_200', 'p_state_001', 'p_state_101', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_state_101', 'p_state_201', 'p_pkt_01', 'p_state_001'}
{'p_state_101', 'p_state_201', 'p_pkt_01', 'p_state_001'}
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_201 = 1;
v:  p_state_200 = state_2; state_2 = p_state_201;
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_001 = 1;
v:  p_state_000 = state_0; state_0 = p_state_001;
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_101 = 1;
v:  p_state_100 = state_1; state_1 = p_state_101;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_state_201']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_state_201', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_001']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_001', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_state_101']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_state_101', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_101 --------- 
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_201 --------- 
filename_to_compname: filename =  comp_10_stateless_p_state_201_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_state_201_bnd_1.sk.out
['comp_10']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_1_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_001 --------- 
filename_to_compname: filename =  comp_11_stateless_p_state_001_bnd_1.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_state_001_bnd_1.sk.out
['comp_11']
final_output:  _out_s11
   alu output:  _out_s11
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_12  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f1fa46184f0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
Stateless ALU id 3 has output p_state_101
 *** found dependency between stateless ALU  3  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f1fa4618670>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
Stateless ALU id 4 has output p_state_201
 *** found dependency between stateless ALU  4  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
 *** found stateless dependency between ALU  0  and ALU  6
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
 *** found stateless dependency between ALU  1  and ALU  6
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
 *** found stateless dependency between ALU  1  and ALU  7
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_11  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1fa45e9400>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
Stateless ALU id 9 has output p_state_001
 *** found dependency between stateless ALU  9  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
6,
+---> dependencies of ALU  1 : 
5,6,7,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
2,
+---> dependencies of ALU  4 : 
0,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 

+---> dependencies of ALU  9 : 
1,
# alus: =  10
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  2
 * gen_dependency_list: dependency between  4  and  0
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  9  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 10}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 6), (1, 5), (1, 6), (1, 7), (2, 5), (3, 2), (4, 0), (5, 8), (6, 8), (7, 8), (9, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 186 rows, 132 columns and 426 nonzeros
Model fingerprint: 0x771550cd
Model has 120 general constraints
Variable types: 0 continuous, 132 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 31 columns
Presolve time: 0.01s
Presolved: 191 rows, 101 columns, 452 nonzeros
Variable types: 0 continuous, 101 integer (90 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 8 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 1
T0_A_3 -0
T0_A_4 -0
T0_A_5 2
T0_A_6 2
T0_A_7 2
T0_A_8 3
T0_A_9 -0
************************************************
Obj: 3
number of stages:  4
stage:  1.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  -0.0
action:  3
num stages:  4
stage:  -0.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
stage:  2.0
action:  7
num stages:  4
stage:  3.0
action:  8
num stages:  4
stage:  -0.0
action:  9
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
alu  7  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  8 :  3.0
 > get_alu_stage: table  0 , alu_id =  8 :  3.0
alu  8  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  9 :  -0.0
 > get_alu_stage: table  0 , alu_id =  9 :  -0.0
alu  9  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  7  ;  [(<alus.DominoALU object at 0x7f1fa4618730>, 0), (<alus.DominoALU object at 0x7f1fa46185b0>, 1), (<alus.DominoALU object at 0x7f1fa4618a30>, 2), (<alus.DominoALU object at 0x7f1fa46184c0>, 3), (<alus.DominoALU object at 0x7f1fa4618b50>, 4), (<alus.DominoALU object at 0x7f1fa4618a00>, 5), (<alus.DominoALU object at 0x7f1fa4618c70>, 6)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f1fa4618670>, 0), (<alus.DominoGenericSALU object at 0x7f1fa45e9400>, 1), (<alus.DominoGenericSALU object at 0x7f1fa46184f0>, 2)]
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  2
 * gen_dependency_list: dependency between  4  and  0
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  9  and  1
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 6), (1, 5), (1, 6), (1, 7), (2, 5), (3, 2), (4, 0), (5, 8), (6, 8), (7, 8), (9, 1)], 'stateful_alus': [{'inputs': ['state_2', 'p_state_201'], 'outputs': ['state_2', 'p_state_200'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_state_001'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '0'}, {'id': 5, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 6, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 7, 'opcode': 13, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '4'}, {'id': 8, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '0'}, {'id': 9, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 6), (1, 5), (1, 6), (1, 7), (2, 5), (3, 2), (4, 0), (5, 8), (6, 8), (7, 8), (9, 1)], 'stateful_alus': [{'inputs': ['state_2', 'p_state_201'], 'outputs': ['state_2', 'p_state_200'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_state_001'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '0'}, {'id': 5, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 6, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 7, 'opcode': 13, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '4'}, {'id': 8, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '0'}, {'id': 9, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}]}
Time taken: 7.293557167053223 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_2_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

lhs p__br_tmp2 rhs !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0))
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_200 = state_2; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7f446d032580>, 'write': <dependencyGraph.Statement object at 0x7f446cff1880>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f446cff1220>, 'write': <dependencyGraph.Statement object at 0x7f446cff18b0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f446cff1760>, 'write': <dependencyGraph.Statement object at 0x7f446cff11c0>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f446d032580>, 'write': <dependencyGraph.Statement object at 0x7f446cff1880>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f446cff1220>, 'write': <dependencyGraph.Statement object at 0x7f446cff18b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f446cff1760>, 'write': <dependencyGraph.Statement object at 0x7f446cff11c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  13
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 3
v p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)) stmts len 1
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
SCC 4
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 5
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 6
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 7
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 8
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 9
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f446cff1ca0>, <dependencyGraph.Codelet object at 0x7f446cff1d30>, <dependencyGraph.Codelet object at 0x7f446cff1d90>, <dependencyGraph.Codelet object at 0x7f446cff1df0>, <dependencyGraph.Codelet object at 0x7f446cff1e80>, <dependencyGraph.Codelet object at 0x7f446cff1ee0>, <dependencyGraph.Codelet object at 0x7f446cff1f40>, <dependencyGraph.Codelet object at 0x7f446cff1e20>, <dependencyGraph.Codelet object at 0x7f446cff1fd0>, <dependencyGraph.Codelet object at 0x7f446cff1d60>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f446cff1e80>, <dependencyGraph.Codelet object at 0x7f446cff1f40>, <dependencyGraph.Codelet object at 0x7f446cff1ee0>}
total number of nodes created:  10
state vars {'state_2', 'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_200', 'p_state_000', 'p_state_101', 'p_state_001', 'p_state_201', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_state_101', 'p_state_001', 'p_state_201', 'p_pkt_01'}
{'p_state_101', 'p_state_001', 'p_state_201', 'p_pkt_01'}
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_201 = 1;
v:  p_state_200 = state_2; state_2 = p_state_201;
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_001 = 1;
v:  p_state_000 = state_0; state_0 = p_state_001;
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_101 = 1;
v:  p_state_100 = state_1; state_1 = p_state_101;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_state_201']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_state_201', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_001']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_001', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_state_101']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_state_101', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_101 --------- 
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_001 --------- 
filename_to_compname: filename =  comp_11_stateless_p_state_001_bnd_1.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_state_001_bnd_1.sk.out
['comp_11']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_201 --------- 
filename_to_compname: filename =  comp_10_stateless_p_state_201_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_state_201_bnd_1.sk.out
['comp_10']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_2_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  6  and ALU  9
 *** found stateless dependency between ALU  7  and ALU  9
 *** found stateless dependency between ALU  8  and ALU  9
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_12  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f446d0214f0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
Stateless ALU id 3 has output p_state_101
 *** found dependency between stateless ALU  3  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_11  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f446cff1400>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
Stateless ALU id 4 has output p_state_001
 *** found dependency between stateless ALU  4  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f446d0216d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
Stateless ALU id 5 has output p_state_201
 *** found dependency between stateless ALU  5  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  0  and ALU  6
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  2  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  1  and ALU  7
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  2  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  0  and ALU  8
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
6,8,
+---> dependencies of ALU  1 : 
7,
+---> dependencies of ALU  2 : 
6,7,
+---> dependencies of ALU  3 : 
2,
+---> dependencies of ALU  4 : 
1,
+---> dependencies of ALU  5 : 
0,
+---> dependencies of ALU  6 : 
9,
+---> dependencies of ALU  7 : 
9,
+---> dependencies of ALU  8 : 
9,
+---> dependencies of ALU  9 : 

# alus: =  10
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  8
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  2  and  7
 * gen_dependency_list: dependency between  3  and  2
 * gen_dependency_list: dependency between  4  and  1
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  9
 * gen_dependency_list: dependency between  7  and  9
 * gen_dependency_list: dependency between  8  and  9
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 10}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 6), (0, 8), (1, 7), (2, 6), (2, 7), (3, 2), (4, 1), (5, 0), (6, 9), (7, 9), (8, 9)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 186 rows, 132 columns and 426 nonzeros
Model fingerprint: 0x15d19290
Model has 120 general constraints
Variable types: 0 continuous, 132 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 31 columns
Presolve time: 0.01s
Presolved: 191 rows, 101 columns, 452 nonzeros
Variable types: 0 continuous, 101 integer (90 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 1
T0_A_3 -0
T0_A_4 -0
T0_A_5 -0
T0_A_6 2
T0_A_7 2
T0_A_8 2
T0_A_9 3
************************************************
Obj: 3
number of stages:  4
stage:  1.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  -0.0
action:  3
num stages:  4
stage:  -0.0
action:  4
num stages:  4
stage:  -0.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
stage:  2.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  3.0
action:  9
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
alu  7  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  3.0
 > get_alu_stage: table  0 , alu_id =  9 :  3.0
alu  9  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  7  ;  [(<alus.DominoALU object at 0x7f446d021550>, 0), (<alus.DominoALU object at 0x7f446d021700>, 1), (<alus.DominoALU object at 0x7f446d021730>, 2), (<alus.DominoALU object at 0x7f446d021760>, 3), (<alus.DominoALU object at 0x7f446d021910>, 4), (<alus.DominoALU object at 0x7f446d021a30>, 5), (<alus.DominoALU object at 0x7f446d021580>, 6)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f446d0216d0>, 0), (<alus.DominoGenericSALU object at 0x7f446cff1400>, 1), (<alus.DominoGenericSALU object at 0x7f446d0214f0>, 2)]
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  8
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  2  and  7
 * gen_dependency_list: dependency between  3  and  2
 * gen_dependency_list: dependency between  4  and  1
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  9
 * gen_dependency_list: dependency between  7  and  9
 * gen_dependency_list: dependency between  8  and  9
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 6), (0, 8), (1, 7), (2, 6), (2, 7), (3, 2), (4, 1), (5, 0), (6, 9), (7, 9), (8, 9)], 'stateful_alus': [{'inputs': ['state_2', 'p_state_201'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_state_001'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 8, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '4'}, {'id': 4, 'opcode': 8, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '1'}, {'id': 5, 'opcode': 8, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '1'}, {'id': 6, 'opcode': 11, 'operand0': 'p_state_200', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 7, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 8, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '14'}, {'id': 9, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 6), (0, 8), (1, 7), (2, 6), (2, 7), (3, 2), (4, 1), (5, 0), (6, 9), (7, 9), (8, 9)], 'stateful_alus': [{'inputs': ['state_2', 'p_state_201'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_state_001'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 8, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '4'}, {'id': 4, 'opcode': 8, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '1'}, {'id': 5, 'opcode': 8, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '1'}, {'id': 6, 'opcode': 11, 'operand0': 'p_state_200', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 7, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 8, 'opcode': 14, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '14'}, {'id': 9, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '0'}]}
Time taken: 7.25334095954895 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_3_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

lhs p__br_tmp2 rhs !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0))
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_200 = state_2; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7ff90a46e220>, 'write': <dependencyGraph.Statement object at 0x7ff90a46e8b0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7ff90a4b0580>, 'write': <dependencyGraph.Statement object at 0x7ff90a46e880>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7ff90a46e760>, 'write': <dependencyGraph.Statement object at 0x7ff90a46e160>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7ff90a46e220>, 'write': <dependencyGraph.Statement object at 0x7ff90a46e8b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7ff90a4b0580>, 'write': <dependencyGraph.Statement object at 0x7ff90a46e880>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7ff90a46e760>, 'write': <dependencyGraph.Statement object at 0x7ff90a46e160>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  13
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 3
v p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)) stmts len 1
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
SCC 4
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 5
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 6
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 7
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 8
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 9
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff90a46eca0>, <dependencyGraph.Codelet object at 0x7ff90a46ed30>, <dependencyGraph.Codelet object at 0x7ff90a46ed90>, <dependencyGraph.Codelet object at 0x7ff90a46edf0>, <dependencyGraph.Codelet object at 0x7ff90a46ee80>, <dependencyGraph.Codelet object at 0x7ff90a46eee0>, <dependencyGraph.Codelet object at 0x7ff90a46ef40>, <dependencyGraph.Codelet object at 0x7ff90a46ee20>, <dependencyGraph.Codelet object at 0x7ff90a46efd0>, <dependencyGraph.Codelet object at 0x7ff90a46ed60>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff90a46ee80>, <dependencyGraph.Codelet object at 0x7ff90a46ef40>, <dependencyGraph.Codelet object at 0x7ff90a46eee0>}
total number of nodes created:  10
state vars {'state_0', 'state_2', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_000', 'p_state_001', 'p_state_200', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_state_101', 'p_state_001', 'p_state_201', 'p_pkt_01'}
{'p_state_101', 'p_state_001', 'p_state_201', 'p_pkt_01'}
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_201 = 1;
v:  p_state_200 = state_2; state_2 = p_state_201;
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_001 = 1;
v:  p_state_000 = state_0; state_0 = p_state_001;
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_101 = 1;
v:  p_state_100 = state_1; state_1 = p_state_101;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_state_201']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_state_201', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_001']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_001', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_state_101']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_state_101', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_101 --------- 
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_001 --------- 
filename_to_compname: filename =  comp_11_stateless_p_state_001_bnd_1.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_state_001_bnd_1.sk.out
['comp_11']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_201 --------- 
filename_to_compname: filename =  comp_10_stateless_p_state_201_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_state_201_bnd_1.sk.out
['comp_10']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_3_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  6  and ALU  9
 *** found stateless dependency between ALU  7  and ALU  9
 *** found stateless dependency between ALU  8  and ALU  9
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_12  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7ff90a49e4f0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
Stateless ALU id 3 has output p_state_101
 *** found dependency between stateless ALU  3  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_11  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff90a46e400>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
Stateless ALU id 4 has output p_state_001
 *** found dependency between stateless ALU  4  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7ff90a49e6d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
Stateless ALU id 5 has output p_state_201
 *** found dependency between stateless ALU  5  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  0  and ALU  6
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  1  and ALU  6
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  2  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  1  and ALU  7
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  2  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  0  and ALU  8
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  2  and ALU  8
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_11', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
6,8,
+---> dependencies of ALU  1 : 
6,7,
+---> dependencies of ALU  2 : 
6,7,8,
+---> dependencies of ALU  3 : 
2,
+---> dependencies of ALU  4 : 
1,
+---> dependencies of ALU  5 : 
0,
+---> dependencies of ALU  6 : 
9,
+---> dependencies of ALU  7 : 
9,
+---> dependencies of ALU  8 : 
9,
+---> dependencies of ALU  9 : 

# alus: =  10
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  8
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  2  and  7
 * gen_dependency_list: dependency between  2  and  8
 * gen_dependency_list: dependency between  3  and  2
 * gen_dependency_list: dependency between  4  and  1
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  9
 * gen_dependency_list: dependency between  7  and  9
 * gen_dependency_list: dependency between  8  and  9
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 10}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 6), (0, 8), (1, 6), (1, 7), (2, 6), (2, 7), (2, 8), (3, 2), (4, 1), (5, 0), (6, 9), (7, 9), (8, 9)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 188 rows, 132 columns and 430 nonzeros
Model fingerprint: 0x6cd2cb2c
Model has 120 general constraints
Variable types: 0 continuous, 132 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 31 columns
Presolve time: 0.01s
Presolved: 193 rows, 101 columns, 456 nonzeros
Variable types: 0 continuous, 101 integer (90 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 1
T0_A_3 -0
T0_A_4 -0
T0_A_5 -0
T0_A_6 2
T0_A_7 2
T0_A_8 2
T0_A_9 3
************************************************
Obj: 3
number of stages:  4
stage:  1.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  -0.0
action:  3
num stages:  4
stage:  -0.0
action:  4
num stages:  4
stage:  -0.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
stage:  2.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  3.0
action:  9
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
alu  7  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  3.0
 > get_alu_stage: table  0 , alu_id =  9 :  3.0
alu  9  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  7  ;  [(<alus.DominoALU object at 0x7ff90a49e550>, 0), (<alus.DominoALU object at 0x7ff90a49e700>, 1), (<alus.DominoALU object at 0x7ff90a49e730>, 2), (<alus.DominoALU object at 0x7ff90a49e760>, 3), (<alus.DominoALU object at 0x7ff90a49e910>, 4), (<alus.DominoALU object at 0x7ff90a49ea30>, 5), (<alus.DominoALU object at 0x7ff90a49e580>, 6)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7ff90a49e6d0>, 0), (<alus.DominoGenericSALU object at 0x7ff90a46e400>, 1), (<alus.DominoGenericSALU object at 0x7ff90a49e4f0>, 2)]
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  8
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  2  and  7
 * gen_dependency_list: dependency between  2  and  8
 * gen_dependency_list: dependency between  3  and  2
 * gen_dependency_list: dependency between  4  and  1
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  9
 * gen_dependency_list: dependency between  7  and  9
 * gen_dependency_list: dependency between  8  and  9
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 6), (0, 8), (1, 6), (1, 7), (2, 6), (2, 7), (2, 8), (3, 2), (4, 1), (5, 0), (6, 9), (7, 9), (8, 9)], 'stateful_alus': [{'inputs': ['state_2', 'p_state_201'], 'outputs': ['state_2', 'p_state_200'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_state_001'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}, {'id': 5, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '0'}, {'id': 6, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 7, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 8, 'opcode': 19, 'operand0': 'p_pkt_0', 'operand1': 'p_state_200', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 9, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 6), (0, 8), (1, 6), (1, 7), (2, 6), (2, 7), (2, 8), (3, 2), (4, 1), (5, 0), (6, 9), (7, 9), (8, 9)], 'stateful_alus': [{'inputs': ['state_2', 'p_state_201'], 'outputs': ['state_2', 'p_state_200'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_state_001'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}, {'id': 5, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '0'}, {'id': 6, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 7, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 8, 'opcode': 19, 'operand0': 'p_pkt_0', 'operand1': 'p_state_200', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 9, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '31'}]}
Time taken: 6.394043207168579 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_4_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

lhs p__br_tmp2 rhs !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0))
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_200 = state_2; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7ff7c4301220>, 'write': <dependencyGraph.Statement object at 0x7ff7c43018b0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7ff7c4343580>, 'write': <dependencyGraph.Statement object at 0x7ff7c4301880>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7ff7c4301760>, 'write': <dependencyGraph.Statement object at 0x7ff7c43011c0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7ff7c4301220>, 'write': <dependencyGraph.Statement object at 0x7ff7c43018b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7ff7c4343580>, 'write': <dependencyGraph.Statement object at 0x7ff7c4301880>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7ff7c4301760>, 'write': <dependencyGraph.Statement object at 0x7ff7c43011c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  13
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 3
v p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)) stmts len 1
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
SCC 4
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 5
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 6
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 7
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 8
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 9
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff7c4301ca0>, <dependencyGraph.Codelet object at 0x7ff7c4301d30>, <dependencyGraph.Codelet object at 0x7ff7c4301d90>, <dependencyGraph.Codelet object at 0x7ff7c4301df0>, <dependencyGraph.Codelet object at 0x7ff7c4301e80>, <dependencyGraph.Codelet object at 0x7ff7c4301ee0>, <dependencyGraph.Codelet object at 0x7ff7c4301f40>, <dependencyGraph.Codelet object at 0x7ff7c4301e20>, <dependencyGraph.Codelet object at 0x7ff7c4301fd0>, <dependencyGraph.Codelet object at 0x7ff7c4301d60>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff7c4301e80>, <dependencyGraph.Codelet object at 0x7ff7c4301f40>, <dependencyGraph.Codelet object at 0x7ff7c4301ee0>}
total number of nodes created:  10
state vars {'state_0', 'state_2', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_101', 'p_state_100', 'p_state_200', 'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_state_001', 'p_state_101', 'p_state_201', 'p_pkt_01'}
{'p_state_001', 'p_state_101', 'p_state_201', 'p_pkt_01'}
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_201 = 1;
v:  p_state_200 = state_2; state_2 = p_state_201;
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_001 = 1;
v:  p_state_000 = state_0; state_0 = p_state_001;
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_101 = 1;
v:  p_state_100 = state_1; state_1 = p_state_101;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_state_201']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_state_201', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_001']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_001', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_state_101']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_state_101', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_001 --------- 
filename_to_compname: filename =  comp_11_stateless_p_state_001_bnd_1.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_state_001_bnd_1.sk.out
['comp_11']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_101 --------- 
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_201 --------- 
filename_to_compname: filename =  comp_10_stateless_p_state_201_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_state_201_bnd_1.sk.out
['comp_10']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_4_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  6  and ALU  9
 *** found stateless dependency between ALU  7  and ALU  9
 *** found stateless dependency between ALU  8  and ALU  9
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_11  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7ff7c4301400>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
Stateless ALU id 3 has output p_state_001
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_12  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7ff7c43314f0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
Stateless ALU id 4 has output p_state_101
 *** found dependency between stateless ALU  4  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7ff7c43316d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
Stateless ALU id 5 has output p_state_201
 *** found dependency between stateless ALU  5  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  2  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  0  and ALU  7
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  1  and ALU  7
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  2  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  2  and ALU  8
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
7,
+---> dependencies of ALU  1 : 
7,
+---> dependencies of ALU  2 : 
6,7,8,
+---> dependencies of ALU  3 : 
1,
+---> dependencies of ALU  4 : 
2,
+---> dependencies of ALU  5 : 
0,
+---> dependencies of ALU  6 : 
9,
+---> dependencies of ALU  7 : 
9,
+---> dependencies of ALU  8 : 
9,
+---> dependencies of ALU  9 : 

# alus: =  10
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  2  and  7
 * gen_dependency_list: dependency between  2  and  8
 * gen_dependency_list: dependency between  3  and  1
 * gen_dependency_list: dependency between  4  and  2
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  9
 * gen_dependency_list: dependency between  7  and  9
 * gen_dependency_list: dependency between  8  and  9
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 10}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 7), (1, 7), (2, 6), (2, 7), (2, 8), (3, 1), (4, 2), (5, 0), (6, 9), (7, 9), (8, 9)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 186 rows, 132 columns and 426 nonzeros
Model fingerprint: 0x8494f7f8
Model has 120 general constraints
Variable types: 0 continuous, 132 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 31 columns
Presolve time: 0.01s
Presolved: 191 rows, 101 columns, 452 nonzeros
Variable types: 0 continuous, 101 integer (90 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 1
T0_A_3 -0
T0_A_4 -0
T0_A_5 -0
T0_A_6 2
T0_A_7 2
T0_A_8 2
T0_A_9 3
************************************************
Obj: 3
number of stages:  4
stage:  1.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  -0.0
action:  3
num stages:  4
stage:  -0.0
action:  4
num stages:  4
stage:  -0.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
stage:  2.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  3.0
action:  9
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
alu  7  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  3.0
 > get_alu_stage: table  0 , alu_id =  9 :  3.0
alu  9  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  7  ;  [(<alus.DominoALU object at 0x7ff7c4331550>, 0), (<alus.DominoALU object at 0x7ff7c4331700>, 1), (<alus.DominoALU object at 0x7ff7c4331730>, 2), (<alus.DominoALU object at 0x7ff7c4331760>, 3), (<alus.DominoALU object at 0x7ff7c4331910>, 4), (<alus.DominoALU object at 0x7ff7c4331a30>, 5), (<alus.DominoALU object at 0x7ff7c4331580>, 6)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7ff7c43316d0>, 0), (<alus.DominoGenericSALU object at 0x7ff7c4301400>, 1), (<alus.DominoGenericSALU object at 0x7ff7c43314f0>, 2)]
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  2  and  7
 * gen_dependency_list: dependency between  2  and  8
 * gen_dependency_list: dependency between  3  and  1
 * gen_dependency_list: dependency between  4  and  2
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  9
 * gen_dependency_list: dependency between  7  and  9
 * gen_dependency_list: dependency between  8  and  9
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 7), (1, 7), (2, 6), (2, 7), (2, 8), (3, 1), (4, 2), (5, 0), (6, 9), (7, 9), (8, 9)], 'stateful_alus': [{'inputs': ['state_2', 'p_state_201'], 'outputs': ['state_2', 'p_state_200'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_state_001'], 'outputs': ['p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 7, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '4'}, {'id': 4, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '0'}, {'id': 5, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '0'}, {'id': 6, 'opcode': 12, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '20'}, {'id': 7, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 8, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 9, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '6'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 7), (1, 7), (2, 6), (2, 7), (2, 8), (3, 1), (4, 2), (5, 0), (6, 9), (7, 9), (8, 9)], 'stateful_alus': [{'inputs': ['state_2', 'p_state_201'], 'outputs': ['state_2', 'p_state_200'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_state_001'], 'outputs': ['p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 7, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '4'}, {'id': 4, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '0'}, {'id': 5, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '0'}, {'id': 6, 'opcode': 12, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '20'}, {'id': 7, 'opcode': 18, 'operand0': 'p_state_200', 'operand1': 'p_state_000', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 8, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 9, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '6'}]}
Time taken: 7.968522310256958 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_5_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

lhs p__br_tmp2 rhs !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0))
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_200 = state_2; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f3f0bef6220>, 'write': <dependencyGraph.Statement object at 0x7f3f0bef68b0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f3f0bf38580>, 'write': <dependencyGraph.Statement object at 0x7f3f0bef6880>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f3f0bef6760>, 'write': <dependencyGraph.Statement object at 0x7f3f0bef6160>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f3f0bef6220>, 'write': <dependencyGraph.Statement object at 0x7f3f0bef68b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f3f0bf38580>, 'write': <dependencyGraph.Statement object at 0x7f3f0bef6880>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f3f0bef6760>, 'write': <dependencyGraph.Statement object at 0x7f3f0bef6160>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  13
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 3
v p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)) stmts len 1
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
SCC 4
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 5
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 6
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 7
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 8
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 9
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3f0bef6ca0>, <dependencyGraph.Codelet object at 0x7f3f0bef6d30>, <dependencyGraph.Codelet object at 0x7f3f0bef6d90>, <dependencyGraph.Codelet object at 0x7f3f0bef6df0>, <dependencyGraph.Codelet object at 0x7f3f0bef6e80>, <dependencyGraph.Codelet object at 0x7f3f0bef6ee0>, <dependencyGraph.Codelet object at 0x7f3f0bef6f40>, <dependencyGraph.Codelet object at 0x7f3f0bef6e20>, <dependencyGraph.Codelet object at 0x7f3f0bef6fd0>, <dependencyGraph.Codelet object at 0x7f3f0bef6d60>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f3f0bef6e80>, <dependencyGraph.Codelet object at 0x7f3f0bef6f40>, <dependencyGraph.Codelet object at 0x7f3f0bef6ee0>}
total number of nodes created:  10
state vars {'state_0', 'state_2', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_101', 'p_state_201', 'p_state_200', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01', 'p_state_201', 'p_state_101', 'p_state_001'}
{'p_pkt_01', 'p_state_201', 'p_state_101', 'p_state_001'}
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_201 = 1;
v:  p_state_200 = state_2; state_2 = p_state_201;
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_001 = 1;
v:  p_state_000 = state_0; state_0 = p_state_001;
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_101 = 1;
v:  p_state_100 = state_1; state_1 = p_state_101;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_state_201']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_state_201', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_001']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_001', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_state_101']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_state_101', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_201 --------- 
filename_to_compname: filename =  comp_10_stateless_p_state_201_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_state_201_bnd_1.sk.out
['comp_10']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_101 --------- 
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_5_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_001 --------- 
filename_to_compname: filename =  comp_11_stateless_p_state_001_bnd_1.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_state_001_bnd_1.sk.out
['comp_11']
final_output:  _out_s11
   alu output:  _out_s11
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3f0bf266d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
Stateless ALU id 7 has output p_state_201
 *** found dependency between stateless ALU  7  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_12  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f3f0bf264f0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
Stateless ALU id 8 has output p_state_101
 *** found dependency between stateless ALU  8  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_11  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f3f0bef6400>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_10', 8: 'comp_12', 9: 'comp_11'}
Stateless ALU id 9 has output p_state_001
 *** found dependency between stateless ALU  9  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,5,
+---> dependencies of ALU  1 : 
3,
+---> dependencies of ALU  2 : 
4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

+---> dependencies of ALU  7 : 
0,
+---> dependencies of ALU  8 : 
2,
+---> dependencies of ALU  9 : 
1,
# alus: =  10
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  7  and  0
 * gen_dependency_list: dependency between  8  and  2
 * gen_dependency_list: dependency between  9  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 10}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 5), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (7, 0), (8, 2), (9, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 186 rows, 132 columns and 426 nonzeros
Model fingerprint: 0x486e2daf
Model has 120 general constraints
Variable types: 0 continuous, 132 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 31 columns
Presolve time: 0.01s
Presolved: 191 rows, 101 columns, 452 nonzeros
Variable types: 0 continuous, 101 integer (90 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 1
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
T0_A_7 -0
T0_A_8 -0
T0_A_9 -0
************************************************
Obj: 3
number of stages:  4
stage:  1.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  2.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
stage:  3.0
action:  6
num stages:  4
stage:  -0.0
action:  7
num stages:  4
stage:  -0.0
action:  8
num stages:  4
stage:  -0.0
action:  9
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  8 :  -0.0
 > get_alu_stage: table  0 , alu_id =  8 :  -0.0
alu  8  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  9 :  -0.0
 > get_alu_stage: table  0 , alu_id =  9 :  -0.0
alu  9  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  7  ;  [(<alus.DominoALU object at 0x7f3f0bf264c0>, 0), (<alus.DominoALU object at 0x7f3f0bf26700>, 1), (<alus.DominoALU object at 0x7f3f0bf26970>, 2), (<alus.DominoALU object at 0x7f3f0bf26520>, 3), (<alus.DominoALU object at 0x7f3f0bf26370>, 4), (<alus.DominoALU object at 0x7f3f0bf26580>, 5), (<alus.DominoALU object at 0x7f3f0bf26c70>, 6)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f3f0bf266d0>, 0), (<alus.DominoGenericSALU object at 0x7f3f0bef6400>, 1), (<alus.DominoGenericSALU object at 0x7f3f0bf264f0>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  7  and  0
 * gen_dependency_list: dependency between  8  and  2
 * gen_dependency_list: dependency between  9  and  1
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 3), (0, 5), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (7, 0), (8, 2), (9, 1)], 'stateful_alus': [{'inputs': ['state_2', 'p_state_201'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_state_001'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 8, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '29'}, {'id': 7, 'opcode': 16, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '8'}, {'id': 8, 'opcode': 16, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '8'}, {'id': 9, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 3), (0, 5), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (7, 0), (8, 2), (9, 1)], 'stateful_alus': [{'inputs': ['state_2', 'p_state_201'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_state_001'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 8, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '29'}, {'id': 7, 'opcode': 16, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '8'}, {'id': 8, 'opcode': 16, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '8'}, {'id': 9, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}]}
Time taken: 8.298511743545532 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_6_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

lhs p__br_tmp2 rhs !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0))
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_200 = state_2; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7f8e24e7a580>, 'write': <dependencyGraph.Statement object at 0x7f8e24e38880>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f8e24e38220>, 'write': <dependencyGraph.Statement object at 0x7f8e24e388b0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f8e24e38760>, 'write': <dependencyGraph.Statement object at 0x7f8e24e38160>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f8e24e7a580>, 'write': <dependencyGraph.Statement object at 0x7f8e24e38880>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f8e24e38220>, 'write': <dependencyGraph.Statement object at 0x7f8e24e388b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f8e24e38760>, 'write': <dependencyGraph.Statement object at 0x7f8e24e38160>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  13
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 3
v p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)) stmts len 1
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
SCC 4
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 5
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 6
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 7
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 8
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 9
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f8e24e38ca0>, <dependencyGraph.Codelet object at 0x7f8e24e38d30>, <dependencyGraph.Codelet object at 0x7f8e24e38d90>, <dependencyGraph.Codelet object at 0x7f8e24e38df0>, <dependencyGraph.Codelet object at 0x7f8e24e38e80>, <dependencyGraph.Codelet object at 0x7f8e24e38ee0>, <dependencyGraph.Codelet object at 0x7f8e24e38f40>, <dependencyGraph.Codelet object at 0x7f8e24e38e20>, <dependencyGraph.Codelet object at 0x7f8e24e38fd0>, <dependencyGraph.Codelet object at 0x7f8e24e38d60>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f8e24e38e80>, <dependencyGraph.Codelet object at 0x7f8e24e38f40>, <dependencyGraph.Codelet object at 0x7f8e24e38ee0>}
total number of nodes created:  10
state vars {'state_2', 'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_200', 'p_state_100', 'p_state_201', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_pkt_01', 'p_state_101', 'p_state_201', 'p_state_001'}
{'p_pkt_01', 'p_state_101', 'p_state_201', 'p_state_001'}
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_201 = 1;
v:  p_state_200 = state_2; state_2 = p_state_201;
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_001 = 1;
v:  p_state_000 = state_0; state_0 = p_state_001;
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_101 = 1;
v:  p_state_100 = state_1; state_1 = p_state_101;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_state_201']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_state_201', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_001']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_001', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_state_101']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_state_101', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_101 --------- 
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_201 --------- 
filename_to_compname: filename =  comp_10_stateless_p_state_201_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_state_201_bnd_1.sk.out
['comp_10']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_6_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_001 --------- 
filename_to_compname: filename =  comp_11_stateless_p_state_001_bnd_1.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_state_001_bnd_1.sk.out
['comp_11']
final_output:  _out_s11
   alu output:  _out_s11
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
 *** found stateless dependency between ALU  0  and ALU  3
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
 *** found stateless dependency between ALU  0  and ALU  4
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_12  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f8e24e684f0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
Stateless ALU id 7 has output p_state_101
 *** found dependency between stateless ALU  7  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f8e24e686d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
Stateless ALU id 8 has output p_state_201
 *** found dependency between stateless ALU  8  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_11  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f8e24e38400>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_13', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_12', 8: 'comp_10', 9: 'comp_11'}
Stateless ALU id 9 has output p_state_001
 *** found dependency between stateless ALU  9  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,
+---> dependencies of ALU  1 : 
3,
+---> dependencies of ALU  2 : 
4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 

+---> dependencies of ALU  7 : 
2,
+---> dependencies of ALU  8 : 
0,
+---> dependencies of ALU  9 : 
1,
# alus: =  10
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  7  and  2
 * gen_dependency_list: dependency between  8  and  0
 * gen_dependency_list: dependency between  9  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 10}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (7, 2), (8, 0), (9, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 186 rows, 132 columns and 426 nonzeros
Model fingerprint: 0xa765bbb5
Model has 120 general constraints
Variable types: 0 continuous, 132 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 31 columns
Presolve time: 0.01s
Presolved: 191 rows, 101 columns, 452 nonzeros
Variable types: 0 continuous, 101 integer (90 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 1
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
T0_A_7 -0
T0_A_8 -0
T0_A_9 -0
************************************************
Obj: 3
number of stages:  4
stage:  1.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  2.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
stage:  3.0
action:  6
num stages:  4
stage:  -0.0
action:  7
num stages:  4
stage:  -0.0
action:  8
num stages:  4
stage:  -0.0
action:  9
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  8 :  -0.0
 > get_alu_stage: table  0 , alu_id =  8 :  -0.0
alu  8  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  9 :  -0.0
 > get_alu_stage: table  0 , alu_id =  9 :  -0.0
alu  9  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  7  ;  [(<alus.DominoALU object at 0x7f8e24e684c0>, 0), (<alus.DominoALU object at 0x7f8e24e68700>, 1), (<alus.DominoALU object at 0x7f8e24e68970>, 2), (<alus.DominoALU object at 0x7f8e24e68520>, 3), (<alus.DominoALU object at 0x7f8e24e68370>, 4), (<alus.DominoALU object at 0x7f8e24e68580>, 5), (<alus.DominoALU object at 0x7f8e24e68c70>, 6)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f8e24e686d0>, 0), (<alus.DominoGenericSALU object at 0x7f8e24e38400>, 1), (<alus.DominoGenericSALU object at 0x7f8e24e684f0>, 2)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  7  and  2
 * gen_dependency_list: dependency between  8  and  0
 * gen_dependency_list: dependency between  9  and  1
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 3), (0, 4), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (7, 2), (8, 0), (9, 1)], 'stateful_alus': [{'inputs': ['state_2', 'p_state_201'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_state_001'], 'outputs': ['p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '4'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '31'}, {'id': 7, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '0'}, {'id': 8, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '0'}, {'id': 9, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 3), (0, 4), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (7, 2), (8, 0), (9, 1)], 'stateful_alus': [{'inputs': ['state_2', 'p_state_201'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_state_001'], 'outputs': ['p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '4'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '31'}, {'id': 7, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '0'}, {'id': 8, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '0'}, {'id': 9, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}]}
Time taken: 6.528130531311035 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_7_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

lhs p__br_tmp2 rhs !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0))
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_200 = state_2; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p_state_201 = 1; state_2 = p_state_201;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_001 = 1; state_0 = p_state_001;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7f4cbd9de580>, 'write': <dependencyGraph.Statement object at 0x7f4cbd99c880>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f4cbd99c220>, 'write': <dependencyGraph.Statement object at 0x7f4cbd99c8b0>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f4cbd99c760>, 'write': <dependencyGraph.Statement object at 0x7f4cbd99c1c0>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f4cbd9de580>, 'write': <dependencyGraph.Statement object at 0x7f4cbd99c880>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f4cbd99c220>, 'write': <dependencyGraph.Statement object at 0x7f4cbd99c8b0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f4cbd99c760>, 'write': <dependencyGraph.Statement object at 0x7f4cbd99c1c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  13
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 3
v p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)) stmts len 1
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
SCC 4
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 5
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 6
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 7
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC 8
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 9
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f4cbd99cca0>, <dependencyGraph.Codelet object at 0x7f4cbd99cd30>, <dependencyGraph.Codelet object at 0x7f4cbd99cd90>, <dependencyGraph.Codelet object at 0x7f4cbd99cdf0>, <dependencyGraph.Codelet object at 0x7f4cbd99ce80>, <dependencyGraph.Codelet object at 0x7f4cbd99cee0>, <dependencyGraph.Codelet object at 0x7f4cbd99cf40>, <dependencyGraph.Codelet object at 0x7f4cbd99ce20>, <dependencyGraph.Codelet object at 0x7f4cbd99cfd0>, <dependencyGraph.Codelet object at 0x7f4cbd99cd60>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_201 = 1;
p_state_101 = 1;
p_state_001 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f4cbd99ce80>, <dependencyGraph.Codelet object at 0x7f4cbd99cf40>, <dependencyGraph.Codelet object at 0x7f4cbd99cee0>}
total number of nodes created:  10
state vars {'state_2', 'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_101', 'p_state_200', 'p_state_201', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p_state_101', 'p_state_201', 'p_pkt_01', 'p_state_001'}
{'p_state_101', 'p_state_201', 'p_pkt_01', 'p_state_001'}
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_201 = 1;
v:  p_state_200 = state_2; state_2 = p_state_201;
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_001 = 1;
v:  p_state_000 = state_0; state_0 = p_state_001;
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_101 = 1;
v:  p_state_100 = state_1; state_1 = p_state_101;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_state_201']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_state_201', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_001']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_001', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_state_101']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_state_101', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_101 --------- 
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_10_stateless_p_state_201_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_201 --------- 
filename_to_compname: filename =  comp_10_stateless_p_state_201_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_state_201_bnd_1.sk.out
['comp_10']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_7_canonicalizer_out/comp_11_stateless_p_state_001_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_001 --------- 
filename_to_compname: filename =  comp_11_stateless_p_state_001_bnd_1.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_state_001_bnd_1.sk.out
['comp_11']
final_output:  _out_s11
   alu output:  _out_s11
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_12  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f4cbd9cc4f0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
Stateless ALU id 3 has output p_state_101
 *** found dependency between stateless ALU  3  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f4cbd9cc6d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
Stateless ALU id 4 has output p_state_201
 *** found dependency between stateless ALU  4  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
 *** found stateless dependency between ALU  1  and ALU  6
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
 *** found stateless dependency between ALU  2  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_11  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f4cbd99c400>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_12', 4: 'comp_10', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_11'}
Stateless ALU id 9 has output p_state_001
 *** found dependency between stateless ALU  9  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
5,
+---> dependencies of ALU  1 : 
6,
+---> dependencies of ALU  2 : 
5,6,
+---> dependencies of ALU  3 : 
2,
+---> dependencies of ALU  4 : 
0,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 

+---> dependencies of ALU  9 : 
1,
# alus: =  10
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  3  and  2
 * gen_dependency_list: dependency between  4  and  0
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  9  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 10}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 5), (1, 6), (2, 5), (2, 6), (3, 2), (4, 0), (5, 8), (6, 8), (7, 8), (9, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 185 rows, 132 columns and 424 nonzeros
Model fingerprint: 0xf7018712
Model has 120 general constraints
Variable types: 0 continuous, 132 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 29 columns
Presolve time: 0.01s
Presolved: 194 rows, 103 columns, 460 nonzeros
Variable types: 0 continuous, 103 integer (92 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 3 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 1
T0_A_3 -0
T0_A_4 -0
T0_A_5 2
T0_A_6 2
T0_A_7 -0
T0_A_8 3
T0_A_9 -0
************************************************
Obj: 3
number of stages:  4
stage:  1.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  -0.0
action:  3
num stages:  4
stage:  -0.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
stage:  -0.0
action:  7
num stages:  4
stage:  3.0
action:  8
num stages:  4
stage:  -0.0
action:  9
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  8 :  3.0
 > get_alu_stage: table  0 , alu_id =  8 :  3.0
alu  8  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  9 :  -0.0
 > get_alu_stage: table  0 , alu_id =  9 :  -0.0
alu  9  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  7  ;  [(<alus.DominoALU object at 0x7f4cbd9cc550>, 0), (<alus.DominoALU object at 0x7f4cbd9cc700>, 1), (<alus.DominoALU object at 0x7f4cbd9cc8b0>, 2), (<alus.DominoALU object at 0x7f4cbd9cc4c0>, 3), (<alus.DominoALU object at 0x7f4cbd9cc9d0>, 4), (<alus.DominoALU object at 0x7f4cbd9cc880>, 5), (<alus.DominoALU object at 0x7f4cbd9ccaf0>, 6)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f4cbd9cc6d0>, 0), (<alus.DominoGenericSALU object at 0x7f4cbd99c400>, 1), (<alus.DominoGenericSALU object at 0x7f4cbd9cc4f0>, 2)]
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  3  and  2
 * gen_dependency_list: dependency between  4  and  0
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  9  and  1
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 5), (1, 6), (2, 5), (2, 6), (3, 2), (4, 0), (5, 8), (6, 8), (7, 8), (9, 1)], 'stateful_alus': [{'inputs': ['state_2', 'p_state_201'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_state_001'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '24'}, {'id': 4, 'opcode': 18, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '24'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 6, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 7, 'opcode': 31, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 8, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '0'}, {'id': 9, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 5), (1, 6), (2, 5), (2, 6), (3, 2), (4, 0), (5, 8), (6, 8), (7, 8), (9, 1)], 'stateful_alus': [{'inputs': ['state_2', 'p_state_201'], 'outputs': ['p_state_200', 'state_2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_state_001'], 'outputs': ['state_0', 'p_state_000'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 18, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '24'}, {'id': 4, 'opcode': 18, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '24'}, {'id': 5, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_200', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 6, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 7, 'opcode': 31, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 8, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '0'}, {'id': 9, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}]}
Time taken: 5.408370733261108 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_8_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

lhs p__br_tmp2 rhs !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0))
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_200 = state_2; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p_state_001 = 1; state_0 = p_state_001;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_201 = 1; state_2 = p_state_201;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7fd1f857e220>, 'write': <dependencyGraph.Statement object at 0x7fd1f857e8b0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fd1f85c0580>, 'write': <dependencyGraph.Statement object at 0x7fd1f857e880>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fd1f857e760>, 'write': <dependencyGraph.Statement object at 0x7fd1f857e160>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fd1f857e220>, 'write': <dependencyGraph.Statement object at 0x7fd1f857e8b0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fd1f85c0580>, 'write': <dependencyGraph.Statement object at 0x7fd1f857e880>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fd1f857e760>, 'write': <dependencyGraph.Statement object at 0x7fd1f857e160>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  13
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 3
v p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)) stmts len 1
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 5
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 6
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 7
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC 8
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 9
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd1f857eca0>, <dependencyGraph.Codelet object at 0x7fd1f857ed30>, <dependencyGraph.Codelet object at 0x7fd1f857ed90>, <dependencyGraph.Codelet object at 0x7fd1f857edf0>, <dependencyGraph.Codelet object at 0x7fd1f857ee80>, <dependencyGraph.Codelet object at 0x7fd1f857eee0>, <dependencyGraph.Codelet object at 0x7fd1f857ef40>, <dependencyGraph.Codelet object at 0x7fd1f857ee20>, <dependencyGraph.Codelet object at 0x7fd1f857efd0>, <dependencyGraph.Codelet object at 0x7fd1f857ed60>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_001 = 1;
p_state_101 = 1;
p_state_201 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd1f857ee80>, <dependencyGraph.Codelet object at 0x7fd1f857ef40>, <dependencyGraph.Codelet object at 0x7fd1f857eee0>}
total number of nodes created:  10
state vars {'state_2', 'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_200', 'p_state_100', 'p_state_000', 'p_state_101', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p_state_001', 'p_state_201', 'p_pkt_01', 'p_state_101'}
{'p_state_001', 'p_state_201', 'p_pkt_01', 'p_state_101'}
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_001 = 1;
v:  p_state_000 = state_0; state_0 = p_state_001;
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_201 = 1;
v:  p_state_200 = state_2; state_2 = p_state_201;
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_101 = 1;
v:  p_state_100 = state_1; state_1 = p_state_101;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_001']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_001', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_state_201']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_state_201', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_state_101']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_state_101', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_10_stateless_p_state_001_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_10_stateless_p_state_001_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_10_stateless_p_state_001_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_10_stateless_p_state_001_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_001 --------- 
filename_to_compname: filename =  comp_10_stateless_p_state_001_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_state_001_bnd_1.sk.out
['comp_10']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_11_stateless_p_state_201_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_11_stateless_p_state_201_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_11_stateless_p_state_201_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_11_stateless_p_state_201_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_201 --------- 
filename_to_compname: filename =  comp_11_stateless_p_state_201_bnd_1.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_state_201_bnd_1.sk.out
['comp_11']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_8_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_101 --------- 
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
final_output:  _out_s11
   alu output:  _out_s11
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fd1f85af6d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
Stateless ALU id 3 has output p_state_001
 *** found dependency between stateless ALU  3  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_11  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fd1f857e400>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
Stateless ALU id 4 has output p_state_201
 *** found dependency between stateless ALU  4  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
 *** found stateless dependency between ALU  1  and ALU  6
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
 *** found stateless dependency between ALU  1  and ALU  7
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_12  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fd1f85af4f0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_10', 4: 'comp_11', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_12'}
Stateless ALU id 9 has output p_state_101
 *** found dependency between stateless ALU  9  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
5,
+---> dependencies of ALU  1 : 
6,7,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
0,
+---> dependencies of ALU  4 : 
1,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 

+---> dependencies of ALU  9 : 
2,
# alus: =  10
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  4  and  1
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  9  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 10}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 5), (1, 6), (1, 7), (2, 5), (3, 0), (4, 1), (5, 8), (6, 8), (7, 8), (9, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 185 rows, 132 columns and 424 nonzeros
Model fingerprint: 0x02412d9d
Model has 120 general constraints
Variable types: 0 continuous, 132 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 31 columns
Presolve time: 0.01s
Presolved: 190 rows, 101 columns, 450 nonzeros
Variable types: 0 continuous, 101 integer (90 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 8 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 1
T0_A_3 -0
T0_A_4 -0
T0_A_5 2
T0_A_6 2
T0_A_7 2
T0_A_8 3
T0_A_9 -0
************************************************
Obj: 3
number of stages:  4
stage:  1.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  -0.0
action:  3
num stages:  4
stage:  -0.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
stage:  2.0
action:  7
num stages:  4
stage:  3.0
action:  8
num stages:  4
stage:  -0.0
action:  9
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
alu  7  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  8 :  3.0
 > get_alu_stage: table  0 , alu_id =  8 :  3.0
alu  8  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  9 :  -0.0
 > get_alu_stage: table  0 , alu_id =  9 :  -0.0
alu  9  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  7  ;  [(<alus.DominoALU object at 0x7fd1f85af550>, 0), (<alus.DominoALU object at 0x7fd1f85af700>, 1), (<alus.DominoALU object at 0x7fd1f85af8b0>, 2), (<alus.DominoALU object at 0x7fd1f85af4c0>, 3), (<alus.DominoALU object at 0x7fd1f85af9d0>, 4), (<alus.DominoALU object at 0x7fd1f85af880>, 5), (<alus.DominoALU object at 0x7fd1f85afaf0>, 6)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fd1f85af6d0>, 0), (<alus.DominoGenericSALU object at 0x7fd1f857e400>, 1), (<alus.DominoGenericSALU object at 0x7fd1f85af4f0>, 2)]
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  4  and  1
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  9  and  2
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 5), (1, 6), (1, 7), (2, 5), (3, 0), (4, 1), (5, 8), (6, 8), (7, 8), (9, 2)], 'stateful_alus': [{'inputs': ['state_0', 'p_state_001'], 'outputs': ['p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2', 'p_state_201'], 'outputs': ['state_2', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '0'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_200', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 7, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 8, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '31'}, {'id': 9, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 5), (1, 6), (1, 7), (2, 5), (3, 0), (4, 1), (5, 8), (6, 8), (7, 8), (9, 2)], 'stateful_alus': [{'inputs': ['state_0', 'p_state_001'], 'outputs': ['p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2', 'p_state_201'], 'outputs': ['state_2', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['p_state_100', 'state_1'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '0'}, {'id': 5, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_200', 'operand2': 'p_state_200', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 7, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 8, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '31'}, {'id': 9, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '0'}]}
Time taken: 9.414919376373291 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_9_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

lhs p__br_tmp2 rhs !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0))
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_200 = state_2; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p_state_001 = 1; state_0 = p_state_001;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_201 = 1; state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f5417ebb580>, 'write': <dependencyGraph.Statement object at 0x7f5417e79880>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f5417e79760>, 'write': <dependencyGraph.Statement object at 0x7f5417e791c0>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f5417e79220>, 'write': <dependencyGraph.Statement object at 0x7f5417e798b0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f5417ebb580>, 'write': <dependencyGraph.Statement object at 0x7f5417e79880>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f5417e79760>, 'write': <dependencyGraph.Statement object at 0x7f5417e791c0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f5417e79220>, 'write': <dependencyGraph.Statement object at 0x7f5417e798b0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  13
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 3
v p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)) stmts len 1
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 5
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 6
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 7
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC 8
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 9
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f5417e79ca0>, <dependencyGraph.Codelet object at 0x7f5417e79d30>, <dependencyGraph.Codelet object at 0x7f5417e79d90>, <dependencyGraph.Codelet object at 0x7f5417e79df0>, <dependencyGraph.Codelet object at 0x7f5417e79e80>, <dependencyGraph.Codelet object at 0x7f5417e79ee0>, <dependencyGraph.Codelet object at 0x7f5417e79f40>, <dependencyGraph.Codelet object at 0x7f5417e79e20>, <dependencyGraph.Codelet object at 0x7f5417e79fd0>, <dependencyGraph.Codelet object at 0x7f5417e79d60>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_001 = 1;
p_state_101 = 1;
p_state_201 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f5417e79e80>, <dependencyGraph.Codelet object at 0x7f5417e79f40>, <dependencyGraph.Codelet object at 0x7f5417e79ee0>}
total number of nodes created:  10
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001', 'p_state_100', 'p_state_101', 'p_state_200', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p_state_201', 'p_pkt_01', 'p_state_001', 'p_state_101'}
{'p_state_201', 'p_pkt_01', 'p_state_001', 'p_state_101'}
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_001 = 1;
v:  p_state_000 = state_0; state_0 = p_state_001;
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_201 = 1;
v:  p_state_200 = state_2; state_2 = p_state_201;
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_101 = 1;
v:  p_state_100 = state_1; state_1 = p_state_101;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_001']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_001', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_state_201']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_state_201', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_state_101']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_state_101', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_11_stateless_p_state_201_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_11_stateless_p_state_201_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_11_stateless_p_state_201_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_11_stateless_p_state_201_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_201 --------- 
filename_to_compname: filename =  comp_11_stateless_p_state_201_bnd_1.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_state_201_bnd_1.sk.out
['comp_11']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_10_stateless_p_state_001_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_10_stateless_p_state_001_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_10_stateless_p_state_001_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_10_stateless_p_state_001_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_001 --------- 
filename_to_compname: filename =  comp_10_stateless_p_state_001_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_state_001_bnd_1.sk.out
['comp_10']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_9_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_101 --------- 
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
final_output:  _out_s11
   alu output:  _out_s11
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  4  and ALU  7
 *** found stateless dependency between ALU  5  and ALU  7
 *** found stateless dependency between ALU  6  and ALU  7
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_11  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f5417e79400>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
Stateless ALU id 3 has output p_state_201
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
 *** found stateless dependency between ALU  0  and ALU  5
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
 *** found stateless dependency between ALU  0  and ALU  6
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
 *** found stateless dependency between ALU  1  and ALU  6
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
 *** found stateless dependency between ALU  2  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f5417ea96d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
Stateless ALU id 8 has output p_state_001
 *** found dependency between stateless ALU  8  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_12  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7f5417ea94f0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_13', 5: 'comp_13', 6: 'comp_13', 7: 'comp_13', 8: 'comp_10', 9: 'comp_12'}
Stateless ALU id 9 has output p_state_101
 *** found dependency between stateless ALU  9  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
5,6,
+---> dependencies of ALU  1 : 
4,6,
+---> dependencies of ALU  2 : 
6,
+---> dependencies of ALU  3 : 
1,
+---> dependencies of ALU  4 : 
7,
+---> dependencies of ALU  5 : 
7,
+---> dependencies of ALU  6 : 
7,
+---> dependencies of ALU  7 : 

+---> dependencies of ALU  8 : 
0,
+---> dependencies of ALU  9 : 
2,
# alus: =  10
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  3  and  1
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  8  and  0
 * gen_dependency_list: dependency between  9  and  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 10}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 5), (0, 6), (1, 4), (1, 6), (2, 6), (3, 1), (4, 7), (5, 7), (6, 7), (8, 0), (9, 2)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 186 rows, 132 columns and 426 nonzeros
Model fingerprint: 0x398f561f
Model has 120 general constraints
Variable types: 0 continuous, 132 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 31 columns
Presolve time: 0.01s
Presolved: 191 rows, 101 columns, 452 nonzeros
Variable types: 0 continuous, 101 integer (90 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 1
T0_A_3 -0
T0_A_4 2
T0_A_5 2
T0_A_6 2
T0_A_7 3
T0_A_8 -0
T0_A_9 -0
************************************************
Obj: 3
number of stages:  4
stage:  1.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  -0.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
stage:  3.0
action:  7
num stages:  4
stage:  -0.0
action:  8
num stages:  4
stage:  -0.0
action:  9
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
alu  7  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  8 :  -0.0
 > get_alu_stage: table  0 , alu_id =  8 :  -0.0
alu  8  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  9 :  -0.0
 > get_alu_stage: table  0 , alu_id =  9 :  -0.0
alu  9  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  7  ;  [(<alus.DominoALU object at 0x7f5417ea9550>, 0), (<alus.DominoALU object at 0x7f5417ea9910>, 1), (<alus.DominoALU object at 0x7f5417ea9730>, 2), (<alus.DominoALU object at 0x7f5417ea9b50>, 3), (<alus.DominoALU object at 0x7f5417ea9820>, 4), (<alus.DominoALU object at 0x7f5417ea97f0>, 5), (<alus.DominoALU object at 0x7f5417ea9520>, 6)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f5417ea96d0>, 0), (<alus.DominoGenericSALU object at 0x7f5417e79400>, 1), (<alus.DominoGenericSALU object at 0x7f5417ea94f0>, 2)]
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  3  and  1
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  8  and  0
 * gen_dependency_list: dependency between  9  and  2
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 5), (0, 6), (1, 4), (1, 6), (2, 6), (3, 1), (4, 7), (5, 7), (6, 7), (8, 0), (9, 2)], 'stateful_alus': [{'inputs': ['state_0', 'p_state_001'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2', 'p_state_201'], 'outputs': ['p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '0'}, {'id': 4, 'opcode': 12, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 5, 'opcode': 3, 'operand0': '1', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 6, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 7, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '28'}, {'id': 8, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}, {'id': 9, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 5), (0, 6), (1, 4), (1, 6), (2, 6), (3, 1), (4, 7), (5, 7), (6, 7), (8, 0), (9, 2)], 'stateful_alus': [{'inputs': ['state_0', 'p_state_001'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2', 'p_state_201'], 'outputs': ['p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '0'}, {'id': 4, 'opcode': 12, 'operand0': 'p_state_200', 'operand1': '1', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 5, 'opcode': 3, 'operand0': '1', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 6, 'opcode': 18, 'operand0': 'p_state_100', 'operand1': 'p_state_000', 'operand2': 'p_state_200', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 7, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '28'}, {'id': 8, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}, {'id': 9, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '0'}]}
Time taken: 7.378952264785767 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter, program name: learn_filter_equivalent_10_canonicalizer. Grammar: raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

lhs p__br_tmp1 rhs (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

lhs p__br_tmp2 rhs !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0))
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_100', 'p_state_200']
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp2 ? (0) : (p_pkt_00)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_00']
p_state_001 = 1;

lhs p_state_001 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_101 = 1;

lhs p_state_101 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = 1;

 is_read_flank: processing rhs_vars =  []
p_state_201 = 1;

lhs p_state_201 rhs 1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = 1;

 is_read_flank: processing rhs_vars =  []
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_000 = state_0; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_100 = state_1; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_100 = state_1; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p_state_200 = state_2; p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
RAW p_state_200 = state_2; p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
RAW p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0); p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)); p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
RAW p_state_001 = 1; state_0 = p_state_001;
RAW p_state_101 = 1; state_1 = p_state_101;
RAW p_state_201 = 1; state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fa5a8e65580>, 'write': <dependencyGraph.Statement object at 0x7fa5a8e23880>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fa5a8e23760>, 'write': <dependencyGraph.Statement object at 0x7fa5a8e23160>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fa5a8e23220>, 'write': <dependencyGraph.Statement object at 0x7fa5a8e238b0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa5a8e65580>, 'write': <dependencyGraph.Statement object at 0x7fa5a8e23880>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fa5a8e23760>, 'write': <dependencyGraph.Statement object at 0x7fa5a8e23160>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fa5a8e23220>, 'write': <dependencyGraph.Statement object at 0x7fa5a8e238b0>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  13
SCC 0
v p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 2
v p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0) stmts len 1
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
SCC 3
v p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0)) stmts len 1
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
SCC 4
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 5
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 6
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 7
v p_state_001 = 1 stmts len 1
p_state_001 = 1;
SCC 8
v p_state_101 = 1 stmts len 1
p_state_101 = 1;
SCC 9
v p_state_201 = 1 stmts len 1
p_state_201 = 1;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa5a8e23ca0>, <dependencyGraph.Codelet object at 0x7fa5a8e23d30>, <dependencyGraph.Codelet object at 0x7fa5a8e23d90>, <dependencyGraph.Codelet object at 0x7fa5a8e23df0>, <dependencyGraph.Codelet object at 0x7fa5a8e23e80>, <dependencyGraph.Codelet object at 0x7fa5a8e23ee0>, <dependencyGraph.Codelet object at 0x7fa5a8e23f40>, <dependencyGraph.Codelet object at 0x7fa5a8e23e20>, <dependencyGraph.Codelet object at 0x7fa5a8e23fd0>, <dependencyGraph.Codelet object at 0x7fa5a8e23d60>]
p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
p_state_000 = state_0;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p_state_001 = 1;
p_state_101 = 1;
p_state_201 = 1;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa5a8e23e80>, <dependencyGraph.Codelet object at 0x7fa5a8e23f40>, <dependencyGraph.Codelet object at 0x7fa5a8e23ee0>}
total number of nodes created:  10
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_000'}
p_state_000  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'p_state_200'}
p_state_200  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  10
total number of nodes created:  10
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_200', 'p_state_001', 'p_state_100', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
codelet  p_state_000 = state_0 state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 state_1 = p_state_101  is stateful
codelet  p_state_200 = state_2 state_2 = p_state_201  is stateful
number of nodes on SCC_GRAPH:  10
number of nodes in comp_graph:  10
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p_state_201', 'p_state_101', 'p_state_001', 'p_pkt_01'}
{'p_state_201', 'p_state_101', 'p_state_001', 'p_pkt_01'}
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_000 = state_0; state_0 = p_state_001;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_001 = 1;
v:  p_state_000 = state_0; state_0 = p_state_001;
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_200 = state_2; state_2 = p_state_201;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_201 = 1;
v:  p_state_200 = state_2; state_2 = p_state_201;
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
u:  p_state_100 = state_1; state_1 = p_state_101;
v:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
u:  p_state_101 = 1;
v:  p_state_100 = state_1; state_1 = p_state_101;
u:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp2 = !((p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0));
v:  p_pkt_01 = p__br_tmp2 ? (0) : (p_pkt_00);
u:  p__br_tmp1 = (p_state_000!=0)&&(p_state_100!=0)&&(p_state_200!=0);
v:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_001']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_001', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p_state_201']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p_state_201', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_state_101']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_state_101', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_11_stateless_p_state_201_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_11_stateless_p_state_201_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_11_stateless_p_state_201_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_11_stateless_p_state_201_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_201 --------- 
filename_to_compname: filename =  comp_11_stateless_p_state_201_bnd_1.sk.out
['comp_11']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_11 , type?  STATELESS
filename_to_compname: filename =  comp_11_stateless_p_state_201_bnd_1.sk.out
['comp_11']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_12_stateless_p_state_101_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_101 --------- 
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_12 , type?  STATELESS
filename_to_compname: filename =  comp_12_stateless_p_state_101_bnd_1.sk.out
['comp_12']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_10_stateless_p_state_001_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_10_stateless_p_state_001_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_10_stateless_p_state_001_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_10_stateless_p_state_001_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_state_001 --------- 
filename_to_compname: filename =  comp_10_stateless_p_state_001_bnd_1.sk.out
['comp_10']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_10 , type?  STATELESS
filename_to_compname: filename =  comp_10_stateless_p_state_001_bnd_1.sk.out
['comp_10']
final_output:  _out_s11
   alu output:  _out_s11
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/learn_filter/learn_filter_equivalent_10_canonicalizer_out/comp_13_stateless_p_pkt_01_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_13 , type?  STATELESS
filename_to_compname: filename =  comp_13_stateless_p_pkt_01_bnd_2.sk.out
['comp_13']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  6  and ALU  9
 *** found stateless dependency between ALU  7  and ALU  9
 *** found stateless dependency between ALU  8  and ALU  9
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_11  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fa5a8e23400>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
Stateless ALU id 3 has output p_state_201
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_12  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
-------ALU in the component of  comp_2 :  [<alus.DominoGenericSALU object at 0x7fa5a8e534f0>]
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
Stateless ALU id 4 has output p_state_101
 *** found dependency between stateless ALU  4  and stateful ALU  2
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_10  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fa5a8e536d0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
Stateless ALU id 5 has output p_state_001
 *** found dependency between stateless ALU  5  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  1  and ALU  6
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  2  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  0  and ALU  7
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  2  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  0  and ALU  8
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** found stateless dependency between ALU  1  and ALU  8
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_13  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
------predecessor of comp  comp_13  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_11', 4: 'comp_12', 5: 'comp_10', 6: 'comp_13', 7: 'comp_13', 8: 'comp_13', 9: 'comp_13'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
7,8,
+---> dependencies of ALU  1 : 
6,8,
+---> dependencies of ALU  2 : 
6,7,
+---> dependencies of ALU  3 : 
1,
+---> dependencies of ALU  4 : 
2,
+---> dependencies of ALU  5 : 
0,
+---> dependencies of ALU  6 : 
9,
+---> dependencies of ALU  7 : 
9,
+---> dependencies of ALU  8 : 
9,
+---> dependencies of ALU  9 : 

# alus: =  10
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  8
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  1  and  8
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  2  and  7
 * gen_dependency_list: dependency between  3  and  1
 * gen_dependency_list: dependency between  4  and  2
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  9
 * gen_dependency_list: dependency between  7  and  9
 * gen_dependency_list: dependency between  8  and  9
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 10}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 7), (0, 8), (1, 6), (1, 8), (2, 6), (2, 7), (3, 1), (4, 2), (5, 0), (6, 9), (7, 9), (8, 9)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 187 rows, 132 columns and 428 nonzeros
Model fingerprint: 0xec05ecd8
Model has 120 general constraints
Variable types: 0 continuous, 132 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 31 columns
Presolve time: 0.01s
Presolved: 192 rows, 101 columns, 454 nonzeros
Variable types: 0 continuous, 101 integer (90 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 1
T0_A_3 -0
T0_A_4 -0
T0_A_5 -0
T0_A_6 2
T0_A_7 2
T0_A_8 2
T0_A_9 3
************************************************
Obj: 3
number of stages:  4
stage:  1.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  -0.0
action:  3
num stages:  4
stage:  -0.0
action:  4
num stages:  4
stage:  -0.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
stage:  2.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  3.0
action:  9
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
 > get_alu_stage: table  0 , alu_id =  7 :  2.0
alu  7  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  3.0
 > get_alu_stage: table  0 , alu_id =  9 :  3.0
alu  9  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  7  ;  [(<alus.DominoALU object at 0x7fa5a8e53550>, 0), (<alus.DominoALU object at 0x7fa5a8e53700>, 1), (<alus.DominoALU object at 0x7fa5a8e53730>, 2), (<alus.DominoALU object at 0x7fa5a8e53760>, 3), (<alus.DominoALU object at 0x7fa5a8e53910>, 4), (<alus.DominoALU object at 0x7fa5a8e53a30>, 5), (<alus.DominoALU object at 0x7fa5a8e53580>, 6)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fa5a8e536d0>, 0), (<alus.DominoGenericSALU object at 0x7fa5a8e23400>, 1), (<alus.DominoGenericSALU object at 0x7fa5a8e534f0>, 2)]
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  8
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  1  and  8
 * gen_dependency_list: dependency between  2  and  6
 * gen_dependency_list: dependency between  2  and  7
 * gen_dependency_list: dependency between  3  and  1
 * gen_dependency_list: dependency between  4  and  2
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  9
 * gen_dependency_list: dependency between  7  and  9
 * gen_dependency_list: dependency between  8  and  9
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 7), (0, 8), (1, 6), (1, 8), (2, 6), (2, 7), (3, 1), (4, 2), (5, 0), (6, 9), (7, 9), (8, 9)], 'stateful_alus': [{'inputs': ['state_0', 'p_state_001'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2', 'p_state_201'], 'outputs': ['p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '0'}, {'id': 5, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}, {'id': 6, 'opcode': 22, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_200', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 7, 'opcode': 19, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 8, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '25'}, {'id': 9, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 7), (0, 8), (1, 6), (1, 8), (2, 6), (2, 7), (3, 1), (4, 2), (5, 0), (6, 9), (7, 9), (8, 9)], 'stateful_alus': [{'inputs': ['state_0', 'p_state_001'], 'outputs': ['state_0', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_2', 'p_state_201'], 'outputs': ['p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_1', 'p_state_101'], 'outputs': ['state_1', 'p_state_100'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, ref int[2] _out0)/*comp_2_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_201', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_101', 'immediate_operand': '0'}, {'id': 5, 'opcode': 4, 'operand0': '1', 'operand1': '1', 'operand2': '1', 'result': 'p_state_001', 'immediate_operand': '0'}, {'id': 6, 'opcode': 22, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': 'p_state_200', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 7, 'opcode': 19, 'operand0': 'p_state_000', 'operand1': 'p_state_100', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 8, 'opcode': 18, 'operand0': 'p_state_000', 'operand1': 'p_state_200', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '25'}, {'id': 9, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p_pkt_01', 'immediate_operand': '1'}]}
Time taken: 8.546751499176025 s
preprocessor time:
