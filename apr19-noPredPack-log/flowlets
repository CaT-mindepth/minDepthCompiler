running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_1. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7f0c3f9dc790>, 'write': <dependencyGraph.Statement object at 0x7f0c3f9dc850>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f0c3fa1e5b0>, 'write': <dependencyGraph.Statement object at 0x7f0c3f9dc430>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f0c3f9dc790>, 'write': <dependencyGraph.Statement object at 0x7f0c3f9dc850>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f0c3fa1e5b0>, 'write': <dependencyGraph.Statement object at 0x7f0c3f9dc430>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f0c3f9dca90>, <dependencyGraph.Codelet object at 0x7f0c3f9dca30>, <dependencyGraph.Codelet object at 0x7f0c3f9dc070>, <dependencyGraph.Codelet object at 0x7f0c3f9dc130>, <dependencyGraph.Codelet object at 0x7f0c3f9dc910>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f0c3f9dc130>, <dependencyGraph.Codelet object at 0x7f0c3f9dca30>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_last_time00', 'pkt_saved_hop01', 'pkt_saved_hop00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_last_time01', 'pkt__br_tmp1', 'pkt_next_hop0'}
{'pkt_last_time01', 'pkt__br_tmp1', 'pkt_next_hop0'}
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_5_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_5_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_last_time01 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f0c3f9dcfa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 2 has output pkt_last_time01
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f0c3f9dce80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f0c3f9dce80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f0c3f9dce80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f0c3f9dce80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 6 has output pkt__br_tmp1
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  7
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,
+---> dependencies of ALU  1 : 
7,
+---> dependencies of ALU  2 : 
0,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
+---> dependencies of ALU  7 : 

# alus: =  8
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (1, 7), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 150 rows, 106 columns and 338 nonzeros
Model fingerprint: 0x6d0790e3
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 23 rows and 37 columns
Presolve time: 0.01s
Presolved: 127 rows, 69 columns, 298 nonzeros
Variable types: 0 continuous, 69 integer (60 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 5.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 5 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 5.000000000000e+00, best bound 5.000000000000e+00, gap 0.0000%
Optimal objective: 5
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 -0
T0_A_3 -0
T0_A_4 2
T0_A_5 -0
T0_A_6 3
T0_A_7 5
************************************************
Obj: 5
number of stages:  6
stage:  1.0
action:  0
num stages:  6
stage:  4.0
action:  1
num stages:  6
stage:  -0.0
action:  2
num stages:  6
stage:  -0.0
action:  3
num stages:  6
stage:  2.0
action:  4
num stages:  6
stage:  -0.0
action:  5
num stages:  6
stage:  3.0
action:  6
num stages:  6
stage:  5.0
action:  7
num stages:  6
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  5.0
 > get_alu_stage: table  0 , alu_id =  7 :  5.0
alu  7  is of type  STATELESS ; scheduled to stage  5
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7f0c3fa12100>, 0), (<alus.DominoALU object at 0x7f0c3f9dceb0>, 1), (<alus.DominoALU object at 0x7f0c3fa121c0>, 2), (<alus.DominoALU object at 0x7f0c3fa123a0>, 3), (<alus.DominoALU object at 0x7f0c3fa12310>, 4), (<alus.DominoALU object at 0x7f0c3fa121f0>, 5)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f0c3f9dcfa0>, 0), (<alus.DominoGenericSALU object at 0x7f0c3f9dce80>, 1)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 4), (1, 7), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'saved_hop', 'pkt_saved_hop00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '0'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '6'}, {'id': 4, 'opcode': 3, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 5, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}, {'id': 7, 'opcode': 4, 'operand0': 'pkt_saved_hop01', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 4), (1, 7), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'saved_hop', 'pkt_saved_hop00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '0'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '6'}, {'id': 4, 'opcode': 3, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 5, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}, {'id': 7, 'opcode': 4, 'operand0': 'pkt_saved_hop01', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}]}
Time taken: 5.418518781661987 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_2. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fa5888795b0>, 'write': <dependencyGraph.Statement object at 0x7fa588837430>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7fa588837790>, 'write': <dependencyGraph.Statement object at 0x7fa588837850>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fa5888795b0>, 'write': <dependencyGraph.Statement object at 0x7fa588837430>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fa588837790>, 'write': <dependencyGraph.Statement object at 0x7fa588837850>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa588837a90>, <dependencyGraph.Codelet object at 0x7fa588837a30>, <dependencyGraph.Codelet object at 0x7fa588837100>, <dependencyGraph.Codelet object at 0x7fa5888370a0>, <dependencyGraph.Codelet object at 0x7fa588837910>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa5888370a0>, <dependencyGraph.Codelet object at 0x7fa588837a30>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out
Stored read, write flank variables
{'pkt_saved_hop01', 'pkt_last_time00', 'pkt_saved_hop00', 'pkt_last_time01'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt__br_tmp1', 'pkt_last_time01'}
{'pkt_next_hop0', 'pkt__br_tmp1', 'pkt_last_time01'}
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_5_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_5_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_last_time01 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fa588837e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fa588837e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fa588837e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fa588837e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 6 has output pkt__br_tmp1
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fa588837fa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 7 has output pkt_last_time01
 *** found dependency between stateless ALU  7  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,
+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
+---> dependencies of ALU  7 : 
0,
# alus: =  8
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
 * gen_dependency_list: dependency between  7  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1), (7, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 151 rows, 106 columns and 340 nonzeros
Model fingerprint: 0xa4371d58
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 27 rows and 39 columns
Presolve time: 0.01s
Presolved: 124 rows, 67 columns, 290 nonzeros
Variable types: 0 continuous, 67 integer (58 binary)
Found heuristic solution: objective 5.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 5 

Optimal solution found (tolerance 1.00e-04)
Best objective 5.000000000000e+00, best bound 5.000000000000e+00, gap 0.0000%
Optimal objective: 5
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 5
T0_A_3 2
T0_A_4 2
T0_A_5 -0
T0_A_6 3
T0_A_7 -0
************************************************
Obj: 5
number of stages:  6
stage:  1.0
action:  0
num stages:  6
stage:  4.0
action:  1
num stages:  6
stage:  5.0
action:  2
num stages:  6
stage:  2.0
action:  3
num stages:  6
stage:  2.0
action:  4
num stages:  6
stage:  -0.0
action:  5
num stages:  6
stage:  3.0
action:  6
num stages:  6
stage:  -0.0
action:  7
num stages:  6
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  5.0
 > get_alu_stage: table  0 , alu_id =  2 :  5.0
alu  2  is of type  STATELESS ; scheduled to stage  5
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7fa58886d100>, 0), (<alus.DominoALU object at 0x7fa588837eb0>, 1), (<alus.DominoALU object at 0x7fa58886d1c0>, 2), (<alus.DominoALU object at 0x7fa58886d3a0>, 3), (<alus.DominoALU object at 0x7fa58886d310>, 4), (<alus.DominoALU object at 0x7fa58886d1f0>, 5)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fa588837fa0>, 0), (<alus.DominoGenericSALU object at 0x7fa588837e80>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
 * gen_dependency_list: dependency between  7  and  0
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1), (7, 0)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'saved_hop', 'pkt_saved_hop00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '30'}, {'id': 3, 'opcode': 15, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '7'}, {'id': 4, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 5, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '4'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}, {'id': 7, 'opcode': 14, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': 'pkt_last_time01', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1), (7, 0)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'saved_hop', 'pkt_saved_hop00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '30'}, {'id': 3, 'opcode': 15, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '7'}, {'id': 4, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 5, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '4'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}, {'id': 7, 'opcode': 14, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': 'pkt_last_time01', 'immediate_operand': '31'}]}
Time taken: 90.37452220916748 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_3. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f62da41f5b0>, 'write': <dependencyGraph.Statement object at 0x7f62da3dd430>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f62da3dd790>, 'write': <dependencyGraph.Statement object at 0x7f62da3dd850>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f62da41f5b0>, 'write': <dependencyGraph.Statement object at 0x7f62da3dd430>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f62da3dd790>, 'write': <dependencyGraph.Statement object at 0x7f62da3dd850>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f62da3dda90>, <dependencyGraph.Codelet object at 0x7f62da3dda30>, <dependencyGraph.Codelet object at 0x7f62da3dd040>, <dependencyGraph.Codelet object at 0x7f62da3dd130>, <dependencyGraph.Codelet object at 0x7f62da3dd910>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f62da3dd130>, <dependencyGraph.Codelet object at 0x7f62da3dda30>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out
Stored read, write flank variables
{'pkt_last_time00', 'pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_last_time01'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt__br_tmp1', 'pkt_last_time01'}
{'pkt_next_hop0', 'pkt__br_tmp1', 'pkt_last_time01'}
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_5_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_5_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_last_time01 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f62da3dde80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f62da3dde80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  5
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f62da3dde80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f62da3dde80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 6 has output pkt__br_tmp1
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f62da3ddfa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 7 has output pkt_last_time01
 *** found dependency between stateless ALU  7  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,5,
+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
+---> dependencies of ALU  7 : 
0,
# alus: =  8
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
 * gen_dependency_list: dependency between  7  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (0, 5), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1), (7, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 152 rows, 106 columns and 342 nonzeros
Model fingerprint: 0xc7d0a4cf
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 31 rows and 41 columns
Presolve time: 0.01s
Presolved: 121 rows, 65 columns, 282 nonzeros
Variable types: 0 continuous, 65 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 5.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 3: 5 8 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 5.000000000000e+00, best bound 5.000000000000e+00, gap 0.0000%
Optimal objective: 5
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 5
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
T0_A_7 -0
************************************************
Obj: 5
number of stages:  6
stage:  1.0
action:  0
num stages:  6
stage:  4.0
action:  1
num stages:  6
stage:  5.0
action:  2
num stages:  6
stage:  2.0
action:  3
num stages:  6
stage:  2.0
action:  4
num stages:  6
stage:  2.0
action:  5
num stages:  6
stage:  3.0
action:  6
num stages:  6
stage:  -0.0
action:  7
num stages:  6
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  5.0
 > get_alu_stage: table  0 , alu_id =  2 :  5.0
alu  2  is of type  STATELESS ; scheduled to stage  5
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7f62da413100>, 0), (<alus.DominoALU object at 0x7f62da3ddeb0>, 1), (<alus.DominoALU object at 0x7f62da4131c0>, 2), (<alus.DominoALU object at 0x7f62da4133a0>, 3), (<alus.DominoALU object at 0x7f62da413310>, 4), (<alus.DominoALU object at 0x7f62da4131f0>, 5)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f62da3ddfa0>, 0), (<alus.DominoGenericSALU object at 0x7f62da3dde80>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
 * gen_dependency_list: dependency between  7  and  0
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1), (7, 0)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['saved_hop', 'pkt_saved_hop01', 'pkt_saved_hop00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'pkt_saved_hop01', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 2, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12_0', 'immediate_operand': '4'}, {'id': 5, 'opcode': 17, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}, {'id': 7, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1), (7, 0)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  _out0[0] = pkt_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['saved_hop', 'pkt_saved_hop01', 'pkt_saved_hop00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'pkt_saved_hop01', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 2, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12_0', 'immediate_operand': '4'}, {'id': 5, 'opcode': 17, 'operand0': '1', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}, {'id': 7, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '30'}]}
Time taken: 7.262332916259766 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_4. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f5da980f5b0>, 'write': <dependencyGraph.Statement object at 0x7f5da97ce430>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f5da97ce790>, 'write': <dependencyGraph.Statement object at 0x7f5da97ce850>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f5da980f5b0>, 'write': <dependencyGraph.Statement object at 0x7f5da97ce430>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f5da97ce790>, 'write': <dependencyGraph.Statement object at 0x7f5da97ce850>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f5da97cea90>, <dependencyGraph.Codelet object at 0x7f5da97cea30>, <dependencyGraph.Codelet object at 0x7f5da97ce070>, <dependencyGraph.Codelet object at 0x7f5da97ce130>, <dependencyGraph.Codelet object at 0x7f5da97ce910>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f5da97ce130>, <dependencyGraph.Codelet object at 0x7f5da97cea30>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out
Stored read, write flank variables
{'pkt_saved_hop01', 'pkt_last_time01', 'pkt_saved_hop00', 'pkt_last_time00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_last_time01', 'pkt__br_tmp1', 'pkt_next_hop0'}
{'pkt_last_time01', 'pkt__br_tmp1', 'pkt_next_hop0'}
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_5_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_5_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_last_time01 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f5da97cefa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 2 has output pkt_last_time01
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f5da97cee80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f5da97cee80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  5
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f5da97cee80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f5da97cee80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
Stateless ALU id 6 has output pkt__br_tmp1
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  7
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,5,
+---> dependencies of ALU  1 : 
7,
+---> dependencies of ALU  2 : 
0,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
+---> dependencies of ALU  7 : 

# alus: =  8
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (0, 5), (1, 7), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 152 rows, 106 columns and 342 nonzeros
Model fingerprint: 0x0fda6bdc
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 31 rows and 41 columns
Presolve time: 0.01s
Presolved: 121 rows, 65 columns, 282 nonzeros
Variable types: 0 continuous, 65 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 5.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 3: 5 8 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 5.000000000000e+00, best bound 5.000000000000e+00, gap 0.0000%
Optimal objective: 5
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 -0
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
T0_A_7 5
************************************************
Obj: 5
number of stages:  6
stage:  1.0
action:  0
num stages:  6
stage:  4.0
action:  1
num stages:  6
stage:  -0.0
action:  2
num stages:  6
stage:  2.0
action:  3
num stages:  6
stage:  2.0
action:  4
num stages:  6
stage:  2.0
action:  5
num stages:  6
stage:  3.0
action:  6
num stages:  6
stage:  5.0
action:  7
num stages:  6
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  5.0
 > get_alu_stage: table  0 , alu_id =  7 :  5.0
alu  7  is of type  STATELESS ; scheduled to stage  5
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7f5da9803100>, 0), (<alus.DominoALU object at 0x7f5da97ceeb0>, 1), (<alus.DominoALU object at 0x7f5da98031c0>, 2), (<alus.DominoALU object at 0x7f5da98033a0>, 3), (<alus.DominoALU object at 0x7f5da9803310>, 4), (<alus.DominoALU object at 0x7f5da98031f0>, 5)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f5da97cefa0>, 0), (<alus.DominoGenericSALU object at 0x7f5da97cee80>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (1, 7), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'pkt_saved_hop00', 'saved_hop'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '30'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '7'}, {'id': 4, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': '1', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '5'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '7'}, {'id': 7, 'opcode': 2, 'operand0': 'pkt_saved_hop01', 'operand1': '1', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 3), (0, 4), (0, 5), (1, 7), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'pkt_saved_hop00', 'saved_hop'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '30'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '7'}, {'id': 4, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': '1', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '5'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '7'}, {'id': 7, 'opcode': 2, 'operand0': 'pkt_saved_hop01', 'operand1': '1', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}]}
Time taken: 23.98795247077942 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_5. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7f8be4e6a790>, 'write': <dependencyGraph.Statement object at 0x7f8be4e6a850>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f8be4eab5b0>, 'write': <dependencyGraph.Statement object at 0x7f8be4e6a430>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f8be4e6a790>, 'write': <dependencyGraph.Statement object at 0x7f8be4e6a850>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f8be4eab5b0>, 'write': <dependencyGraph.Statement object at 0x7f8be4e6a430>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f8be4e6aa90>, <dependencyGraph.Codelet object at 0x7f8be4e6aa30>, <dependencyGraph.Codelet object at 0x7f8be4e6a040>, <dependencyGraph.Codelet object at 0x7f8be4e6a130>, <dependencyGraph.Codelet object at 0x7f8be4e6a910>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f8be4e6a130>, <dependencyGraph.Codelet object at 0x7f8be4e6aa30>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out
Stored read, write flank variables
{'pkt_last_time00', 'pkt_saved_hop01', 'pkt_last_time01', 'pkt_saved_hop00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1', 'pkt_last_time01', 'pkt_next_hop0'}
{'pkt__br_tmp1', 'pkt_last_time01', 'pkt_next_hop0'}
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_5_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_5_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_last_time01 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  2
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f8be4e6ae80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f8be4e6ae80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f8be4e6ae80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f8be4e6ae80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
Stateless ALU id 5 has output pkt__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f8be4e6afa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
Stateless ALU id 6 has output pkt_last_time01
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_5', 7: 'comp_7'}
 *** found stateless dependency between ALU  1  and ALU  7
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,
+---> dependencies of ALU  1 : 
7,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
1,
+---> dependencies of ALU  6 : 
0,
+---> dependencies of ALU  7 : 

# alus: =  8
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (1, 7), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 151 rows, 106 columns and 340 nonzeros
Model fingerprint: 0x32d9eee4
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 27 rows and 39 columns
Presolve time: 0.01s
Presolved: 124 rows, 67 columns, 290 nonzeros
Variable types: 0 continuous, 67 integer (58 binary)
Found heuristic solution: objective 5.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 5 

Optimal solution found (tolerance 1.00e-04)
Best objective 5.000000000000e+00, best bound 5.000000000000e+00, gap 0.0000%
Optimal objective: 5
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 2
T0_A_3 2
T0_A_4 -0
T0_A_5 3
T0_A_6 -0
T0_A_7 5
************************************************
Obj: 5
number of stages:  6
stage:  1.0
action:  0
num stages:  6
stage:  4.0
action:  1
num stages:  6
stage:  2.0
action:  2
num stages:  6
stage:  2.0
action:  3
num stages:  6
stage:  -0.0
action:  4
num stages:  6
stage:  3.0
action:  5
num stages:  6
stage:  -0.0
action:  6
num stages:  6
stage:  5.0
action:  7
num stages:  6
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  7 :  5.0
 > get_alu_stage: table  0 , alu_id =  7 :  5.0
alu  7  is of type  STATELESS ; scheduled to stage  5
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7f8be4e9f2e0>, 0), (<alus.DominoALU object at 0x7f8be4e6aeb0>, 1), (<alus.DominoALU object at 0x7f8be4e9f190>, 2), (<alus.DominoALU object at 0x7f8be4e9f280>, 3), (<alus.DominoALU object at 0x7f8be4e9f3a0>, 4), (<alus.DominoALU object at 0x7f8be4e9f3d0>, 5)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f8be4e6afa0>, 0), (<alus.DominoGenericSALU object at 0x7f8be4e6ae80>, 1)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  1  and  7
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 2), (0, 3), (1, 7), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['pkt_saved_hop01', 'pkt_saved_hop00', 'saved_hop'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 4, 'opcode': 5, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 14, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '30'}, {'id': 7, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 2), (0, 3), (1, 7), (2, 5), (3, 5), (4, 5), (5, 1), (6, 0)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['pkt_saved_hop01', 'pkt_saved_hop00', 'saved_hop'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 4, 'opcode': 5, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 14, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '30'}, {'id': 7, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '2'}]}
Time taken: 55.38381218910217 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_6. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7eff6e1d15b0>, 'write': <dependencyGraph.Statement object at 0x7eff6e190430>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7eff6e190790>, 'write': <dependencyGraph.Statement object at 0x7eff6e190850>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7eff6e1d15b0>, 'write': <dependencyGraph.Statement object at 0x7eff6e190430>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7eff6e190790>, 'write': <dependencyGraph.Statement object at 0x7eff6e190850>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7eff6e190a90>, <dependencyGraph.Codelet object at 0x7eff6e190a30>, <dependencyGraph.Codelet object at 0x7eff6e190040>, <dependencyGraph.Codelet object at 0x7eff6e190130>, <dependencyGraph.Codelet object at 0x7eff6e190910>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7eff6e190130>, <dependencyGraph.Codelet object at 0x7eff6e190a30>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_last_time00', 'pkt_saved_hop00', 'pkt_saved_hop01'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt__br_tmp1', 'pkt_last_time01'}
{'pkt_next_hop0', 'pkt__br_tmp1', 'pkt_last_time01'}
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_5_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_5_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_last_time01 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7eff6e190e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7eff6e190e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7eff6e190e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7eff6e190e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 6 has output pkt__br_tmp1
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7eff6e190fa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 7 has output pkt_last_time01
 *** found dependency between stateless ALU  7  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,
+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
+---> dependencies of ALU  7 : 
0,
# alus: =  8
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
 * gen_dependency_list: dependency between  7  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1), (7, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 151 rows, 106 columns and 340 nonzeros
Model fingerprint: 0xa4371d58
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 27 rows and 39 columns
Presolve time: 0.01s
Presolved: 124 rows, 67 columns, 290 nonzeros
Variable types: 0 continuous, 67 integer (58 binary)
Found heuristic solution: objective 5.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 5 

Optimal solution found (tolerance 1.00e-04)
Best objective 5.000000000000e+00, best bound 5.000000000000e+00, gap 0.0000%
Optimal objective: 5
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 5
T0_A_3 2
T0_A_4 2
T0_A_5 -0
T0_A_6 3
T0_A_7 -0
************************************************
Obj: 5
number of stages:  6
stage:  1.0
action:  0
num stages:  6
stage:  4.0
action:  1
num stages:  6
stage:  5.0
action:  2
num stages:  6
stage:  2.0
action:  3
num stages:  6
stage:  2.0
action:  4
num stages:  6
stage:  -0.0
action:  5
num stages:  6
stage:  3.0
action:  6
num stages:  6
stage:  -0.0
action:  7
num stages:  6
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  5.0
 > get_alu_stage: table  0 , alu_id =  2 :  5.0
alu  2  is of type  STATELESS ; scheduled to stage  5
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7eff6e1c5100>, 0), (<alus.DominoALU object at 0x7eff6e190eb0>, 1), (<alus.DominoALU object at 0x7eff6e1c51c0>, 2), (<alus.DominoALU object at 0x7eff6e1c53a0>, 3), (<alus.DominoALU object at 0x7eff6e1c5310>, 4), (<alus.DominoALU object at 0x7eff6e1c51f0>, 5)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7eff6e190fa0>, 0), (<alus.DominoGenericSALU object at 0x7eff6e190e80>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
 * gen_dependency_list: dependency between  7  and  0
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1), (7, 0)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['saved_hop', 'pkt_saved_hop00', 'pkt_saved_hop01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 2, 'operand0': 'pkt_saved_hop01', 'operand1': '1', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '10'}, {'id': 4, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '16'}, {'id': 5, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '10'}, {'id': 7, 'opcode': 14, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': 'pkt_last_time01', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1), (7, 0)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['saved_hop', 'pkt_saved_hop00', 'pkt_saved_hop01'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 2, 'operand0': 'pkt_saved_hop01', 'operand1': '1', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '10'}, {'id': 4, 'opcode': 5, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '16'}, {'id': 5, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '10'}, {'id': 7, 'opcode': 14, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': 'pkt_arrival', 'result': 'pkt_last_time01', 'immediate_operand': '31'}]}
Time taken: 4.313003778457642 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_7. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7fc004627790>, 'write': <dependencyGraph.Statement object at 0x7fc004627850>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fc0046685b0>, 'write': <dependencyGraph.Statement object at 0x7fc004627430>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fc004627790>, 'write': <dependencyGraph.Statement object at 0x7fc004627850>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fc0046685b0>, 'write': <dependencyGraph.Statement object at 0x7fc004627430>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc004627a90>, <dependencyGraph.Codelet object at 0x7fc004627a30>, <dependencyGraph.Codelet object at 0x7fc004627040>, <dependencyGraph.Codelet object at 0x7fc004627130>, <dependencyGraph.Codelet object at 0x7fc004627910>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc004627130>, <dependencyGraph.Codelet object at 0x7fc004627a30>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out
Stored read, write flank variables
{'pkt_last_time00', 'pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_last_time01'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt__br_tmp1', 'pkt_last_time01'}
{'pkt_next_hop0', 'pkt__br_tmp1', 'pkt_last_time01'}
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_5_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_5_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_last_time01 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fc004627e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fc004627e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fc004627e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fc004627e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 6 has output pkt__br_tmp1
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc004627fa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_5'}
Stateless ALU id 7 has output pkt_last_time01
 *** found dependency between stateless ALU  7  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,4,
+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
+---> dependencies of ALU  7 : 
0,
# alus: =  8
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
 * gen_dependency_list: dependency between  7  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1), (7, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 151 rows, 106 columns and 340 nonzeros
Model fingerprint: 0xa4371d58
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 27 rows and 39 columns
Presolve time: 0.01s
Presolved: 124 rows, 67 columns, 290 nonzeros
Variable types: 0 continuous, 67 integer (58 binary)
Found heuristic solution: objective 5.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 5 

Optimal solution found (tolerance 1.00e-04)
Best objective 5.000000000000e+00, best bound 5.000000000000e+00, gap 0.0000%
Optimal objective: 5
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 5
T0_A_3 2
T0_A_4 2
T0_A_5 -0
T0_A_6 3
T0_A_7 -0
************************************************
Obj: 5
number of stages:  6
stage:  1.0
action:  0
num stages:  6
stage:  4.0
action:  1
num stages:  6
stage:  5.0
action:  2
num stages:  6
stage:  2.0
action:  3
num stages:  6
stage:  2.0
action:  4
num stages:  6
stage:  -0.0
action:  5
num stages:  6
stage:  3.0
action:  6
num stages:  6
stage:  -0.0
action:  7
num stages:  6
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  5.0
 > get_alu_stage: table  0 , alu_id =  2 :  5.0
alu  2  is of type  STATELESS ; scheduled to stage  5
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7fc00465c100>, 0), (<alus.DominoALU object at 0x7fc004627eb0>, 1), (<alus.DominoALU object at 0x7fc00465c1c0>, 2), (<alus.DominoALU object at 0x7fc00465c3a0>, 3), (<alus.DominoALU object at 0x7fc00465c310>, 4), (<alus.DominoALU object at 0x7fc00465c1f0>, 5)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fc004627fa0>, 0), (<alus.DominoGenericSALU object at 0x7fc004627e80>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
 * gen_dependency_list: dependency between  7  and  0
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1), (7, 0)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['saved_hop', 'pkt_saved_hop01', 'pkt_saved_hop00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '2'}, {'id': 3, 'opcode': 2, 'operand0': 'pkt_last_time00', 'operand1': '1', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 5, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '31'}, {'id': 7, 'opcode': 2, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 3), (0, 4), (1, 2), (3, 6), (4, 6), (5, 6), (6, 1), (7, 0)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['saved_hop', 'pkt_saved_hop01', 'pkt_saved_hop00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '2'}, {'id': 3, 'opcode': 2, 'operand0': 'pkt_last_time00', 'operand1': '1', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 5, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '31'}, {'id': 7, 'opcode': 2, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '0'}]}
Time taken: 45.10669803619385 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_8. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7fbc96111790>, 'write': <dependencyGraph.Statement object at 0x7fbc96111850>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fbc961525b0>, 'write': <dependencyGraph.Statement object at 0x7fbc96111430>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fbc96111790>, 'write': <dependencyGraph.Statement object at 0x7fbc96111850>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fbc961525b0>, 'write': <dependencyGraph.Statement object at 0x7fbc96111430>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fbc96111a90>, <dependencyGraph.Codelet object at 0x7fbc96111a30>, <dependencyGraph.Codelet object at 0x7fbc96111040>, <dependencyGraph.Codelet object at 0x7fbc96111130>, <dependencyGraph.Codelet object at 0x7fbc96111910>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fbc96111130>, <dependencyGraph.Codelet object at 0x7fbc96111a30>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop01', 'pkt_last_time00', 'pkt_saved_hop00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt_last_time01', 'pkt__br_tmp1'}
{'pkt_next_hop0', 'pkt_last_time01', 'pkt__br_tmp1'}
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_5_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_5_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_last_time01 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  4  and ALU  7
 *** found stateless dependency between ALU  5  and ALU  7
 *** found stateless dependency between ALU  6  and ALU  7
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fbc96111fa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 3 has output pkt_last_time01
 *** found dependency between stateless ALU  3  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fbc96111e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 4 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  5
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fbc96111e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 5 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  6
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fbc96111e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 6 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fbc96111e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 7 has output pkt__br_tmp1
 *** found dependency between stateless ALU  7  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,5,6,
+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,
+---> dependencies of ALU  4 : 
7,
+---> dependencies of ALU  5 : 
7,
+---> dependencies of ALU  6 : 
7,
+---> dependencies of ALU  7 : 
1,
# alus: =  8
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (0, 5), (0, 6), (1, 2), (3, 0), (4, 7), (5, 7), (6, 7), (7, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 152 rows, 106 columns and 342 nonzeros
Model fingerprint: 0xb86c0672
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 31 rows and 41 columns
Presolve time: 0.01s
Presolved: 121 rows, 65 columns, 282 nonzeros
Variable types: 0 continuous, 65 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 5.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 5 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 5.000000000000e+00, best bound 5.000000000000e+00, gap 0.0000%
Optimal objective: 5
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 5
T0_A_3 -0
T0_A_4 2
T0_A_5 2
T0_A_6 2
T0_A_7 3
************************************************
Obj: 5
number of stages:  6
stage:  1.0
action:  0
num stages:  6
stage:  4.0
action:  1
num stages:  6
stage:  5.0
action:  2
num stages:  6
stage:  -0.0
action:  3
num stages:  6
stage:  2.0
action:  4
num stages:  6
stage:  2.0
action:  5
num stages:  6
stage:  2.0
action:  6
num stages:  6
stage:  3.0
action:  7
num stages:  6
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  5.0
 > get_alu_stage: table  0 , alu_id =  2 :  5.0
alu  2  is of type  STATELESS ; scheduled to stage  5
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
alu  7  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7fbc96146100>, 0), (<alus.DominoALU object at 0x7fbc96111520>, 1), (<alus.DominoALU object at 0x7fbc96146250>, 2), (<alus.DominoALU object at 0x7fbc96146130>, 3), (<alus.DominoALU object at 0x7fbc961462e0>, 4), (<alus.DominoALU object at 0x7fbc96146220>, 5)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fbc96111fa0>, 0), (<alus.DominoGenericSALU object at 0x7fbc96111e80>, 1)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  1
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 4), (0, 5), (0, 6), (1, 2), (3, 0), (4, 7), (5, 7), (6, 7), (7, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['pkt_saved_hop01', 'saved_hop', 'pkt_saved_hop00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 2, 'operand0': 'pkt_saved_hop01', 'operand1': '1', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 2, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '0'}, {'id': 4, 'opcode': 3, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 5, 'opcode': 9, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12_0', 'immediate_operand': '7'}, {'id': 6, 'opcode': 9, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 7, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '6'}]}
----------------------------------------------------
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 4), (0, 5), (0, 6), (1, 2), (3, 0), (4, 7), (5, 7), (6, 7), (7, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'], 'outputs': ['pkt_saved_hop01', 'saved_hop', 'pkt_saved_hop00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 2, 'operand0': 'pkt_saved_hop01', 'operand1': '1', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 2, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '0'}, {'id': 4, 'opcode': 3, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 5, 'opcode': 9, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12_0', 'immediate_operand': '7'}, {'id': 6, 'opcode': 9, 'operand0': 'pkt_arrival', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_arrival', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 7, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '6'}]}
Time taken: 42.4286093711853 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_9. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f22800e85b0>, 'write': <dependencyGraph.Statement object at 0x7f22800a6430>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f22800a6790>, 'write': <dependencyGraph.Statement object at 0x7f22800a6850>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f22800e85b0>, 'write': <dependencyGraph.Statement object at 0x7f22800a6430>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f22800a6790>, 'write': <dependencyGraph.Statement object at 0x7f22800a6850>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f22800a6a90>, <dependencyGraph.Codelet object at 0x7f22800a6a30>, <dependencyGraph.Codelet object at 0x7f22800a6040>, <dependencyGraph.Codelet object at 0x7f22800a6130>, <dependencyGraph.Codelet object at 0x7f22800a6910>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f22800a6130>, <dependencyGraph.Codelet object at 0x7f22800a6a30>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out
Stored read, write flank variables
{'pkt_last_time00', 'pkt_last_time01', 'pkt_saved_hop01', 'pkt_saved_hop00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt_next_hop0', 'pkt_last_time01', 'pkt__br_tmp1'}
{'pkt_next_hop0', 'pkt_last_time01', 'pkt__br_tmp1'}
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_5_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_5_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_last_time01 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  4  and ALU  7
 *** found stateless dependency between ALU  5  and ALU  7
 *** found stateless dependency between ALU  6  and ALU  7
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  1  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f22800a6fa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 3 has output pkt_last_time01
 *** found dependency between stateless ALU  3  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f22800a6e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 4 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  5
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f22800a6e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 5 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  6
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f22800a6e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 6 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f22800a6e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_7', 3: 'comp_5', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6'}
Stateless ALU id 7 has output pkt__br_tmp1
 *** found dependency between stateless ALU  7  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
4,5,6,
+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,
+---> dependencies of ALU  4 : 
7,
+---> dependencies of ALU  5 : 
7,
+---> dependencies of ALU  6 : 
7,
+---> dependencies of ALU  7 : 
1,
# alus: =  8
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 4), (0, 5), (0, 6), (1, 2), (3, 0), (4, 7), (5, 7), (6, 7), (7, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 152 rows, 106 columns and 342 nonzeros
Model fingerprint: 0xb86c0672
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 31 rows and 41 columns
Presolve time: 0.01s
Presolved: 121 rows, 65 columns, 282 nonzeros
Variable types: 0 continuous, 65 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 5.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 5 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 5.000000000000e+00, best bound 5.000000000000e+00, gap 0.0000%
Optimal objective: 5
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 5
T0_A_3 -0
T0_A_4 2
T0_A_5 2
T0_A_6 2
T0_A_7 3
************************************************
Obj: 5
number of stages:  6
stage:  1.0
action:  0
num stages:  6
stage:  4.0
action:  1
num stages:  6
stage:  5.0
action:  2
num stages:  6
stage:  -0.0
action:  3
num stages:  6
stage:  2.0
action:  4
num stages:  6
stage:  2.0
action:  5
num stages:  6
stage:  2.0
action:  6
num stages:  6
stage:  3.0
action:  7
num stages:  6
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  5.0
 > get_alu_stage: table  0 , alu_id =  2 :  5.0
alu  2  is of type  STATELESS ; scheduled to stage  5
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
 > get_alu_stage: table  0 , alu_id =  7 :  3.0
alu  7  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7f22800dc100>, 0), (<alus.DominoALU object at 0x7f22800a6520>, 1), (<alus.DominoALU object at 0x7f22800dc250>, 2), (<alus.DominoALU object at 0x7f22800dc130>, 3), (<alus.DominoALU object at 0x7f22800dc2e0>, 4), (<alus.DominoALU object at 0x7f22800dc220>, 5)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f22800a6fa0>, 0), (<alus.DominoGenericSALU object at 0x7f22800a6e80>, 1)]
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  4  and  7
 * gen_dependency_list: dependency between  5  and  7
 * gen_dependency_list: dependency between  6  and  7
 * gen_dependency_list: dependency between  7  and  1
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 4), (0, 5), (0, 6), (1, 2), (3, 0), (4, 7), (5, 7), (6, 7), (7, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['saved_hop', 'pkt_saved_hop01', 'pkt_saved_hop00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_saved_hop01', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '31'}, {'id': 3, 'opcode': 2, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 5, 'opcode': 2, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '6'}, {'id': 6, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 7, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 4), (0, 5), (0, 6), (1, 2), (3, 0), (4, 7), (5, 7), (6, 7), (7, 1)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['pkt_last_time00', 'last_time'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['saved_hop', 'pkt_saved_hop01', 'pkt_saved_hop00'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_saved_hop01', 'operand2': 'pkt_saved_hop01', 'result': 'pkt_next_hop0', 'immediate_operand': '31'}, {'id': 3, 'opcode': 2, 'operand0': 'pkt_arrival', 'operand1': '1', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 5, 'opcode': 2, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '6'}, {'id': 6, 'opcode': 5, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 7, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '1'}]}
Time taken: 46.55918073654175 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_10. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7fe1a4543790>, 'write': <dependencyGraph.Statement object at 0x7fe1a4543850>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fe1a45855b0>, 'write': <dependencyGraph.Statement object at 0x7fe1a4543430>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fe1a4543790>, 'write': <dependencyGraph.Statement object at 0x7fe1a4543850>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fe1a45855b0>, 'write': <dependencyGraph.Statement object at 0x7fe1a4543430>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe1a4543a90>, <dependencyGraph.Codelet object at 0x7fe1a4543a30>, <dependencyGraph.Codelet object at 0x7fe1a4543100>, <dependencyGraph.Codelet object at 0x7fe1a45430a0>, <dependencyGraph.Codelet object at 0x7fe1a4543910>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe1a45430a0>, <dependencyGraph.Codelet object at 0x7fe1a4543a30>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'pkt_saved_hop01'}
pkt_saved_hop01  is write flank
everything fits within a stateful ALU. No need to do anything.
 -------------- v_outputs:  {'pkt_last_time00'}
pkt_last_time00  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out
Stored read, write flank variables
{'pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_last_time00', 'pkt_last_time01'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  {'pkt__br_tmp1', 'pkt_next_hop0', 'pkt_last_time01'}
{'pkt__br_tmp1', 'pkt_next_hop0', 'pkt_last_time01'}
u:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
v:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
u:  pkt_last_time01 = pkt_arrival;
v:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
u:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
v:  pkt_next_hop0 = pkt_saved_hop01;
u:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output pkt__br_tmp1 --------- 
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_pkt__br_tmp1_bnd_2.sk.out
['comp_6']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_next_hop0 --------- 
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_7 , type?  STATELESS
filename_to_compname: filename =  comp_7_stateless_pkt_next_hop0_bnd_1.sk.out
['comp_7']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_5_stateless_pkt_last_time01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_5_stateless_pkt_last_time01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_5_stateless_pkt_last_time01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output pkt_last_time01 --------- 
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_pkt_last_time01_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  2
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe1a4543e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe1a4543e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  4
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe1a4543e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
------successor of comp  comp_6  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe1a4543e80>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
Stateless ALU id 5 has output pkt__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_7  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe1a4543fa0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_7', 7: 'comp_5'}
Stateless ALU id 7 has output pkt_last_time01
 *** found dependency between stateless ALU  7  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,4,
+---> dependencies of ALU  1 : 
6,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
1,
+---> dependencies of ALU  6 : 

+---> dependencies of ALU  7 : 
0,
# alus: =  8
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  7  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 8}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (0, 4), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1), (7, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 152 rows, 106 columns and 342 nonzeros
Model fingerprint: 0xb171e633
Model has 96 general constraints
Variable types: 0 continuous, 106 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 31 rows and 41 columns
Presolve time: 0.01s
Presolved: 121 rows, 65 columns, 282 nonzeros
Variable types: 0 continuous, 65 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 5.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 3: 5 8 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 5.000000000000e+00, best bound 5.000000000000e+00, gap 0.0000%
Optimal objective: 5
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 2
T0_A_3 2
T0_A_4 2
T0_A_5 3
T0_A_6 5
T0_A_7 -0
************************************************
Obj: 5
number of stages:  6
stage:  1.0
action:  0
num stages:  6
stage:  4.0
action:  1
num stages:  6
stage:  2.0
action:  2
num stages:  6
stage:  2.0
action:  3
num stages:  6
stage:  2.0
action:  4
num stages:  6
stage:  3.0
action:  5
num stages:  6
stage:  5.0
action:  6
num stages:  6
stage:  -0.0
action:  7
num stages:  6
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  5.0
 > get_alu_stage: table  0 , alu_id =  6 :  5.0
alu  6  is of type  STATELESS ; scheduled to stage  5
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
 > get_alu_stage: table  0 , alu_id =  7 :  -0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  6  ;  [(<alus.DominoALU object at 0x7fe1a45792e0>, 0), (<alus.DominoALU object at 0x7fe1a4543eb0>, 1), (<alus.DominoALU object at 0x7fe1a4579190>, 2), (<alus.DominoALU object at 0x7fe1a4579280>, 3), (<alus.DominoALU object at 0x7fe1a45793a0>, 4), (<alus.DominoALU object at 0x7fe1a45793d0>, 5)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fe1a4543fa0>, 0), (<alus.DominoGenericSALU object at 0x7fe1a4543e80>, 1)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  4
 * gen_dependency_list: dependency between  1  and  6
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  1
 * gen_dependency_list: dependency between  7  and  0
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1), (7, 0)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'pkt_saved_hop00', 'saved_hop'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 4, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '30'}, {'id': 7, 'opcode': 14, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 6, 'alu_dependencies': [(0, 2), (0, 3), (0, 4), (1, 6), (2, 5), (3, 5), (4, 5), (5, 1), (7, 0)], 'stateful_alus': [{'inputs': ['last_time', 'pkt_last_time01'], 'outputs': ['last_time', 'pkt_last_time00'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'], 'outputs': ['pkt_saved_hop01', 'pkt_saved_hop00', 'saved_hop'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 14, 'operand0': 'pkt_last_time00', 'operand1': 'pkt_last_time00', 'operand2': 'pkt_last_time00', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 3, 'opcode': 4, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 4, 'opcode': 11, 'operand0': 'pkt_arrival', 'operand1': 'pkt_arrival', 'operand2': 'pkt_last_time00', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'pkt__br_tmp1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 15, 'operand0': '1', 'operand1': 'pkt_saved_hop01', 'operand2': '1', 'result': 'pkt_next_hop0', 'immediate_operand': '30'}, {'id': 7, 'opcode': 14, 'operand0': '1', 'operand1': 'pkt_arrival', 'operand2': '1', 'result': 'pkt_last_time01', 'immediate_operand': '10'}]}
Time taken: 4.764791250228882 s
preprocessor time:
