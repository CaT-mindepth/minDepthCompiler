running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_1_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fd56bc83610>, 'write': <dependencyGraph.Statement object at 0x7fd56bc41730>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fd56bc41760>, 'write': <dependencyGraph.Statement object at 0x7fd56bc418e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fd56bc83610>, 'write': <dependencyGraph.Statement object at 0x7fd56bc41730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fd56bc41760>, 'write': <dependencyGraph.Statement object at 0x7fd56bc418e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd56bc41220>, <dependencyGraph.Codelet object at 0x7fd56bc41a60>, <dependencyGraph.Codelet object at 0x7fd56bc410d0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd56bc41220>, <dependencyGraph.Codelet object at 0x7fd56bc41a60>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp1    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp1 = p_pkt_10>p_state_100
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp1 = p_pkt_10>p_state_100
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp1 = p_pkt_10>p_state_100;
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = p_pkt_10>p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7fd56bc41be0>]
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp1 = p_pkt_10>p_state_100; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_100', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp1', 'p_pkt_10'}
{'p__br_tmp1', 'p_pkt_10'}
u:  p__br_tmp1 = p_pkt_10>p_state_100;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fd56bc41280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 2 has output _out_s12
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fd56bc41c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fd56bc41280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fd56bc41c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fd56bc41280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fd56bc41c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fd56bc41280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 5 has output p__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fd56bc41c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 5 has output p__br_tmp1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fd56bc41c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 6 has output p_pkt_10
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,3,4,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x69c59cdc
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.00s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 4
T0_A_1 1
T0_A_2 2
T0_A_3 2
T0_A_4 2
T0_A_5 3
T0_A_6 -0
************************************************
Obj: 4
number of stages:  5
stage:  4.0
action:  0
num stages:  5
stage:  1.0
action:  1
num stages:  5
stage:  2.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  3.0
action:  5
num stages:  5
stage:  -0.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
alu  0  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7fd56bc7c130>, 0), (<alus.DominoALU object at 0x7fd56bc41400>, 1), (<alus.DominoALU object at 0x7fd56bc7c2e0>, 2), (<alus.DominoALU object at 0x7fd56bc7c160>, 3), (<alus.DominoALU object at 0x7fd56bc7c4c0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fd56bc41280>, 0), (<alus.DominoGenericSALU object at 0x7fd56bc41c40>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['state_0', 'p_state_000', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 - 3);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p__br_tmp1', 'p_state_100', 'p_state_101', 'state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 3, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '12'}, {'id': 3, 'opcode': 5, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 4, 'opcode': 13, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 5, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['state_0', 'p_state_000', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 - 3);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p__br_tmp1', 'p_state_100', 'p_state_101', 'state_1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 3, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '12'}, {'id': 3, 'opcode': 5, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 4, 'opcode': 13, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 5, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
Time taken: 20.757233142852783 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_2_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f736c428760>, 'write': <dependencyGraph.Statement object at 0x7f736c4288e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f736c46a610>, 'write': <dependencyGraph.Statement object at 0x7f736c428730>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f736c428760>, 'write': <dependencyGraph.Statement object at 0x7f736c4288e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f736c46a610>, 'write': <dependencyGraph.Statement object at 0x7f736c428730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f736c428220>, <dependencyGraph.Codelet object at 0x7f736c428a60>, <dependencyGraph.Codelet object at 0x7f736c4280d0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f736c428220>, <dependencyGraph.Codelet object at 0x7f736c428a60>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp1    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp1 = p_pkt_10>p_state_100
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp1 = p_pkt_10>p_state_100
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp1 = p_pkt_10>p_state_100;
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = p_pkt_10>p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f736c428be0>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp1']
state_var ['state_0']
resultant component: 
p__br_tmp1 = p_pkt_10>p_state_100; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_100', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp1'}
{'p_pkt_10', 'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_10>p_state_100;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f736c428c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f736c428280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f736c428c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f736c428280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f736c428c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  5
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f736c428280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f736c428c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f736c428280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp1
 *** found dependency between stateless ALU  6  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f736c428c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,4,5,
+---> dependencies of ALU  2 : 
1,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  1
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 4), (1, 5), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0xfb3ebc32
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 4
T0_A_1 1
T0_A_2 -0
T0_A_3 2
T0_A_4 2
T0_A_5 2
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  4.0
action:  0
num stages:  5
stage:  1.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
alu  0  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f736c463190>, 0), (<alus.DominoALU object at 0x7f736c463430>, 1), (<alus.DominoALU object at 0x7f736c4631c0>, 2), (<alus.DominoALU object at 0x7f736c4632e0>, 3), (<alus.DominoALU object at 0x7f736c4633a0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f736c428280>, 0), (<alus.DominoGenericSALU object at 0x7f736c428c40>, 1)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  1
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - 2);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_101', 'p_state_100', 'state_1', 'p__br_tmp1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 5, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '27'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - 2);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_101', 'p_state_100', 'state_1', 'p__br_tmp1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 15, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 5, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '27'}]}
Time taken: 21.67377781867981 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_3_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fe397283760>, 'write': <dependencyGraph.Statement object at 0x7fe3972838e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fe3972c4610>, 'write': <dependencyGraph.Statement object at 0x7fe397283730>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe397283760>, 'write': <dependencyGraph.Statement object at 0x7fe3972838e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe3972c4610>, 'write': <dependencyGraph.Statement object at 0x7fe397283730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe397283130>, <dependencyGraph.Codelet object at 0x7fe397283a60>, <dependencyGraph.Codelet object at 0x7fe397283100>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe397283130>, <dependencyGraph.Codelet object at 0x7fe397283a60>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp1    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp1 = p_pkt_10>p_state_100
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp1 = p_pkt_10>p_state_100
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_001', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp1 = p_pkt_10>p_state_100;
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = p_pkt_10>p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7fe397283be0>]
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp1 = p_pkt_10>p_state_100; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_100', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp1', 'p_pkt_10'}
{'p__br_tmp1', 'p_pkt_10'}
u:  p__br_tmp1 = p_pkt_10>p_state_100;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe3972831f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 2 has output _out_s12
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe397283c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe3972831f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe397283c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe3972831f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe397283c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe3972831f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 5 has output p__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe397283c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 5 has output p__br_tmp1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fe397283c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 6 has output p_pkt_10
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,3,4,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x69c59cdc
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 15 rows and 29 columns
Presolve time: 0.01s
Presolved: 120 rows, 64 columns, 282 nonzeros
Variable types: 0 continuous, 64 integer (56 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 8.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 4 8 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 4
T0_A_1 1
T0_A_2 2
T0_A_3 2
T0_A_4 2
T0_A_5 3
T0_A_6 -0
************************************************
Obj: 4
number of stages:  5
stage:  4.0
action:  0
num stages:  5
stage:  1.0
action:  1
num stages:  5
stage:  2.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  3.0
action:  5
num stages:  5
stage:  -0.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
alu  0  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7fe3972bd130>, 0), (<alus.DominoALU object at 0x7fe397283400>, 1), (<alus.DominoALU object at 0x7fe3972bd2e0>, 2), (<alus.DominoALU object at 0x7fe3972bd160>, 3), (<alus.DominoALU object at 0x7fe3972bd4c0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fe3972831f0>, 0), (<alus.DominoGenericSALU object at 0x7fe397283c40>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_10', 'p_pkt_0'], 'outputs': ['state_1', 'p_state_100', 'p__br_tmp1', 'p_state_101'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 3, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '12'}, {'id': 3, 'opcode': 10, 'operand0': '1', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 4, 'opcode': 9, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 5, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 2), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_10', 'p_pkt_0'], 'outputs': ['state_1', 'p_state_100', 'p__br_tmp1', 'p_state_101'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 3, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '12'}, {'id': 3, 'opcode': 10, 'operand0': '1', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 4, 'opcode': 9, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 5, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
Time taken: 46.026694774627686 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_4_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f90b2073610>, 'write': <dependencyGraph.Statement object at 0x7f90b2032730>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f90b2032760>, 'write': <dependencyGraph.Statement object at 0x7f90b20328e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f90b2073610>, 'write': <dependencyGraph.Statement object at 0x7f90b2032730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f90b2032760>, 'write': <dependencyGraph.Statement object at 0x7f90b20328e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f90b2032070>, <dependencyGraph.Codelet object at 0x7f90b2032a60>, <dependencyGraph.Codelet object at 0x7f90b2032040>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f90b2032a60>, <dependencyGraph.Codelet object at 0x7f90b2032070>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp1    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp1 = p_pkt_10>p_state_100
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp1 = p_pkt_10>p_state_100
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_100', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp1 = p_pkt_10>p_state_100;
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = p_pkt_10>p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f90b2032be0>]
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp1 = p_pkt_10>p_state_100; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp1'}
{'p_pkt_10', 'p__br_tmp1'}
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
u:  p__br_tmp1 = p_pkt_10>p_state_100;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_5_stateless_p__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_5_stateless_p__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp1_bnd_2.sk.out
['comp_5']
filename_to_compname: filename =  comp_5_stateless_p__br_tmp1_bnd_2.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p__br_tmp1_bnd_2.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f90b2032c10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
 *** found stateless dependency between ALU  0  and ALU  3
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f90b2032c10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f90b2032f10>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f90b2032c10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f90b2032f10>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f90b2032c10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f90b2032f10>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
------successor of comp  comp_5  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f90b2032c10>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 6 has output p__br_tmp1
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f90b2032f10>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_5', 4: 'comp_5', 5: 'comp_5', 6: 'comp_5'}
Stateless ALU id 6 has output p__br_tmp1
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
3,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
0,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 3), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 133 rows, 93 columns and 296 nonzeros
Model fingerprint: 0xff667682
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 7 rows and 25 columns
Presolve time: 0.01s
Presolved: 126 rows, 68 columns, 298 nonzeros
Variable types: 0 continuous, 68 integer (60 binary)
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 4 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 1
T0_A_1 4
T0_A_2 -0
T0_A_3 2
T0_A_4 -0
T0_A_5 -0
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  1.0
action:  0
num stages:  5
stage:  4.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  -0.0
action:  4
num stages:  5
stage:  -0.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
 > get_alu_stage: table  0 , alu_id =  1 :  4.0
alu  1  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f90b206b100>, 0), (<alus.DominoALU object at 0x7f90b206b460>, 1), (<alus.DominoALU object at 0x7f90b206b160>, 2), (<alus.DominoALU object at 0x7f90b206b1f0>, 3), (<alus.DominoALU object at 0x7f90b206b250>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f90b2032c10>, 0), (<alus.DominoGenericSALU object at 0x7f90b2032f10>, 1)]
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  2  and  0
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_10', 'p_pkt_0'], 'outputs': ['p_state_101', 'p_state_100', 'state_1', 'p__br_tmp1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_1 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_000', 'state_0', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 5, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(0, 3), (2, 0), (3, 6), (4, 6), (5, 6), (6, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_10', 'p_pkt_0'], 'outputs': ['p_state_101', 'p_state_100', 'state_1', 'p__br_tmp1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_1 - 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_000', 'state_0', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 14, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 5, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '1'}]}
Time taken: 34.12947463989258 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_5_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f3062e5e610>, 'write': <dependencyGraph.Statement object at 0x7f3062e1c730>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f3062e1c760>, 'write': <dependencyGraph.Statement object at 0x7f3062e1c8e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f3062e5e610>, 'write': <dependencyGraph.Statement object at 0x7f3062e1c730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f3062e1c760>, 'write': <dependencyGraph.Statement object at 0x7f3062e1c8e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3062e1c220>, <dependencyGraph.Codelet object at 0x7f3062e1ca60>, <dependencyGraph.Codelet object at 0x7f3062e1c0d0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f3062e1c220>, <dependencyGraph.Codelet object at 0x7f3062e1ca60>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp1    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp1 = p_pkt_10>p_state_100
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp1 = p_pkt_10>p_state_100
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp1 = p_pkt_10>p_state_100;
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = p_pkt_10>p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f3062e1cbe0>]
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp1']
state_var ['state_0']
resultant component: 
p__br_tmp1 = p_pkt_10>p_state_100; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_100', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp1'}
{'p_pkt_10', 'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_10>p_state_100;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f3062e1cc40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3062e1c280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f3062e1cc40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3062e1c280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f3062e1cc40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  5
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3062e1c280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f3062e1cc40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f3062e1c280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp1
 *** found dependency between stateless ALU  6  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f3062e1cc40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
4,5,
+---> dependencies of ALU  2 : 
1,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  1
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 4), (1, 5), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x3155c1ee
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 11 rows and 27 columns
Presolve time: 0.01s
Presolved: 123 rows, 66 columns, 290 nonzeros
Variable types: 0 continuous, 66 integer (58 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 4
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
T0_A_4 2
T0_A_5 2
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  4.0
action:  0
num stages:  5
stage:  1.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  2.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
alu  0  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f3062e57190>, 0), (<alus.DominoALU object at 0x7f3062e57430>, 1), (<alus.DominoALU object at 0x7f3062e571c0>, 2), (<alus.DominoALU object at 0x7f3062e572e0>, 3), (<alus.DominoALU object at 0x7f3062e573a0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f3062e1c280>, 0), (<alus.DominoGenericSALU object at 0x7f3062e1cc40>, 1)]
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  1
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 4), (1, 5), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_001', 'p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'p_state_101', 'state_1', 'p__br_tmp1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '12'}, {'id': 4, 'opcode': 3, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '12'}, {'id': 5, 'opcode': 10, 'operand0': '1', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 4), (1, 5), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_001', 'p_state_000', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'p_state_101', 'state_1', 'p__br_tmp1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '12'}, {'id': 4, 'opcode': 3, 'operand0': 'p_state_100', 'operand1': '1', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '12'}, {'id': 5, 'opcode': 10, 'operand0': '1', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 6, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '0'}]}
Time taken: 6.931668996810913 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_6_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f1f466e3760>, 'write': <dependencyGraph.Statement object at 0x7f1f466e38e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f1f46724610>, 'write': <dependencyGraph.Statement object at 0x7f1f466e3730>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f1f466e3760>, 'write': <dependencyGraph.Statement object at 0x7f1f466e38e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1f46724610>, 'write': <dependencyGraph.Statement object at 0x7f1f466e3730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1f466e30a0>, <dependencyGraph.Codelet object at 0x7f1f466e3a60>, <dependencyGraph.Codelet object at 0x7f1f466e3160>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1f466e30a0>, <dependencyGraph.Codelet object at 0x7f1f466e3a60>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp1    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp1 = p_pkt_10>p_state_100
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp1 = p_pkt_10>p_state_100
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp1 = p_pkt_10>p_state_100;
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = p_pkt_10>p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f1f466e3be0>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp1']
state_var ['state_0']
resultant component: 
p__br_tmp1 = p_pkt_10>p_state_100; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp1'}
{'p_pkt_10', 'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_10>p_state_100;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1f466e3c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f1f466e31f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1f466e3c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f1f466e31f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1f466e3c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f1f466e31f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1f466e3c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f1f466e31f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp1
 *** found dependency between stateless ALU  6  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f1f466e3c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,4,
+---> dependencies of ALU  2 : 
1,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  1
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 4), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x1ce7f2d6
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 11 rows and 27 columns
Presolve time: 0.01s
Presolved: 123 rows, 66 columns, 290 nonzeros
Variable types: 0 continuous, 66 integer (58 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 4
T0_A_1 1
T0_A_2 -0
T0_A_3 2
T0_A_4 2
T0_A_5 -0
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  4.0
action:  0
num stages:  5
stage:  1.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  -0.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
alu  0  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f1f4671d190>, 0), (<alus.DominoALU object at 0x7f1f4671d430>, 1), (<alus.DominoALU object at 0x7f1f4671d1c0>, 2), (<alus.DominoALU object at 0x7f1f4671d2e0>, 3), (<alus.DominoALU object at 0x7f1f4671d3a0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f1f466e31f0>, 0), (<alus.DominoGenericSALU object at 0x7f1f466e3c40>, 1)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  1
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 3), (1, 4), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_10', 'p_pkt_0'], 'outputs': ['p_state_101', 'state_1', 'p__br_tmp1', 'p_state_100'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 3, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '25'}, {'id': 4, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 5, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '9'}, {'id': 6, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '11'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 3), (1, 4), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_10', 'p_pkt_0'], 'outputs': ['p_state_101', 'state_1', 'p__br_tmp1', 'p_state_100'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 3, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '25'}, {'id': 4, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 5, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '9'}, {'id': 6, 'opcode': 11, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '11'}]}
Time taken: 19.51486587524414 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_7_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fddc5660610>, 'write': <dependencyGraph.Statement object at 0x7fddc561e730>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fddc561e760>, 'write': <dependencyGraph.Statement object at 0x7fddc561e8e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fddc5660610>, 'write': <dependencyGraph.Statement object at 0x7fddc561e730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fddc561e760>, 'write': <dependencyGraph.Statement object at 0x7fddc561e8e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fddc561e0a0>, <dependencyGraph.Codelet object at 0x7fddc561ea60>, <dependencyGraph.Codelet object at 0x7fddc561e160>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fddc561e0a0>, <dependencyGraph.Codelet object at 0x7fddc561ea60>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp1    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp1 = p_pkt_10>p_state_100
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp1 = p_pkt_10>p_state_100
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp1 = p_pkt_10>p_state_100;
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = p_pkt_10>p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7fddc561ebe0>]
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_0']
resultant component: 
p__br_tmp1 = p_pkt_10>p_state_100; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_100', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp1', 'p_pkt_10'}
{'p__br_tmp1', 'p_pkt_10'}
u:  p__br_tmp1 = p_pkt_10>p_state_100;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fddc561e1f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 2 has output _out_s12
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fddc561ec40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fddc561e1f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fddc561ec40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fddc561e1f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fddc561ec40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fddc561e1f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 5 has output p__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fddc561ec40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 5 has output p__br_tmp1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fddc561ec40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 6 has output p_pkt_10
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,3,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (1, 3), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0xc51fafc5
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 11 rows and 27 columns
Presolve time: 0.01s
Presolved: 123 rows, 66 columns, 290 nonzeros
Variable types: 0 continuous, 66 integer (58 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 4
T0_A_1 1
T0_A_2 2
T0_A_3 2
T0_A_4 -0
T0_A_5 3
T0_A_6 -0
************************************************
Obj: 4
number of stages:  5
stage:  4.0
action:  0
num stages:  5
stage:  1.0
action:  1
num stages:  5
stage:  2.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  -0.0
action:  4
num stages:  5
stage:  3.0
action:  5
num stages:  5
stage:  -0.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
alu  0  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7fddc5659130>, 0), (<alus.DominoALU object at 0x7fddc561e400>, 1), (<alus.DominoALU object at 0x7fddc56592e0>, 2), (<alus.DominoALU object at 0x7fddc5659160>, 3), (<alus.DominoALU object at 0x7fddc56594c0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fddc561e1f0>, 0), (<alus.DominoGenericSALU object at 0x7fddc561ec40>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 2), (1, 3), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_000', 'state_0', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - pkt_0);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p__br_tmp1', 'p_state_101', 'p_state_100'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '4'}, {'id': 3, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '15'}, {'id': 4, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '15'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '12'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 2), (1, 3), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_000', 'state_0', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - pkt_0);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p__br_tmp1', 'p_state_101', 'p_state_100'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '4'}, {'id': 3, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '15'}, {'id': 4, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '15'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '12'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
Time taken: 25.18656325340271 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_8_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f36ca52d760>, 'write': <dependencyGraph.Statement object at 0x7f36ca52d8e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f36ca56f610>, 'write': <dependencyGraph.Statement object at 0x7f36ca52d730>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f36ca52d760>, 'write': <dependencyGraph.Statement object at 0x7f36ca52d8e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f36ca56f610>, 'write': <dependencyGraph.Statement object at 0x7f36ca52d730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f36ca52d220>, <dependencyGraph.Codelet object at 0x7f36ca52da60>, <dependencyGraph.Codelet object at 0x7f36ca52d0d0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f36ca52d220>, <dependencyGraph.Codelet object at 0x7f36ca52da60>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp1    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp1 = p_pkt_10>p_state_100
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp1 = p_pkt_10>p_state_100
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp1 = p_pkt_10>p_state_100;
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = p_pkt_10>p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f36ca52dbe0>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp1']
state_var ['state_0']
resultant component: 
p__br_tmp1 = p_pkt_10>p_state_100; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_100', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp1', 'p_pkt_10'}
{'p__br_tmp1', 'p_pkt_10'}
u:  p__br_tmp1 = p_pkt_10>p_state_100;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f36ca52d280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 2 has output _out_s12
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f36ca52dc40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f36ca52d280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f36ca52dc40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f36ca52d280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f36ca52dc40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f36ca52d280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 5 has output p__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f36ca52dc40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 5 has output p__br_tmp1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f36ca52dc40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 6 has output p_pkt_10
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 133 rows, 93 columns and 296 nonzeros
Model fingerprint: 0x4c34a18f
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 7 rows and 25 columns
Presolve time: 0.01s
Presolved: 126 rows, 68 columns, 298 nonzeros
Variable types: 0 continuous, 68 integer (60 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 4
T0_A_1 1
T0_A_2 2
T0_A_3 -0
T0_A_4 -0
T0_A_5 3
T0_A_6 -0
************************************************
Obj: 4
number of stages:  5
stage:  4.0
action:  0
num stages:  5
stage:  1.0
action:  1
num stages:  5
stage:  2.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  -0.0
action:  4
num stages:  5
stage:  3.0
action:  5
num stages:  5
stage:  -0.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
alu  0  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f36ca568130>, 0), (<alus.DominoALU object at 0x7f36ca52d400>, 1), (<alus.DominoALU object at 0x7f36ca5682e0>, 2), (<alus.DominoALU object at 0x7f36ca568160>, 3), (<alus.DominoALU object at 0x7f36ca5684c0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f36ca52d280>, 0), (<alus.DominoGenericSALU object at 0x7f36ca52dc40>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 2), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'p_state_101', 'state_1', 'p__br_tmp1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 - pkt_0);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 3, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '12'}, {'id': 4, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '1'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 2), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['p_state_100', 'p_state_101', 'state_1', 'p__br_tmp1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 - pkt_0);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 5, 'operand0': 'p_state_100', 'operand1': 'p_state_100', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 3, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '12'}, {'id': 4, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 5, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '1'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
Time taken: 51.6818311214447 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_9_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fde1bab3760>, 'write': <dependencyGraph.Statement object at 0x7fde1bab38e0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fde1baf5610>, 'write': <dependencyGraph.Statement object at 0x7fde1bab3730>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fde1bab3760>, 'write': <dependencyGraph.Statement object at 0x7fde1bab38e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fde1baf5610>, 'write': <dependencyGraph.Statement object at 0x7fde1bab3730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fde1bab3220>, <dependencyGraph.Codelet object at 0x7fde1bab3a60>, <dependencyGraph.Codelet object at 0x7fde1bab30d0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fde1bab3220>, <dependencyGraph.Codelet object at 0x7fde1bab3a60>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp1    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp1 = p_pkt_10>p_state_100
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp1 = p_pkt_10>p_state_100
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_100', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp1 = p_pkt_10>p_state_100;
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = p_pkt_10>p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7fde1bab3be0>]
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp1']
state_var ['state_0']
resultant component: 
p__br_tmp1 = p_pkt_10>p_state_100; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_10', 'p_state_100']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_state_100', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p__br_tmp1'}
{'p_pkt_10', 'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_10>p_state_100;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fde1bab3c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 2 has output p_pkt_10
 *** found dependency between stateless ALU  2  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fde1bab3280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fde1bab3c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fde1bab3280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fde1bab3c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fde1bab3280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fde1bab3c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fde1bab3280>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp1
 *** found dependency between stateless ALU  6  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fde1bab3c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_5', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,4,
+---> dependencies of ALU  2 : 
1,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  1
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 4), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x1ce7f2d6
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 11 rows and 27 columns
Presolve time: 0.01s
Presolved: 123 rows, 66 columns, 290 nonzeros
Variable types: 0 continuous, 66 integer (58 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 4
T0_A_1 1
T0_A_2 -0
T0_A_3 2
T0_A_4 2
T0_A_5 -0
T0_A_6 3
************************************************
Obj: 4
number of stages:  5
stage:  4.0
action:  0
num stages:  5
stage:  1.0
action:  1
num stages:  5
stage:  -0.0
action:  2
num stages:  5
stage:  2.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  -0.0
action:  5
num stages:  5
stage:  3.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
alu  0  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
 > get_alu_stage: table  0 , alu_id =  3 :  2.0
alu  3  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
 > get_alu_stage: table  0 , alu_id =  5 :  -0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
 > get_alu_stage: table  0 , alu_id =  6 :  3.0
alu  6  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7fde1baee190>, 0), (<alus.DominoALU object at 0x7fde1baee430>, 1), (<alus.DominoALU object at 0x7fde1baee1c0>, 2), (<alus.DominoALU object at 0x7fde1baee2e0>, 3), (<alus.DominoALU object at 0x7fde1baee3a0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7fde1bab3280>, 0), (<alus.DominoGenericSALU object at 0x7fde1bab3c40>, 1)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  1
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 3), (1, 4), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - 2);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_101', 'p_state_100', 'p__br_tmp1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 4, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '11'}, {'id': 5, 'opcode': 2, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 3), (1, 4), (2, 1), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_1 - 2);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_0', 'p_pkt_10'], 'outputs': ['state_1', 'p_state_101', 'p_state_100', 'p__br_tmp1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 3, 'opcode': 4, 'operand0': 'p_state_100', 'operand1': 'p_pkt_0', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12_0', 'immediate_operand': '11'}, {'id': 5, 'opcode': 2, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '0'}]}
Time taken: 46.27958917617798 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_10_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU sub
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f10358f2610>, 'write': <dependencyGraph.Statement object at 0x7f10358b1730>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f10358b1760>, 'write': <dependencyGraph.Statement object at 0x7f10358b18e0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f10358f2610>, 'write': <dependencyGraph.Statement object at 0x7f10358b1730>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f10358b1760>, 'write': <dependencyGraph.Statement object at 0x7f10358b18e0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f10358b10a0>, <dependencyGraph.Codelet object at 0x7f10358b1a60>, <dependencyGraph.Codelet object at 0x7f10358b1160>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f10358b10a0>, <dependencyGraph.Codelet object at 0x7f10358b1a60>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p__br_tmp1'}
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_1']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
output  p__br_tmp1    read_flanks:  ['p_state_100']   write_flanks:  []
flanks:  {'p_state_100'}
   - createing a node for flank  p_state_100
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp1 = p_pkt_10>p_state_100
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
adding stmt :  p__br_tmp1 = p_pkt_10>p_state_100
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 ----------------- iteratively folding node. folding_idx =  0
trying to fold node:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
trying to fold predecessor:  p__br_tmp1 = p_pkt_10>p_state_100;
try_merge: trying to merge components: 
 | a:  p__br_tmp1 = p_pkt_10>p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp1 = p_pkt_10>p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7f10358b1be0>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp1', 'p_state_000']
state_var ['state_0']
resultant component: 
p__br_tmp1 = p_pkt_10>p_state_100; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_100', 'p_pkt_10']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_100', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
 --- cannot fold.
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp1', 'p_pkt_10'}
{'p__br_tmp1', 'p_pkt_10'}
u:  p__br_tmp1 = p_pkt_10>p_state_100;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
u:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
u:  p_pkt_10 = p_pkt_0-10;
v:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
u:  p_pkt_10 = p_pkt_0-10;
v:  p__br_tmp1 = p_pkt_10>p_state_100;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp1']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  sub :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_2.sk.out
['comp_4']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_5_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_10_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  2
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f10358b11f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 2 has output _out_s12
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f10358b1c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 2 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f10358b11f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f10358b1c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 3 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
 *** found stateless dependency between ALU  1  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f10358b11f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f10358b1c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 4 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f10358b11f0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 5 has output p__br_tmp1
 *** found dependency between stateless ALU  5  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f10358b1c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 5 has output p__br_tmp1
 *** Done finding stateless+stateful dependencies ***
------successor of comp  comp_5  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f10358b1c40>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_4', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_5'}
Stateless ALU id 6 has output p_pkt_10
 *** found dependency between stateless ALU  6  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
2,4,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
0,
+---> dependencies of ALU  6 : 
1,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 2), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 134 rows, 93 columns and 298 nonzeros
Model fingerprint: 0x216808f3
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 11 rows and 27 columns
Presolve time: 0.01s
Presolved: 123 rows, 66 columns, 290 nonzeros
Variable types: 0 continuous, 66 integer (58 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 4.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 4 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 4.000000000000e+00, best bound 4.000000000000e+00, gap 0.0000%
Optimal objective: 4
Following is the result we want:*****************
T0_A_0 4
T0_A_1 1
T0_A_2 2
T0_A_3 -0
T0_A_4 2
T0_A_5 3
T0_A_6 -0
************************************************
Obj: 4
number of stages:  5
stage:  4.0
action:  0
num stages:  5
stage:  1.0
action:  1
num stages:  5
stage:  2.0
action:  2
num stages:  5
stage:  -0.0
action:  3
num stages:  5
stage:  2.0
action:  4
num stages:  5
stage:  3.0
action:  5
num stages:  5
stage:  -0.0
action:  6
num stages:  5
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
 > get_alu_stage: table  0 , alu_id =  0 :  4.0
alu  0  is of type  STATEFUL ; scheduled to stage  4
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
 > get_alu_stage: table  0 , alu_id =  2 :  2.0
alu  2  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
 > get_alu_stage: table  0 , alu_id =  5 :  3.0
alu  5  is of type  STATELESS ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  5  ;  [(<alus.DominoALU object at 0x7f10358eb130>, 0), (<alus.DominoALU object at 0x7f10358b1400>, 1), (<alus.DominoALU object at 0x7f10358eb2e0>, 2), (<alus.DominoALU object at 0x7f10358eb160>, 3), (<alus.DominoALU object at 0x7f10358eb4c0>, 4)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f10358b11f0>, 0), (<alus.DominoGenericSALU object at 0x7f10358b1c40>, 1)]
 * gen_dependency_list: dependency between  1  and  2
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  0
 * gen_dependency_list: dependency between  6  and  1
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 2), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['state_0', 'p_state_001', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_10', 'p_pkt_0'], 'outputs': ['state_1', 'p_state_100', 'p_state_101', 'p__br_tmp1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 - pkt_0);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 4, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 5, 'alu_dependencies': [(1, 2), (1, 4), (2, 5), (3, 5), (4, 5), (5, 0), (6, 1)], 'stateful_alus': [{'inputs': ['state_0', 'p__br_tmp1'], 'outputs': ['state_0', 'p_state_001', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    state_0 = state_0_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + -2;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_1', 'p_pkt_10', 'p_pkt_0'], 'outputs': ['state_1', 'p_state_100', 'p_state_101', 'p__br_tmp1'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_1)/*comp_1_..ateful.sk:134*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + (pkt_0 - pkt_0);\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_state_100', 'operand2': 'p_state_100', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 3, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '10'}, {'id': 4, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '11'}, {'id': 5, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp1', 'immediate_operand': '11'}, {'id': 6, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_10', 'immediate_operand': '10'}]}
Time taken: 92.0276792049408 s
preprocessor time:
