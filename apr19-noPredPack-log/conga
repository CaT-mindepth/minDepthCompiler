running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_1_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<0;

lhs p__br_tmp5 rhs p_pkt_0<0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp6 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_3', 'p_state_000']
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fe35f4fe790>, 'write': <dependencyGraph.Statement object at 0x7fe35f4fe1f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fe35f53f5b0>, 'write': <dependencyGraph.Statement object at 0x7fe35f4fe850>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe35f4fe790>, 'write': <dependencyGraph.Statement object at 0x7fe35f4fe1f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe35f53f5b0>, 'write': <dependencyGraph.Statement object at 0x7fe35f4fe850>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
v p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp5 = p_pkt_0<0 stmts len 1
p__br_tmp5 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe35f4feaf0>, <dependencyGraph.Codelet object at 0x7fe35f4feb20>, <dependencyGraph.Codelet object at 0x7fe35f4febb0>, <dependencyGraph.Codelet object at 0x7fe35f4febe0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
p__br_tmp5 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe35f4feaf0>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_002', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_1', 'register_hi': 'state_0'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_1_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7fe35f534220>, 0), (<alus.DominoALU object at 0x7fe35f534040>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fe35f4feca0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_002', 'p_state_100', 'p__br_tmp7', 'state_0', 'p_state_001', 'p_state_000', 'p_state_101', 'p__br_tmp6', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_1_1 - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_2) != 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_2 - 0;\n', '      state_1 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_1) == 0)/*comp_0_..ateful.sk:143*/\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_2;\n', '      state_1 = pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_002', 'p_state_100', 'p__br_tmp7', 'state_0', 'p_state_001', 'p_state_000', 'p_state_101', 'p__br_tmp6', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_1_1 - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_2) != 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_2 - 0;\n', '      state_1 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_1) == 0)/*comp_0_..ateful.sk:143*/\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_2;\n', '      state_1 = pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}]}
Time taken: 2.9066543579101562 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_2_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<0;

lhs p__br_tmp5 rhs p_pkt_0<0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp6 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_3', 'p_state_000']
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f52217d6790>, 'write': <dependencyGraph.Statement object at 0x7f52217d61f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f52218185b0>, 'write': <dependencyGraph.Statement object at 0x7f52217d6850>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f52217d6790>, 'write': <dependencyGraph.Statement object at 0x7f52217d61f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f52218185b0>, 'write': <dependencyGraph.Statement object at 0x7f52217d6850>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
v p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp5 = p_pkt_0<0 stmts len 1
p__br_tmp5 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f52217d6af0>, <dependencyGraph.Codelet object at 0x7f52217d6b20>, <dependencyGraph.Codelet object at 0x7f52217d6bb0>, <dependencyGraph.Codelet object at 0x7f52217d6be0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
p__br_tmp5 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f52217d6af0>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_002', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_1', 'register_hi': 'state_0'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_2_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7f522180d220>, 0), (<alus.DominoALU object at 0x7f522180d040>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f52217d6ca0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p__br_tmp7', 'state_1', 'state_0', 'p_state_002', 'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_1_1 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_1_1 - pkt_1) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_2;\n', '      state_1 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_2) - 0) == 3)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0 + (pkt_2 + pkt_2);\n', '        state_1 = pkt_2 + pkt_2;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_2;\n', '        state_1 = pkt_1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 2, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p__br_tmp7', 'state_1', 'state_0', 'p_state_002', 'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_1_1 - pkt_1) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_1_1 - pkt_1) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_2;\n', '      state_1 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_2) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_2) - 0) == 3)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0 + (pkt_2 + pkt_2);\n', '        state_1 = pkt_2 + pkt_2;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_2;\n', '        state_1 = pkt_1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 2, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '10'}]}
Time taken: 2.4660732746124268 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_3_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp7 = p_pkt_0<0;

lhs p__br_tmp7 rhs p_pkt_0<0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp7 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp7 ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_0']
p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp7 ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_0']
p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp8 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp8 ? (p_pkt_3) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_3', 'p_state_000']
p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp9 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp9 ? (p_pkt_3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp9 ? (p_pkt_4) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp7 = p_pkt_0<0; p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0);
RAW p__br_tmp7 = p_pkt_0<0; p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0);
RAW p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000); p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f60e4b985b0>, 'write': <dependencyGraph.Statement object at 0x7f60e4b56850>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f60e4b56790>, 'write': <dependencyGraph.Statement object at 0x7f60e4b561f0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f60e4b985b0>, 'write': <dependencyGraph.Statement object at 0x7f60e4b56850>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f60e4b56790>, 'write': <dependencyGraph.Statement object at 0x7f60e4b561f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000);
v p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp7 = p_pkt_0<0 stmts len 1
p__br_tmp7 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f60e4b56af0>, <dependencyGraph.Codelet object at 0x7f60e4b56b20>, <dependencyGraph.Codelet object at 0x7f60e4b56bb0>, <dependencyGraph.Codelet object at 0x7f60e4b56be0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000);
p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0);
p__br_tmp7 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f60e4b56af0>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_101', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp8 ? (p_pkt_3) : (p_state_000) p__br_tmp9 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp9 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp9 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_20', 'p_pkt_10'}
{'p_pkt_20', 'p_pkt_10'}
u:  p__br_tmp7 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp7 ? (0) : (p_pkt_0);
u:  p__br_tmp7 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp7 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_3_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7f60e4b8d220>, 0), (<alus.DominoALU object at 0x7f60e4b8d040>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f60e4b56ca0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['state_0', 'p_state_101', 'p_state_002', 'p_state_000', 'state_1', 'p__br_tmp9', 'p_state_001', 'p__br_tmp8', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - pkt_2) < 31)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((0 - pkt_1) > 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 1;\n', '        state_1 = state_1_1 + pkt_2;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1 - 0;\n', '        state_1 = pkt_2 - 0;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '2'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['state_0', 'p_state_101', 'p_state_002', 'p_state_000', 'state_1', 'p__br_tmp9', 'p_state_001', 'p__br_tmp8', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - pkt_2) < 31)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((0 - pkt_1) > 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 1;\n', '        state_1 = state_1_1 + pkt_2;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1 - 0;\n', '        state_1 = pkt_2 - 0;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '2'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '2'}]}
Time taken: 2.387611150741577 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_4_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<0;

lhs p__br_tmp5 rhs p_pkt_0<0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp6 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_3', 'p_state_000']
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7efd24a40790>, 'write': <dependencyGraph.Statement object at 0x7efd24a401f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7efd24a815b0>, 'write': <dependencyGraph.Statement object at 0x7efd24a40850>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7efd24a40790>, 'write': <dependencyGraph.Statement object at 0x7efd24a401f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7efd24a815b0>, 'write': <dependencyGraph.Statement object at 0x7efd24a40850>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
v p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp5 = p_pkt_0<0 stmts len 1
p__br_tmp5 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7efd24a40af0>, <dependencyGraph.Codelet object at 0x7efd24a40b20>, <dependencyGraph.Codelet object at 0x7efd24a40bb0>, <dependencyGraph.Codelet object at 0x7efd24a40be0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
p__br_tmp5 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7efd24a40af0>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_1', 'register_hi': 'state_0'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_4_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7efd24a76220>, 0), (<alus.DominoALU object at 0x7efd24a76040>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7efd24a40ca0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['state_0', 'state_1', 'p__br_tmp6', 'p_state_101', 'p_state_100', 'p_state_002', 'p__br_tmp7', 'p_state_000', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_1_1 - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_2) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_1) > 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((pkt_2 - 0) == 2)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 2;\n', '        state_1 = pkt_1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_2;\n', '        state_1 = pkt_1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['state_0', 'state_1', 'p__br_tmp6', 'p_state_101', 'p_state_100', 'p_state_002', 'p__br_tmp7', 'p_state_000', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_1_1 - pkt_1) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_2) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_1) > 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((pkt_2 - 0) == 2)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 2;\n', '        state_1 = pkt_1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_2;\n', '        state_1 = pkt_1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}]}
Time taken: 3.8418848514556885 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_5_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<0;

lhs p__br_tmp5 rhs p_pkt_0<0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp6 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_3) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_3', 'p_state_000']
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (p_pkt_3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_pkt_4) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f8c7793a5b0>, 'write': <dependencyGraph.Statement object at 0x7f8c778f8850>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f8c778f8790>, 'write': <dependencyGraph.Statement object at 0x7f8c778f81f0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f8c7793a5b0>, 'write': <dependencyGraph.Statement object at 0x7f8c778f8850>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f8c778f8790>, 'write': <dependencyGraph.Statement object at 0x7f8c778f81f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
v p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp5 = p_pkt_0<0 stmts len 1
p__br_tmp5 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f8c778f8af0>, <dependencyGraph.Codelet object at 0x7f8c778f8b20>, <dependencyGraph.Codelet object at 0x7f8c778f8bb0>, <dependencyGraph.Codelet object at 0x7f8c778f8be0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
p__br_tmp5 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f8c778f8af0>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_002', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_4', 'p_pkt_3']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 'p_pkt_4', 'metadata_hi': 'p_pkt_3', 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_5_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7f8c7792f220>, 0), (<alus.DominoALU object at 0x7f8c7792f040>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f8c778f8ca0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_4', 'p_pkt_3'], 'outputs': ['p_state_002', 'p_state_100', 'p_state_001', 'state_1', 'p_state_101', 'p_state_000', 'p__br_tmp7', 'p__br_tmp6', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_2) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((pkt_2 - pkt_2) > 26)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 26;\n', '      state_1 = 26 - pkt_2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_2 - 0;\n', '      state_1 = pkt_1 - 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_1) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((pkt_2 - pkt_1) != 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_2;\n', '        state_1 = state_1_1 + (pkt_2 - pkt_2);\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1 - 0;\n', '        state_1 = state_1_1 + (pkt_1 - pkt_1);\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '2'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_4', 'p_pkt_3'], 'outputs': ['p_state_002', 'p_state_100', 'p_state_001', 'state_1', 'p_state_101', 'p_state_000', 'p__br_tmp7', 'p__br_tmp6', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_2) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((pkt_2 - pkt_2) > 26)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = 26;\n', '      state_1 = 26 - pkt_2;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_2 - 0;\n', '      state_1 = pkt_1 - 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_1) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((pkt_2 - pkt_1) != 0)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_2;\n', '        state_1 = state_1_1 + (pkt_2 - pkt_2);\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1 - 0;\n', '        state_1 = state_1_1 + (pkt_1 - pkt_1);\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '2'}]}
Time taken: 5.502415657043457 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_6_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp9 = p_pkt_0<0;

lhs p__br_tmp9 rhs p_pkt_0<0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp9 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp9 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_pkt_0']
p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp9 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_pkt_0']
p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp11 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp11 ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp11', 'p_pkt_3', 'p_state_000']
p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp12 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp12 ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp12', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp12 ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp12', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp9 = p_pkt_0<0; p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0);
RAW p__br_tmp9 = p_pkt_0<0; p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0);
RAW p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000); p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f074bb94790>, 'write': <dependencyGraph.Statement object at 0x7f074bb941f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f074bbd65b0>, 'write': <dependencyGraph.Statement object at 0x7f074bb94850>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f074bb94790>, 'write': <dependencyGraph.Statement object at 0x7f074bb941f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f074bbd65b0>, 'write': <dependencyGraph.Statement object at 0x7f074bb94850>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000);
v p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp9 = p_pkt_0<0 stmts len 1
p__br_tmp9 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f074bb94af0>, <dependencyGraph.Codelet object at 0x7f074bb94b20>, <dependencyGraph.Codelet object at 0x7f074bb94bb0>, <dependencyGraph.Codelet object at 0x7f074bb94be0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000);
p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0);
p__br_tmp9 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f074bb94af0>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp11 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp11 ? (p_pkt_3) : (p_state_000) p__br_tmp12 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp12 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp12 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
u:  p__br_tmp9 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp9 ? (0) : (p_pkt_0);
u:  p__br_tmp9 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp9 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_1', 'register_hi': 'state_0'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_6_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7f074bbca220>, 0), (<alus.DominoALU object at 0x7f074bbca040>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f074bb94ca0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p__br_tmp12', 'p_state_002', 'p__br_tmp11', 'p_state_101', 'p_state_001', 'p_state_000', 'p_state_100', 'state_1', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_2) == 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_2) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_2 - 0;\n', '      state_1 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 2);\n', '      state_1 = 2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_1) > 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_2) - 0) < 1)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0 + -2;\n', '        state_1 = 0;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_2;\n', '        state_1 = pkt_1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 2, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p__br_tmp12', 'p_state_002', 'p__br_tmp11', 'p_state_101', 'p_state_001', 'p_state_000', 'p_state_100', 'state_1', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_2) == 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_2) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_2 - 0;\n', '      state_1 = pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 2);\n', '      state_1 = 2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_1) > 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_0_0 + pkt_2) - 0) < 1)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0 + -2;\n', '        state_1 = 0;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_2;\n', '        state_1 = pkt_1;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '10'}, {'id': 2, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '10'}]}
Time taken: 2.068295478820801 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_7_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp6 = p_pkt_0<0;

lhs p__br_tmp6 rhs p_pkt_0<0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp6 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0']
p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp6 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0']
p__br_tmp7 = p_pkt_3<p_state_000;

lhs p__br_tmp7 rhs p_pkt_3<p_state_000
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp7 = p_pkt_3<p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000']
p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp7 ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_3', 'p_state_000']
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_4', 'p_state_100']
p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);

lhs p__br_tmp8 rhs (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001', 'p_pkt_4', 'p_state_101']
p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp8 ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_3', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp7 = p_pkt_3<p_state_000;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp6 = p_pkt_0<0; p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = p_pkt_0<0; p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0);
RAW p__br_tmp7 = p_pkt_3<p_state_000; p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000);
RAW p__br_tmp7 = p_pkt_3<p_state_000; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000); p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);
RAW p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001);
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
RAW p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101); p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001);
RAW p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f6641ba5790>, 'write': <dependencyGraph.Statement object at 0x7f6641ba51f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f6641be65b0>, 'write': <dependencyGraph.Statement object at 0x7f6641ba5820>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f6641ba5790>, 'write': <dependencyGraph.Statement object at 0x7f6641ba51f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f6641be65b0>, 'write': <dependencyGraph.Statement object at 0x7f6641ba5820>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp7 = p_pkt_3<p_state_000 stmts len 1
p__br_tmp7 = p_pkt_3<p_state_000;
v p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000);
v p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
v p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101) stmts len 1
p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
v p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC 1
v p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp6 = p_pkt_0<0 stmts len 1
p__br_tmp6 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f6641ba5af0>, <dependencyGraph.Codelet object at 0x7f6641ba5b20>, <dependencyGraph.Codelet object at 0x7f6641ba5bb0>, <dependencyGraph.Codelet object at 0x7f6641ba5be0>]
p_state_000 = state_0;
p_state_100 = state_1;
p__br_tmp7 = p_pkt_3<p_state_000;
p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000);
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101);
state_1 = p_state_101;
p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0);
p__br_tmp6 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f6641ba5af0>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000', 'p_state_101', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_000 = state_0 p_state_100 = state_1 p__br_tmp7 = p_pkt_3<p_state_000 p_state_001 = p__br_tmp7 ? (p_pkt_3) : (p_state_000) p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) p__br_tmp8 = (!(p_pkt_3<p_state_000))&&(!(p_pkt_3<p_state_001))&&(p_pkt_4==p_state_101) state_1 = p_state_101 p_state_002 = p__br_tmp8 ? (p_pkt_3) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_10', 'p_pkt_20'}
{'p_pkt_10', 'p_pkt_20'}
u:  p__br_tmp6 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp6 ? (0) : (p_pkt_0);
u:  p__br_tmp6 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp6 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_4', 'p_pkt_3']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_4', 'metadata_hi': 'p_pkt_3', 'register_lo': 'state_1', 'register_hi': 'state_0'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_7_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7f6641bda220>, 0), (<alus.DominoALU object at 0x7f6641bda040>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f6641ba5ca0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_1', 'state_0', 'p_pkt_4', 'p_pkt_3'], 'outputs': ['state_1', 'p_state_001', 'p_state_100', 'state_0', 'p_state_101', 'p__br_tmp8', 'p_state_002', 'p__br_tmp7', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) != 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_1_1 - pkt_2) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) != 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((pkt_2 - 0) > 31)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0 + (pkt_1 - pkt_1);\n', '        state_1 = pkt_1 + 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1 - 0;\n', '        state_1 = pkt_2;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}, {'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_1', 'state_0', 'p_pkt_4', 'p_pkt_3'], 'outputs': ['state_1', 'p_state_001', 'p_state_100', 'state_0', 'p_state_101', 'p__br_tmp8', 'p_state_002', 'p__br_tmp7', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) != 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_1_1 - pkt_2) < 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_2) != 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((pkt_2 - 0) > 31)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = state_0_0 + (pkt_1 - pkt_1);\n', '        state_1 = pkt_1 + 1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1 - 0;\n', '        state_1 = pkt_2;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}, {'id': 2, 'opcode': 4, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '0'}]}
Time taken: 4.429271221160889 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_8_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<0;

lhs p__br_tmp5 rhs p_pkt_0<0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp6 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_3) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_3', 'p_state_000']
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (p_pkt_3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_pkt_4) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fbb7f4d35b0>, 'write': <dependencyGraph.Statement object at 0x7fbb7f492850>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fbb7f492790>, 'write': <dependencyGraph.Statement object at 0x7fbb7f4921f0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fbb7f4d35b0>, 'write': <dependencyGraph.Statement object at 0x7fbb7f492850>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fbb7f492790>, 'write': <dependencyGraph.Statement object at 0x7fbb7f4921f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
v p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp5 = p_pkt_0<0 stmts len 1
p__br_tmp5 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fbb7f492af0>, <dependencyGraph.Codelet object at 0x7fbb7f492b20>, <dependencyGraph.Codelet object at 0x7fbb7f492bb0>, <dependencyGraph.Codelet object at 0x7fbb7f492be0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
p__br_tmp5 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fbb7f492af0>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_002', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_20', 'p_pkt_10'}
{'p_pkt_20', 'p_pkt_10'}
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_4', 'p_pkt_3']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 'p_pkt_4', 'metadata_hi': 'p_pkt_3', 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_8_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7fbb7f4c8220>, 0), (<alus.DominoALU object at 0x7fbb7f4c8040>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fbb7f492ca0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_4', 'p_pkt_3'], 'outputs': ['p_state_000', 'p_state_101', 'state_0', 'p_state_001', 'p_state_100', 'p__br_tmp6', 'p__br_tmp7', 'p_state_002', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_2) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_2) != 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_2;\n', '      state_1 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_2 - 0;\n', '      state_1 = state_1_1 + pkt_2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_1) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      state_0 = pkt_2;\n', '      state_1 = state_1_1 + (pkt_1 - pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}, {'id': 2, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_4', 'p_pkt_3'], 'outputs': ['p_state_000', 'p_state_101', 'state_0', 'p_state_001', 'p_state_100', 'p__br_tmp6', 'p__br_tmp7', 'p_state_002', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_2) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_2) != 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_2;\n', '      state_1 = pkt_1 - 0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_2 - 0;\n', '      state_1 = state_1_1 + pkt_2;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_1) == 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      state_0 = pkt_2;\n', '      state_1 = state_1_1 + (pkt_1 - pkt_1);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}, {'id': 2, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}]}
Time taken: 2.3041019439697266 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_9_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp3 = p_pkt_0<0;

lhs p__br_tmp3 rhs p_pkt_0<0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp3 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_0']
p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp3 ? (0) : (p_pkt_0)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_0']
p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp4 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_3) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_3', 'p_state_000']
p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (p_pkt_3) : (p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (p_pkt_4) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp3 = p_pkt_0<0; p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0);
RAW p__br_tmp3 = p_pkt_0<0; p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000); p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f2df6339790>, 'write': <dependencyGraph.Statement object at 0x7f2df63391f0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f2df637b5b0>, 'write': <dependencyGraph.Statement object at 0x7f2df6339850>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f2df6339790>, 'write': <dependencyGraph.Statement object at 0x7f2df63391f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2df637b5b0>, 'write': <dependencyGraph.Statement object at 0x7f2df6339850>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000);
v p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp3 = p_pkt_0<0 stmts len 1
p__br_tmp3 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2df6339af0>, <dependencyGraph.Codelet object at 0x7f2df6339b20>, <dependencyGraph.Codelet object at 0x7f2df6339bb0>, <dependencyGraph.Codelet object at 0x7f2df6339be0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000);
p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0);
p__br_tmp3 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2df6339af0>}
total number of nodes created:  4
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_100', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1', 'state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1', 'state_0']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp4 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp4 ? (p_pkt_3) : (p_state_000) p__br_tmp5 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp5 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp5 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_20', 'p_pkt_10'}
{'p_pkt_20', 'p_pkt_10'}
u:  p__br_tmp3 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp3 ? (0) : (p_pkt_0);
u:  p__br_tmp3 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp3 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_1', 'register_hi': 'state_0'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_9_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7f2df6370220>, 0), (<alus.DominoALU object at 0x7f2df6370040>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f2df6339ca0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_100', 'p__br_tmp5', 'p_state_002', 'p__br_tmp4', 'state_0', 'p_state_000', 'p_state_101', 'p_state_001', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_2) == 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) > 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 3);\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = pkt_1 - 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_1) > 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_1_1 + pkt_1) - pkt_2) > 3)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_2;\n', '        state_1 = pkt_1 - 0;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_2;\n', '        state_1 = pkt_1 - 0;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '10'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_1', 'state_0', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['p_state_100', 'p__br_tmp5', 'p_state_002', 'p__br_tmp4', 'state_0', 'p_state_000', 'p_state_101', 'p_state_001', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_2) == 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((0 - pkt_1) > 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 3);\n', '      state_1 = state_1_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0;\n', '      state_1 = pkt_1 - 0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_1_1 - pkt_1) > 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if(((state_1_1 + pkt_1) - pkt_2) > 3)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = pkt_2;\n', '        state_1 = pkt_1 - 0;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_2;\n', '        state_1 = pkt_1 - 0;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '10'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}]}
Time taken: 2.3029563426971436 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga, program name: conga_equivalent_10_canonicalizer. Grammar: pair. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pair
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<0;

lhs p__br_tmp5 rhs p_pkt_0<0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<0;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_10 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

lhs p_pkt_20 rhs p__br_tmp5 ? (0) : (p_pkt_0)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

lhs p__br_tmp6 rhs (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_4', 'p_state_100']
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_3) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_3', 'p_state_000']
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_3', 'p_state_000', 'p_pkt_3', 'p_state_001']
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (p_pkt_3) : (p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_3', 'p_state_001']
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (p_pkt_4) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_4', 'p_state_100']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_100 = state_1; p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp5 = p_pkt_0<0; p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100); p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001); p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
RAW p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001); state_0 = p_state_002;
RAW p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f3fb6bdd5b0>, 'write': <dependencyGraph.Statement object at 0x7f3fb6b9c850>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f3fb6b9c790>, 'write': <dependencyGraph.Statement object at 0x7f3fb6b9c1f0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f3fb6bdd5b0>, 'write': <dependencyGraph.Statement object at 0x7f3fb6b9c850>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f3fb6b9c790>, 'write': <dependencyGraph.Statement object at 0x7f3fb6b9c1f0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  12
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) stmts len 1
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
v p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
v p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
v p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
v p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 2
v p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0) stmts len 1
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
SCC 3
v p__br_tmp5 = p_pkt_0<0 stmts len 1
p__br_tmp5 = p_pkt_0<0;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3fb6b9caf0>, <dependencyGraph.Codelet object at 0x7f3fb6b9cb20>, <dependencyGraph.Codelet object at 0x7f3fb6b9cbb0>, <dependencyGraph.Codelet object at 0x7f3fb6b9cbe0>]
p_state_100 = state_1;
p_state_000 = state_0;
p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100);
p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000);
p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001);
p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001);
p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100);
state_0 = p_state_002;
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
p__br_tmp5 = p_pkt_0<0;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f3fb6b9caf0>}
total number of nodes created:  4
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_002', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_0', 'state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0', 'state_1']
codelet  p_state_100 = state_1 p_state_000 = state_0 p__br_tmp6 = (!(p_pkt_3<p_state_000))&&(p_pkt_4==p_state_100) p_state_001 = p__br_tmp6 ? (p_pkt_3) : (p_state_000) p__br_tmp7 = (p_pkt_3<p_state_000)&&(p_pkt_3<p_state_001) p_state_002 = p__br_tmp7 ? (p_pkt_3) : (p_state_001) p_state_101 = p__br_tmp7 ? (p_pkt_4) : (p_state_100) state_0 = p_state_002 state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_20', 'p_pkt_10'}
{'p_pkt_20', 'p_pkt_10'}
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_10 = p__br_tmp5 ? (0) : (p_pkt_0);
u:  p__br_tmp5 = p_pkt_0<0;
v:  p_pkt_20 = p__br_tmp5 ? (0) : (p_pkt_0);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4']
 ~~~| state var:  ['state_0', 'state_1']
salu_inputs {'metadata_lo': 'p_pkt_3', 'metadata_hi': 'p_pkt_4', 'register_lo': 'state_0', 'register_hi': 'state_1'}
number of outputs for  pair :  3
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_5_stateless_p_pkt_20_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_20 --------- 
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_5 , type?  STATELESS
filename_to_compname: filename =  comp_5_stateless_p_pkt_20_bnd_1.sk.out
['comp_5']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/conga/conga_equivalent_10_canonicalizer_out/comp_4_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_10 --------- 
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p_pkt_10_bnd_1.sk.out
['comp_4']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

# alus: =  3
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 63 rows, 41 columns and 124 nonzeros
Model fingerprint: 0xff24ea89
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 9 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 72 rows, 40 columns, 174 nonzeros
Variable types: 0 continuous, 40 integer (36 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
T0_A_2 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
stage:  -0.0
action:  2
num stages:  1
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  2  ;  [(<alus.DominoALU object at 0x7f3fb6bd2220>, 0), (<alus.DominoALU object at 0x7f3fb6bd2040>, 1)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f3fb6b9cca0>, 0)]
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['state_0', 'p_state_000', 'p_state_101', 'p_state_001', 'p__br_tmp7', 'p_state_002', 'p__br_tmp6', 'p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = state_1_1 + (pkt_2 - pkt_2);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2 - pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((state_0_0 - pkt_1) < 1)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 1;\n', '        state_1 = state_1_1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = pkt_2;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}, {'id': 2, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 1, 'alu_dependencies': [], 'stateful_alus': [{'inputs': ['state_0', 'state_1', 'p_pkt_3', 'p_pkt_4'], 'outputs': ['state_0', 'p_state_000', 'p_state_101', 'p_state_001', 'p__br_tmp7', 'p_state_002', 'p__br_tmp6', 'p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int state_1_1, int pkt_1, int pkt_2, ref int[3] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[3])0);\n', '  int state_1 = state_1_1;\n', '  int state_0 = state_0_0;\n', '  if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_1_1 - pkt_2) == 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 - 0;\n', '      state_1 = state_1_1 + (pkt_2 - pkt_2);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '      state_1 = pkt_2 - pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_1) > 0)/*comp_0_..ateful.sk:142*/\n', '    {\n', '      if((state_0_0 - pkt_1) < 1)/*comp_0_..ateful.sk:143*/\n', '      {\n', '        state_0 = 1;\n', '        state_1 = state_1_1;\n', '      }\n', '      else\n', '      {\n', '        state_0 = pkt_1;\n', '        state_1 = pkt_2;\n', '      }\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_1;\n', '  _out0[2] = 0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_20', 'immediate_operand': '30'}, {'id': 2, 'opcode': 14, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_10', 'immediate_operand': '30'}]}
Time taken: 2.0502305030822754 s
preprocessor time:
