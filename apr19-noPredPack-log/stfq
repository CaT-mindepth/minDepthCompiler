running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_1_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

lhs p__br_tmp4 rhs !((p_pkt_0<p_state_000)&&(p_state_000>1))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp4 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp5 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_2', 'p_state_001', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fdf6c1736a0>, 'write': <dependencyGraph.Statement object at 0x7fdf6c1ad940>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fdf6c1736a0>, 'write': <dependencyGraph.Statement object at 0x7fdf6c1ad940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) stmts len 1
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fdf6c1adb50>, <dependencyGraph.Codelet object at 0x7fdf6c1adb20>, <dependencyGraph.Codelet object at 0x7fdf6c1ad130>]
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fdf6c1ad130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5', 'p_state_001'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
2   p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
3   p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
4   p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_pkt_2', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  11
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,5,6,7,11,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2), (0, 5), (0, 6), (0, 7), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 257 rows, 184 columns and 600 nonzeros
Model fingerprint: 0xf904e19e
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 19 rows and 0 columns
Presolve removed 0 rows and 40 columns
Presolve time: 0.01s
Presolved: 276 rows, 144 columns, 653 nonzeros
Variable types: 0 continuous, 144 integer (129 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 0
T0_A_4 2
T0_A_5 1
T0_A_6 1
T0_A_7 1
T0_A_8 2
T0_A_9 0
T0_A_10 0
T0_A_11 1
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  0.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  1.0
action:  6
num stages:  4
stage:  1.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  0.0
action:  9
num stages:  4
stage:  0.0
action:  10
num stages:  4
stage:  1.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  0.0
 > get_alu_stage: table  0 , alu_id =  3 :  0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
alu  7  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  0.0
 > get_alu_stage: table  0 , alu_id =  9 :  0.0
alu  9  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  10 :  0.0
 > get_alu_stage: table  0 , alu_id =  10 :  0.0
alu  10  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
alu  11  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7fdf6c1641f0>, 0), (<alus.DominoALU object at 0x7fdf6c1642e0>, 1), (<alus.DominoALU object at 0x7fdf6c164310>, 2), (<alus.DominoALU object at 0x7fdf6c164370>, 3), (<alus.DominoALU object at 0x7fdf6c1645b0>, 4), (<alus.DominoALU object at 0x7fdf6c164610>, 5), (<alus.DominoALU object at 0x7fdf6c164640>, 6), (<alus.DominoALU object at 0x7fdf6c164670>, 7), (<alus.DominoALU object at 0x7fdf6c1646a0>, 8), (<alus.DominoALU object at 0x7fdf6c1646d0>, 9), (<alus.DominoALU object at 0x7fdf6c164700>, 10), (<alus.DominoALU object at 0x7fdf6c164730>, 11), (<alus.DominoALU object at 0x7fdf6c164760>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fdf6c1adee0>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 5), (0, 6), (0, 7), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p__br_tmp4', 'state_0', 'p__br_tmp5', 'p_state_002', 'p_state_001', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) != 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 1);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) > 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 10, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 2, 'opcode': 6, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 18, 'operand0': '1', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_2', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 4, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '1'}, {'id': 5, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_2', 'immediate_operand': '1'}, {'id': 6, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_3', 'immediate_operand': '2'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_state_000', 'result': '_out_s12_4', 'immediate_operand': '2'}, {'id': 8, 'opcode': 1, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '2'}, {'id': 9, 'opcode': 10, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_2', 'result': '_out_s12_5', 'immediate_operand': '31'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_6', 'immediate_operand': '1'}, {'id': 11, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_7', 'immediate_operand': '31'}, {'id': 12, 'opcode': 15, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '0'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '3'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 5), (0, 6), (0, 7), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p__br_tmp4', 'state_0', 'p__br_tmp5', 'p_state_002', 'p_state_001', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - 0) != 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 1);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) > 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 10, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 2, 'opcode': 6, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 18, 'operand0': '1', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_2', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 4, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '1'}, {'id': 5, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_2', 'immediate_operand': '1'}, {'id': 6, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_3', 'immediate_operand': '2'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_state_000', 'result': '_out_s12_4', 'immediate_operand': '2'}, {'id': 8, 'opcode': 1, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '2'}, {'id': 9, 'opcode': 10, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_2', 'result': '_out_s12_5', 'immediate_operand': '31'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_6', 'immediate_operand': '1'}, {'id': 11, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_7', 'immediate_operand': '31'}, {'id': 12, 'opcode': 15, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '0'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '3'}]}
Time taken: 13.995757102966309 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_2_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

lhs p__br_tmp4 rhs !((p_pkt_0<p_state_000)&&(p_state_000>1))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp4 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp5 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_2', 'p_state_001', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f09d944c6a0>, 'write': <dependencyGraph.Statement object at 0x7f09d9486940>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f09d944c6a0>, 'write': <dependencyGraph.Statement object at 0x7f09d9486940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) stmts len 1
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f09d9486b50>, <dependencyGraph.Codelet object at 0x7f09d9486b20>, <dependencyGraph.Codelet object at 0x7f09d9486130>]
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f09d9486130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp5', 'p__br_tmp4'}
elements in v_outputs:  {'p_state_001', 'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
2   p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
3   p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
4   p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
5   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_pkt_2', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
finding node for codelet:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  10
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,5,6,7,9,10,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2), (0, 5), (0, 6), (0, 7), (0, 9), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 258 rows, 184 columns and 602 nonzeros
Model fingerprint: 0x37afb83b
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 41 columns
Presolve time: 0.01s
Presolved: 275 rows, 143 columns, 650 nonzeros
Variable types: 0 continuous, 143 integer (128 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 0
T0_A_4 2
T0_A_5 1
T0_A_6 1
T0_A_7 1
T0_A_8 2
T0_A_9 1
T0_A_10 1
T0_A_11 0
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  0.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  1.0
action:  6
num stages:  4
stage:  1.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  1.0
action:  10
num stages:  4
stage:  0.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  0.0
 > get_alu_stage: table  0 , alu_id =  3 :  0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
alu  7  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
alu  10  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  11 :  0.0
 > get_alu_stage: table  0 , alu_id =  11 :  0.0
alu  11  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7f09d943f220>, 0), (<alus.DominoALU object at 0x7f09d943f2e0>, 1), (<alus.DominoALU object at 0x7f09d943f310>, 2), (<alus.DominoALU object at 0x7f09d943f370>, 3), (<alus.DominoALU object at 0x7f09d943f5b0>, 4), (<alus.DominoALU object at 0x7f09d943f610>, 5), (<alus.DominoALU object at 0x7f09d943f640>, 6), (<alus.DominoALU object at 0x7f09d943f670>, 7), (<alus.DominoALU object at 0x7f09d943f6a0>, 8), (<alus.DominoALU object at 0x7f09d943f6d0>, 9), (<alus.DominoALU object at 0x7f09d943f700>, 10), (<alus.DominoALU object at 0x7f09d943f730>, 11), (<alus.DominoALU object at 0x7f09d943f760>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f09d9486e50>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 5), (0, 6), (0, 7), (0, 9), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_000', 'p_state_001', 'p__br_tmp4', 'p__br_tmp5', 'state_0', 'p_state_002'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - 0) < 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) > 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) < 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '5'}, {'id': 2, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 3, 'opcode': 6, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_2', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '29'}, {'id': 4, 'opcode': 8, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '18'}, {'id': 5, 'opcode': 12, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_2', 'immediate_operand': '0'}, {'id': 6, 'opcode': 15, 'operand0': 'p_pkt_1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_3', 'immediate_operand': '8'}, {'id': 7, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_4', 'immediate_operand': '31'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '20'}, {'id': 9, 'opcode': 10, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_5', 'immediate_operand': '0'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_6', 'immediate_operand': '10'}, {'id': 11, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_7', 'immediate_operand': '2'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '3'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '6'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 5), (0, 6), (0, 7), (0, 9), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_000', 'p_state_001', 'p__br_tmp4', 'p__br_tmp5', 'state_0', 'p_state_002'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - 0) < 2)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) > 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) < 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '5'}, {'id': 2, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 3, 'opcode': 6, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_2', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '29'}, {'id': 4, 'opcode': 8, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '18'}, {'id': 5, 'opcode': 12, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_2', 'immediate_operand': '0'}, {'id': 6, 'opcode': 15, 'operand0': 'p_pkt_1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_3', 'immediate_operand': '8'}, {'id': 7, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_4', 'immediate_operand': '31'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '20'}, {'id': 9, 'opcode': 10, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_5', 'immediate_operand': '0'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_6', 'immediate_operand': '10'}, {'id': 11, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_7', 'immediate_operand': '2'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '3'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '6'}]}
Time taken: 99.23072862625122 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_3_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

lhs p__br_tmp6 rhs !((p_pkt_0<p_state_000)&&(p_state_000>1))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp6 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

lhs p__br_tmp7 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp7 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_2', 'p_state_001', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f2f8b92e6a0>, 'write': <dependencyGraph.Statement object at 0x7f2f8b968940>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2f8b92e6a0>, 'write': <dependencyGraph.Statement object at 0x7f2f8b968940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) stmts len 1
p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) stmts len 1
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2f8b968b50>, <dependencyGraph.Codelet object at 0x7f2f8b968b20>, <dependencyGraph.Codelet object at 0x7f2f8b968130>]
p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2f8b968130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp6', 'p__br_tmp7'}
elements in v_outputs:  {'p_state_001', 'p__br_tmp6', 'p__br_tmp7'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
2   p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
3   p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
4   p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001)
5   state_0 = p_state_002
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001)
 rhs_vars:  ['p__br_tmp7', 'p_pkt_2', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp6', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp6    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp7    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
finding node for codelet:  p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
finding node for codelet:  p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
finding node for codelet:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000)
finding node for codelet:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
codelet  p_state_000 = state_0 p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
u:  p_state_000 = state_0; p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp7 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v:  p_pkt_11 = p__br_tmp7 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_pkt_10 = p__br_tmp6 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp6 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_state_001 = p__br_tmp6 ? (p_pkt_0+p_pkt_2) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  10
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,3,6,7,9,10,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2), (0, 3), (0, 6), (0, 7), (0, 9), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 258 rows, 184 columns and 602 nonzeros
Model fingerprint: 0x4b5f03ca
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 41 columns
Presolve time: 0.01s
Presolved: 275 rows, 143 columns, 650 nonzeros
Variable types: 0 continuous, 143 integer (128 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 1
T0_A_4 2
T0_A_5 0
T0_A_6 1
T0_A_7 1
T0_A_8 2
T0_A_9 1
T0_A_10 1
T0_A_11 0
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  0.0
action:  5
num stages:  4
stage:  1.0
action:  6
num stages:  4
stage:  1.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  1.0
action:  10
num stages:  4
stage:  0.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  0.0
 > get_alu_stage: table  0 , alu_id =  5 :  0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
alu  7  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
alu  10  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  11 :  0.0
 > get_alu_stage: table  0 , alu_id =  11 :  0.0
alu  11  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7f2f8b921220>, 0), (<alus.DominoALU object at 0x7f2f8b9212e0>, 1), (<alus.DominoALU object at 0x7f2f8b921310>, 2), (<alus.DominoALU object at 0x7f2f8b921370>, 3), (<alus.DominoALU object at 0x7f2f8b9215b0>, 4), (<alus.DominoALU object at 0x7f2f8b921610>, 5), (<alus.DominoALU object at 0x7f2f8b921640>, 6), (<alus.DominoALU object at 0x7f2f8b921670>, 7), (<alus.DominoALU object at 0x7f2f8b9216a0>, 8), (<alus.DominoALU object at 0x7f2f8b9216d0>, 9), (<alus.DominoALU object at 0x7f2f8b921700>, 10), (<alus.DominoALU object at 0x7f2f8b921730>, 11), (<alus.DominoALU object at 0x7f2f8b921760>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f2f8b968e50>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 3), (0, 6), (0, 7), (0, 9), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_002', 'p_state_001', 'p__br_tmp6', 'state_0', 'p_state_000', 'p__br_tmp7'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 31)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - 0) < 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 11, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 2, 'opcode': 19, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_2', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '0'}, {'id': 5, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': '1', 'result': '_out_s12_2', 'immediate_operand': '2'}, {'id': 6, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_state_000', 'result': '_out_s12_3', 'immediate_operand': '3'}, {'id': 7, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_4', 'immediate_operand': '0'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '2'}, {'id': 9, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_5', 'immediate_operand': '3'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_6', 'immediate_operand': '0'}, {'id': 11, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_7', 'immediate_operand': '0'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '1'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 3), (0, 6), (0, 7), (0, 9), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_002', 'p_state_001', 'p__br_tmp6', 'state_0', 'p_state_000', 'p__br_tmp7'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 31)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - 0) < 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 11, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 2, 'opcode': 19, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_2', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '0'}, {'id': 5, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': '1', 'result': '_out_s12_2', 'immediate_operand': '2'}, {'id': 6, 'opcode': 15, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_state_000', 'result': '_out_s12_3', 'immediate_operand': '3'}, {'id': 7, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_4', 'immediate_operand': '0'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '2'}, {'id': 9, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_5', 'immediate_operand': '3'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_6', 'immediate_operand': '0'}, {'id': 11, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_7', 'immediate_operand': '0'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '1'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '30'}]}
Time taken: 19.527206897735596 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_4_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

lhs p__br_tmp4 rhs !((p_pkt_0<p_state_000)&&(p_state_000>1))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp4 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp5 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_2', 'p_state_001', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fb711ce26a0>, 'write': <dependencyGraph.Statement object at 0x7fb711d1c940>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb711ce26a0>, 'write': <dependencyGraph.Statement object at 0x7fb711d1c940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) stmts len 1
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb711d1cb50>, <dependencyGraph.Codelet object at 0x7fb711d1cb20>, <dependencyGraph.Codelet object at 0x7fb711d1c130>]
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb711d1c130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5', 'p_state_001'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
2   p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
3   p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
4   p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_pkt_2', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  11
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,5,7,9,11,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 5), (0, 7), (0, 9), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 256 rows, 184 columns and 598 nonzeros
Model fingerprint: 0x7c69d53b
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 21 rows and 0 columns
Presolve removed 0 rows and 39 columns
Presolve time: 0.01s
Presolved: 277 rows, 145 columns, 656 nonzeros
Variable types: 0 continuous, 145 integer (130 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 0
T0_A_3 0
T0_A_4 2
T0_A_5 1
T0_A_6 0
T0_A_7 1
T0_A_8 2
T0_A_9 1
T0_A_10 0
T0_A_11 1
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  0.0
action:  2
num stages:  4
stage:  0.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  0.0
action:  6
num stages:  4
stage:  1.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  0.0
action:  10
num stages:  4
stage:  1.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  0.0
 > get_alu_stage: table  0 , alu_id =  3 :  0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
alu  7  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  0.0
 > get_alu_stage: table  0 , alu_id =  10 :  0.0
alu  10  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
alu  11  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7fb711cd41f0>, 0), (<alus.DominoALU object at 0x7fb711cd42e0>, 1), (<alus.DominoALU object at 0x7fb711cd4310>, 2), (<alus.DominoALU object at 0x7fb711cd4370>, 3), (<alus.DominoALU object at 0x7fb711cd45b0>, 4), (<alus.DominoALU object at 0x7fb711cd4610>, 5), (<alus.DominoALU object at 0x7fb711cd4640>, 6), (<alus.DominoALU object at 0x7fb711cd4670>, 7), (<alus.DominoALU object at 0x7fb711cd46a0>, 8), (<alus.DominoALU object at 0x7fb711cd46d0>, 9), (<alus.DominoALU object at 0x7fb711cd4700>, 10), (<alus.DominoALU object at 0x7fb711cd4730>, 11), (<alus.DominoALU object at 0x7fb711cd4760>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fb711d1cee0>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 5), (0, 7), (0, 9), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p__br_tmp4', 'p_state_000', 'p_state_002', 'state_0', 'p__br_tmp5', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - 0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) != 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) < 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 8, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 2, 'opcode': 3, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 3, 'opcode': 12, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '30'}, {'id': 4, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '1'}, {'id': 5, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_2', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_3', 'immediate_operand': '0'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_4', 'immediate_operand': '4'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '28'}, {'id': 9, 'opcode': 10, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_5', 'immediate_operand': '0'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_6', 'immediate_operand': '31'}, {'id': 11, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_2', 'operand2': 'p_state_000', 'result': '_out_s12_7', 'immediate_operand': '28'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '31'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '13'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 5), (0, 7), (0, 9), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p__br_tmp4', 'p_state_000', 'p_state_002', 'state_0', 'p__br_tmp5', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((pkt_0 - 0) < 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) != 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 + pkt_1);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) < 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 8, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 2, 'opcode': 3, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '5'}, {'id': 3, 'opcode': 12, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '30'}, {'id': 4, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '1'}, {'id': 5, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_2', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': '_out_s12_3', 'immediate_operand': '0'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_4', 'immediate_operand': '4'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '28'}, {'id': 9, 'opcode': 10, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_5', 'immediate_operand': '0'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_6', 'immediate_operand': '31'}, {'id': 11, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_2', 'operand2': 'p_state_000', 'result': '_out_s12_7', 'immediate_operand': '28'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '31'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '13'}]}
Time taken: 310.31847310066223 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_5_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

lhs p__br_tmp4 rhs !((p_pkt_0<p_state_000)&&(p_state_000>1))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp4 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp5 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_2', 'p_state_001', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f7b4d46c6a0>, 'write': <dependencyGraph.Statement object at 0x7f7b4d4a6940>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f7b4d46c6a0>, 'write': <dependencyGraph.Statement object at 0x7f7b4d4a6940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) stmts len 1
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7b4d4a6b50>, <dependencyGraph.Codelet object at 0x7f7b4d4a6b20>, <dependencyGraph.Codelet object at 0x7f7b4d4a6130>]
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f7b4d4a6130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5', 'p_state_001'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
2   p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
3   p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
4   p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
5   state_0 = p_state_002
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_pkt_2', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  10
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  11
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,3,9,10,11,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 3), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 256 rows, 184 columns and 598 nonzeros
Model fingerprint: 0x75ea6f56
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 23 rows and 0 columns
Presolve removed 0 rows and 38 columns
Presolve time: 0.01s
Presolved: 279 rows, 146 columns, 661 nonzeros
Variable types: 0 continuous, 146 integer (131 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 0
T0_A_3 1
T0_A_4 2
T0_A_5 0
T0_A_6 0
T0_A_7 0
T0_A_8 2
T0_A_9 1
T0_A_10 1
T0_A_11 1
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  0.0
action:  5
num stages:  4
stage:  0.0
action:  6
num stages:  4
stage:  0.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  1.0
action:  10
num stages:  4
stage:  1.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  0.0
 > get_alu_stage: table  0 , alu_id =  5 :  0.0
alu  5  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
alu  10  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
alu  11  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7f7b4d45d1f0>, 0), (<alus.DominoALU object at 0x7f7b4d45d2e0>, 1), (<alus.DominoALU object at 0x7f7b4d45d310>, 2), (<alus.DominoALU object at 0x7f7b4d45d370>, 3), (<alus.DominoALU object at 0x7f7b4d45d5b0>, 4), (<alus.DominoALU object at 0x7f7b4d45d610>, 5), (<alus.DominoALU object at 0x7f7b4d45d640>, 6), (<alus.DominoALU object at 0x7f7b4d45d670>, 7), (<alus.DominoALU object at 0x7f7b4d45d6a0>, 8), (<alus.DominoALU object at 0x7f7b4d45d6d0>, 9), (<alus.DominoALU object at 0x7f7b4d45d700>, 10), (<alus.DominoALU object at 0x7f7b4d45d730>, 11), (<alus.DominoALU object at 0x7f7b4d45d760>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f7b4d4a6ee0>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 3), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['state_0', 'p_state_001', 'p_state_002', 'p__br_tmp4', 'p_state_000', 'p__br_tmp5'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - 0) < 5)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) < 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 2, 'opcode': 8, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_2', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 3, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '14'}, {'id': 5, 'opcode': 17, 'operand0': '1', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': '_out_s12_2', 'immediate_operand': '0'}, {'id': 6, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': '_out_s12_3', 'immediate_operand': '1'}, {'id': 7, 'opcode': 19, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_2', 'result': '_out_s12_4', 'immediate_operand': '31'}, {'id': 8, 'opcode': 3, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '0'}, {'id': 9, 'opcode': 31, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_2', 'result': '_out_s12_5', 'immediate_operand': '4'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_6', 'immediate_operand': '30'}, {'id': 11, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_7', 'immediate_operand': '29'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '31'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 3), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['state_0', 'p_state_001', 'p_state_002', 'p__br_tmp4', 'p_state_000', 'p__br_tmp5'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - 0) < 5)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) < 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 2, 'opcode': 8, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_2', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 3, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '14'}, {'id': 5, 'opcode': 17, 'operand0': '1', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': '_out_s12_2', 'immediate_operand': '0'}, {'id': 6, 'opcode': 5, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': '_out_s12_3', 'immediate_operand': '1'}, {'id': 7, 'opcode': 19, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_2', 'result': '_out_s12_4', 'immediate_operand': '31'}, {'id': 8, 'opcode': 3, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '0'}, {'id': 9, 'opcode': 31, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_2', 'result': '_out_s12_5', 'immediate_operand': '4'}, {'id': 10, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_6', 'immediate_operand': '30'}, {'id': 11, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_7', 'immediate_operand': '29'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '31'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '31'}]}
Time taken: 28.100006580352783 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_6_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

lhs p__br_tmp8 rhs !((p_pkt_0<p_state_000)&&(p_state_000>1))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp8 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

lhs p__br_tmp9 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp9 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001);

lhs p_state_002 rhs p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_pkt_2', 'p_state_001', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
RAW p_state_000 = state_0; p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f7de6de56a0>, 'write': <dependencyGraph.Statement object at 0x7f7de6e1f940>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f7de6de56a0>, 'write': <dependencyGraph.Statement object at 0x7f7de6e1f940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) stmts len 1
p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) stmts len 1
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7de6e1fb50>, <dependencyGraph.Codelet object at 0x7f7de6e1fb20>, <dependencyGraph.Codelet object at 0x7f7de6e1f130>]
p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f7de6e1f130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp8', 'p__br_tmp9', 'p_state_001'}
elements in v_outputs:  {'p__br_tmp8', 'p__br_tmp9', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
2   p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
3   p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
4   p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001)
5   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001)
 rhs_vars:  ['p__br_tmp9', 'p_pkt_2', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp9  not in state vars
 statement:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp8', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp8    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp9    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
finding node for codelet:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
codelet  p_state_000 = state_0 p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
finding node for codelet:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000)
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
u:  p_state_000 = state_0; p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp9 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v:  p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp9 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_pkt_10 = p__br_tmp8 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp8 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_state_001 = p__br_tmp8 ? (p_pkt_0+p_pkt_2) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  10
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,5,6,7,10,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2), (0, 5), (0, 6), (0, 7), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 257 rows, 184 columns and 600 nonzeros
Model fingerprint: 0x0c87afa2
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 19 rows and 0 columns
Presolve removed 0 rows and 40 columns
Presolve time: 0.01s
Presolved: 276 rows, 144 columns, 653 nonzeros
Variable types: 0 continuous, 144 integer (129 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 0
T0_A_4 2
T0_A_5 1
T0_A_6 1
T0_A_7 1
T0_A_8 2
T0_A_9 0
T0_A_10 1
T0_A_11 0
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  0.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  1.0
action:  6
num stages:  4
stage:  1.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  0.0
action:  9
num stages:  4
stage:  1.0
action:  10
num stages:  4
stage:  0.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  0.0
 > get_alu_stage: table  0 , alu_id =  3 :  0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
alu  7  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  0.0
 > get_alu_stage: table  0 , alu_id =  9 :  0.0
alu  9  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
alu  10  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  11 :  0.0
 > get_alu_stage: table  0 , alu_id =  11 :  0.0
alu  11  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7f7de6dd71f0>, 0), (<alus.DominoALU object at 0x7f7de6dd72e0>, 1), (<alus.DominoALU object at 0x7f7de6dd7310>, 2), (<alus.DominoALU object at 0x7f7de6dd7370>, 3), (<alus.DominoALU object at 0x7f7de6dd75b0>, 4), (<alus.DominoALU object at 0x7f7de6dd7610>, 5), (<alus.DominoALU object at 0x7f7de6dd7640>, 6), (<alus.DominoALU object at 0x7f7de6dd7670>, 7), (<alus.DominoALU object at 0x7f7de6dd76a0>, 8), (<alus.DominoALU object at 0x7f7de6dd76d0>, 9), (<alus.DominoALU object at 0x7f7de6dd7700>, 10), (<alus.DominoALU object at 0x7f7de6dd7730>, 11), (<alus.DominoALU object at 0x7f7de6dd7760>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f7de6e1fee0>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 5), (0, 6), (0, 7), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_000', 'p_state_002', 'p__br_tmp9', 'p_state_001', 'p__br_tmp8', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 31)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + 31;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 4, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 2, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_2', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '5'}, {'id': 5, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_2', 'immediate_operand': '0'}, {'id': 6, 'opcode': 3, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_3', 'immediate_operand': '0'}, {'id': 7, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_2', 'result': '_out_s12_4', 'immediate_operand': '3'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '18'}, {'id': 9, 'opcode': 10, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_2', 'result': '_out_s12_5', 'immediate_operand': '30'}, {'id': 10, 'opcode': 4, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_2', 'result': '_out_s12_6', 'immediate_operand': '16'}, {'id': 11, 'opcode': 5, 'operand0': '1', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_1', 'result': '_out_s12_7', 'immediate_operand': '18'}, {'id': 12, 'opcode': 15, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '4'}, {'id': 13, 'opcode': 1, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 5), (0, 6), (0, 7), (0, 10), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_000', 'p_state_002', 'p__br_tmp9', 'p_state_001', 'p__br_tmp8', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_0) - pkt_0) < 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if(((state_0_0 + pkt_1) - pkt_1) < 31)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + 31;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 4, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 2, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': '1', 'operand2': 'p_pkt_2', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '5'}, {'id': 5, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_2', 'immediate_operand': '0'}, {'id': 6, 'opcode': 3, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_3', 'immediate_operand': '0'}, {'id': 7, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_2', 'result': '_out_s12_4', 'immediate_operand': '3'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '18'}, {'id': 9, 'opcode': 10, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_2', 'result': '_out_s12_5', 'immediate_operand': '30'}, {'id': 10, 'opcode': 4, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_2', 'result': '_out_s12_6', 'immediate_operand': '16'}, {'id': 11, 'opcode': 5, 'operand0': '1', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_1', 'result': '_out_s12_7', 'immediate_operand': '18'}, {'id': 12, 'opcode': 15, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '4'}, {'id': 13, 'opcode': 1, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '0'}]}
Time taken: 17.190386533737183 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_7_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1);

lhs p__br_tmp5 rhs (p_pkt_2<p_state_000)&&(p_state_000>1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1);

 is_read_flank: processing rhs_vars =  ['p_pkt_2', 'p_state_000', 'p_state_000']
p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp5 ? (p_state_000) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_000', 'p_pkt_0']
p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_1', 'p_state_000', 'p_state_000']
p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1)));

lhs p__br_tmp6 rhs (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1)))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1)));

 is_read_flank: processing rhs_vars =  ['p_pkt_2', 'p_state_000', 'p_state_000', 'p_pkt_2', 'p_state_001', 'p_state_001']
p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp6 ? (p_pkt_2) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_2', 'p_pkt_00']
p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_1', 'p_pkt_2', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1);
RAW p_state_000 = state_0; p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1)));
RAW p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1); p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
RAW p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1); p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0); p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
RAW p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000); p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1)));
RAW p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001);
RAW p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))); p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
RAW p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))); p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fe82f5a06a0>, 'write': <dependencyGraph.Statement object at 0x7fe82f5da940>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe82f5a06a0>, 'write': <dependencyGraph.Statement object at 0x7fe82f5da940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1) stmts len 1
p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1);
v p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000);
v p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))) stmts len 1
p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1)));
v p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe82f5dab50>, <dependencyGraph.Codelet object at 0x7fe82f5dab20>, <dependencyGraph.Codelet object at 0x7fe82f5da130>]
p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1);
p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000);
p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1)));
p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe82f5da130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p_state_000', 'p__br_tmp6'}
p_state_000  is read flank
elements in v_outputs:  {'p__br_tmp5', 'p_state_000', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1)
2   p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000)
3   p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1)))
4   p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001)
5   state_0 = p_state_002
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001)
 rhs_vars:  ['p__br_tmp6', 'p_pkt_1', 'p_pkt_2', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp5', 'p_pkt_1', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1)))
 rhs_vars:  ['p_pkt_2', 'p_state_000', 'p_state_000', 'p_pkt_2', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1)
 rhs_vars:  ['p_pkt_2', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp6    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1)
codelet  p_state_000 = state_0 p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1) p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000) p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))) p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1)
codelet  p_state_000 = state_0 p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1) p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000) p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))) p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1)
find_codelet for stmt :  p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1)
finding node for codelet:  p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1) p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000) p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))) p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1)))
codelet  p_state_000 = state_0 p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1) p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000) p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))) p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1)))
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1) p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000) p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))) p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1) p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000) p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))) p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1) p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000) p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))) p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1) p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000) p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))) p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1) p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000) p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))) p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1); p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000); p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))); p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
u:  p_state_000 = state_0; p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1); p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000); p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))); p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1);
u:  p_state_000 = state_0; p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1); p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000); p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))); p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1); p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000); p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1))); p_state_002 = p__br_tmp6 ? (p_pkt_1+p_pkt_2) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1)));
u:  p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
u:  p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1)));
v:  p_pkt_01 = p__br_tmp6 ? (p_pkt_2) : (p_pkt_00);
u:  p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1);
v:  p_pkt_00 = p__br_tmp5 ? (p_state_000) : (p_pkt_0);
u:  p__br_tmp5 = (p_pkt_2<p_state_000)&&(p_state_000>1);
v:  p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp5 ? (p_pkt_1+p_state_000) : (p_state_000);
v:  p__br_tmp6 = (!((p_pkt_2<p_state_000)&&(p_state_000>1)))&&(!((p_pkt_2<p_state_001)&&(p_state_001>1)));
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_1', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_1', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_3.sk.out
['comp_6']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  10
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  11
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,3,5,6,9,10,11,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 3), (0, 5), (0, 6), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 258 rows, 184 columns and 602 nonzeros
Model fingerprint: 0xf151438a
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 17 rows and 0 columns
Presolve removed 0 rows and 41 columns
Presolve time: 0.01s
Presolved: 275 rows, 143 columns, 650 nonzeros
Variable types: 0 continuous, 143 integer (128 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 0
T0_A_3 1
T0_A_4 2
T0_A_5 1
T0_A_6 1
T0_A_7 0
T0_A_8 2
T0_A_9 1
T0_A_10 1
T0_A_11 1
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  1.0
action:  6
num stages:  4
stage:  0.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  1.0
action:  10
num stages:  4
stage:  1.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
 > get_alu_stage: table  0 , alu_id =  2 :  0.0
alu  2  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
 > get_alu_stage: table  0 , alu_id =  7 :  0.0
alu  7  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
alu  10  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
alu  11  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7fe82f59a1c0>, 0), (<alus.DominoALU object at 0x7fe82f59a280>, 1), (<alus.DominoALU object at 0x7fe82f59a2b0>, 2), (<alus.DominoALU object at 0x7fe82f59a310>, 3), (<alus.DominoALU object at 0x7fe82f59a580>, 4), (<alus.DominoALU object at 0x7fe82f59a5e0>, 5), (<alus.DominoALU object at 0x7fe82f59a610>, 6), (<alus.DominoALU object at 0x7fe82f59a640>, 7), (<alus.DominoALU object at 0x7fe82f59a670>, 8), (<alus.DominoALU object at 0x7fe82f59a6a0>, 9), (<alus.DominoALU object at 0x7fe82f59a6d0>, 10), (<alus.DominoALU object at 0x7fe82f59a700>, 11), (<alus.DominoALU object at 0x7fe82f59a730>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fe82f5dad90>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 3), (0, 5), (0, 6), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_1', 'p_pkt_2'], 'outputs': ['p_state_002', 'p_state_000', 'p_state_001', 'state_0', 'p__br_tmp6', 'p__br_tmp5'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) == 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) > 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_1) > 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 10, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12', 'immediate_operand': '13'}, {'id': 2, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '27'}, {'id': 3, 'opcode': 21, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '30'}, {'id': 4, 'opcode': 19, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '27'}, {'id': 5, 'opcode': 11, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_2', 'immediate_operand': '2'}, {'id': 6, 'opcode': 1, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_0', 'result': '_out_s12_3', 'immediate_operand': '31'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_2', 'result': '_out_s12_4', 'immediate_operand': '31'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '1'}, {'id': 9, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_2', 'operand2': 'p_state_000', 'result': '_out_s12_5', 'immediate_operand': '31'}, {'id': 10, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_0', 'result': '_out_s12_6', 'immediate_operand': '31'}, {'id': 11, 'opcode': 2, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': '_out_s12_7', 'immediate_operand': '0'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '2'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 3), (0, 5), (0, 6), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_1', 'p_pkt_2'], 'outputs': ['p_state_002', 'p_state_000', 'p_state_001', 'state_0', 'p__br_tmp6', 'p__br_tmp5'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_1) == 1)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if(((state_0_0 + pkt_1) - 0) > 2)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + (pkt_0 - 0);\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_1) > 1)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = state_0_0 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 10, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12', 'immediate_operand': '13'}, {'id': 2, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '27'}, {'id': 3, 'opcode': 21, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_1', 'immediate_operand': '30'}, {'id': 4, 'opcode': 19, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '27'}, {'id': 5, 'opcode': 11, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_2', 'immediate_operand': '2'}, {'id': 6, 'opcode': 1, 'operand0': 'p_state_000', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_0', 'result': '_out_s12_3', 'immediate_operand': '31'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_2', 'result': '_out_s12_4', 'immediate_operand': '31'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '1'}, {'id': 9, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_2', 'operand2': 'p_state_000', 'result': '_out_s12_5', 'immediate_operand': '31'}, {'id': 10, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_0', 'result': '_out_s12_6', 'immediate_operand': '31'}, {'id': 11, 'opcode': 2, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': '_out_s12_7', 'immediate_operand': '0'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '2'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 11.37246060371399 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_8_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

lhs p__br_tmp4 rhs !((p_pkt_0<p_state_000)&&(p_state_000>1))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp4 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp5 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_2', 'p_state_001', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f78758716a0>, 'write': <dependencyGraph.Statement object at 0x7f78758ab940>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f78758716a0>, 'write': <dependencyGraph.Statement object at 0x7f78758ab940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) stmts len 1
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f78758abb50>, <dependencyGraph.Codelet object at 0x7f78758abb20>, <dependencyGraph.Codelet object at 0x7f78758ab130>]
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f78758ab130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p_state_001', 'p__br_tmp4'}
elements in v_outputs:  {'p__br_tmp5', 'p_state_001', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
2   p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
3   p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
4   p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
5   state_0 = p_state_002
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_pkt_2', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
final_output:  _out_s20_1
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s12_2
   alu output:  _out_s20
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s12_5
   alu output:  _out_s20_0
   alu output:  _out_s20_1
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  10
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  3  and ALU  5
 *** found stateless dependency between ALU  4  and ALU  5
 *** found stateless dependency between ALU  5  and ALU  10
 *** found stateless dependency between ALU  6  and ALU  9
 *** found stateless dependency between ALU  7  and ALU  9
 *** found stateless dependency between ALU  8  and ALU  9
 *** found stateless dependency between ALU  9  and ALU  10
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  6
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,2,3,6,7,
+---> dependencies of ALU  1 : 
10,
+---> dependencies of ALU  2 : 
5,
+---> dependencies of ALU  3 : 
5,
+---> dependencies of ALU  4 : 
5,
+---> dependencies of ALU  5 : 
10,
+---> dependencies of ALU  6 : 
9,
+---> dependencies of ALU  7 : 
9,
+---> dependencies of ALU  8 : 
9,
+---> dependencies of ALU  9 : 
10,
+---> dependencies of ALU  10 : 

# alus: =  11
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  1  and  10
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  10
 * gen_dependency_list: dependency between  6  and  9
 * gen_dependency_list: dependency between  7  and  9
 * gen_dependency_list: dependency between  8  and  9
 * gen_dependency_list: dependency between  9  and  10
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 11}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1), (0, 2), (0, 3), (0, 6), (0, 7), (1, 10), (2, 5), (3, 5), (4, 5), (5, 10), (6, 9), (7, 9), (8, 9), (9, 10)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 205 rows, 145 columns and 472 nonzeros
Model fingerprint: 0xb5fc67de
Model has 132 general constraints
Variable types: 0 continuous, 145 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 13 rows and 0 columns
Presolve removed 0 rows and 31 columns
Presolve time: 0.01s
Presolved: 218 rows, 114 columns, 516 nonzeros
Variable types: 0 continuous, 114 integer (102 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 1
T0_A_3 1
T0_A_4 0
T0_A_5 2
T0_A_6 1
T0_A_7 1
T0_A_8 0
T0_A_9 2
T0_A_10 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  1.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  0.0
action:  4
num stages:  4
stage:  2.0
action:  5
num stages:  4
stage:  1.0
action:  6
num stages:  4
stage:  1.0
action:  7
num stages:  4
stage:  0.0
action:  8
num stages:  4
stage:  2.0
action:  9
num stages:  4
stage:  3.0
action:  10
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  0.0
 > get_alu_stage: table  0 , alu_id =  4 :  0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
 > get_alu_stage: table  0 , alu_id =  5 :  2.0
alu  5  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
 > get_alu_stage: table  0 , alu_id =  6 :  1.0
alu  6  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
alu  7  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  8 :  0.0
 > get_alu_stage: table  0 , alu_id =  8 :  0.0
alu  8  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  9 :  2.0
 > get_alu_stage: table  0 , alu_id =  9 :  2.0
alu  9  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  10 :  3.0
 > get_alu_stage: table  0 , alu_id =  10 :  3.0
alu  10  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  10  ;  [(<alus.DominoALU object at 0x7f7875864220>, 0), (<alus.DominoALU object at 0x7f78758642e0>, 1), (<alus.DominoALU object at 0x7f7875864310>, 2), (<alus.DominoALU object at 0x7f7875864370>, 3), (<alus.DominoALU object at 0x7f78758645b0>, 4), (<alus.DominoALU object at 0x7f7875864610>, 5), (<alus.DominoALU object at 0x7f7875864640>, 6), (<alus.DominoALU object at 0x7f7875864670>, 7), (<alus.DominoALU object at 0x7f78758646a0>, 8), (<alus.DominoALU object at 0x7f78758646d0>, 9)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f78758abbb0>, 0)]
 * gen_dependency_list: dependency between  0  and  1
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  6
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  1  and  10
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  5
 * gen_dependency_list: dependency between  4  and  5
 * gen_dependency_list: dependency between  5  and  10
 * gen_dependency_list: dependency between  6  and  9
 * gen_dependency_list: dependency between  7  and  9
 * gen_dependency_list: dependency between  8  and  9
 * gen_dependency_list: dependency between  9  and  10
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 3), (0, 6), (0, 7), (1, 10), (2, 5), (3, 5), (4, 5), (5, 10), (6, 9), (7, 9), (8, 9), (9, 10)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_002', 'p_state_001', 'p_state_000', 'p__br_tmp4', 'state_0', 'p__br_tmp5'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) < 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) < 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) < 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '5'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 11, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 4, 'opcode': 4, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_2', 'result': '_out_s12_2', 'immediate_operand': '31'}, {'id': 5, 'opcode': 4, 'operand0': '_out_s12_0', 'operand1': '_out_s12_1', 'operand2': '_out_s12_2', 'result': '_out_s20', 'immediate_operand': '0'}, {'id': 6, 'opcode': 11, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_3', 'immediate_operand': '2'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_4', 'immediate_operand': '31'}, {'id': 8, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_5', 'immediate_operand': '5'}, {'id': 9, 'opcode': 14, 'operand0': '_out_s12_3', 'operand1': '_out_s12_4', 'operand2': '_out_s12_5', 'result': '_out_s20_0', 'immediate_operand': '1'}, {'id': 10, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s20', 'operand2': '_out_s20_0', 'result': 'p_pkt_11', 'immediate_operand': '10'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 1), (0, 2), (0, 3), (0, 6), (0, 7), (1, 10), (2, 5), (3, 5), (4, 5), (5, 10), (6, 9), (7, 9), (8, 9), (9, 10)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_002', 'p_state_001', 'p_state_000', 'p__br_tmp4', 'state_0', 'p__br_tmp5'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((0 - pkt_0) < 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) < 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - pkt_0) < 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + (pkt_1 - 0);\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '5'}, {'id': 2, 'opcode': 15, 'operand0': '1', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 3, 'opcode': 11, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': '1', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 4, 'opcode': 4, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_2', 'result': '_out_s12_2', 'immediate_operand': '31'}, {'id': 5, 'opcode': 4, 'operand0': '_out_s12_0', 'operand1': '_out_s12_1', 'operand2': '_out_s12_2', 'result': '_out_s20', 'immediate_operand': '0'}, {'id': 6, 'opcode': 11, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_3', 'immediate_operand': '2'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_4', 'immediate_operand': '31'}, {'id': 8, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_5', 'immediate_operand': '5'}, {'id': 9, 'opcode': 14, 'operand0': '_out_s12_3', 'operand1': '_out_s12_4', 'operand2': '_out_s12_5', 'result': '_out_s20_0', 'immediate_operand': '1'}, {'id': 10, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s20', 'operand2': '_out_s20_0', 'result': 'p_pkt_11', 'immediate_operand': '10'}]}
Time taken: 12.425790309906006 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_9_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

lhs p__br_tmp2 rhs !((p_pkt_0<p_state_000)&&(p_state_000>1))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp2 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

lhs p__br_tmp3 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp3 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001);

lhs p_state_002 rhs p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_2', 'p_state_001', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7feb629d86a0>, 'write': <dependencyGraph.Statement object at 0x7feb62a12940>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7feb629d86a0>, 'write': <dependencyGraph.Statement object at 0x7feb62a12940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) stmts len 1
p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) stmts len 1
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7feb62a12b50>, <dependencyGraph.Codelet object at 0x7feb62a12b20>, <dependencyGraph.Codelet object at 0x7feb62a12130>]
p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7feb62a12130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp2', 'p__br_tmp3'}
elements in v_outputs:  {'p_state_001', 'p__br_tmp2', 'p__br_tmp3'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
2   p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
3   p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
4   p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001)
5   state_0 = p_state_002
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001)
 rhs_vars:  ['p__br_tmp3', 'p_pkt_2', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp3  not in state vars
 statement:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp2    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp3    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
finding node for codelet:  p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
finding node for codelet:  p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
finding node for codelet:  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000)
finding node for codelet:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
codelet  p_state_000 = state_0 p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
u:  p_state_000 = state_0; p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp3 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v:  p_pkt_11 = p__br_tmp3 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_pkt_10 = p__br_tmp2 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp2 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_state_001 = p__br_tmp2 ? (p_pkt_0+p_pkt_2) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  11  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  12  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  13  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
final_output:  _out_s20_2
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s12_6
   alu output:  _out_s12_7
   alu output:  _out_s20_1
   alu output:  _out_s20_2
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  13
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  13
 *** found stateless dependency between ALU  9  and ALU  12
 *** found stateless dependency between ALU  10  and ALU  12
 *** found stateless dependency between ALU  11  and ALU  12
 *** found stateless dependency between ALU  12  and ALU  13
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  9
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  10
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  11
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6', 11: 'comp_6', 12: 'comp_6', 13: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,5,7,9,10,11,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
13,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
13,
+---> dependencies of ALU  9 : 
12,
+---> dependencies of ALU  10 : 
12,
+---> dependencies of ALU  11 : 
12,
+---> dependencies of ALU  12 : 
13,
+---> dependencies of ALU  13 : 

# alus: =  14
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 14}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: Adding var  T0_A_11
ILP_Gurobi: Adding var  T0_A_12
ILP_Gurobi: Adding var  T0_A_13
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 5), (0, 7), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 257 rows, 184 columns and 600 nonzeros
Model fingerprint: 0x7e1dbec9
Model has 168 general constraints
Variable types: 0 continuous, 184 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 19 rows and 0 columns
Presolve removed 0 rows and 40 columns
Presolve time: 0.01s
Presolved: 276 rows, 144 columns, 653 nonzeros
Variable types: 0 continuous, 144 integer (129 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.02 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 0
T0_A_2 1
T0_A_3 0
T0_A_4 2
T0_A_5 1
T0_A_6 0
T0_A_7 1
T0_A_8 2
T0_A_9 1
T0_A_10 1
T0_A_11 1
T0_A_12 2
T0_A_13 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  0.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  0.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  0.0
action:  6
num stages:  4
stage:  1.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  1.0
action:  9
num stages:  4
stage:  1.0
action:  10
num stages:  4
stage:  1.0
action:  11
num stages:  4
stage:  2.0
action:  12
num stages:  4
stage:  3.0
action:  13
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  0.0
 > get_alu_stage: table  0 , alu_id =  1 :  0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  0.0
 > get_alu_stage: table  0 , alu_id =  3 :  0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
 > get_alu_stage: table  0 , alu_id =  6 :  0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
alu  7  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
 > get_alu_stage: table  0 , alu_id =  9 :  1.0
alu  9  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
 > get_alu_stage: table  0 , alu_id =  10 :  1.0
alu  10  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
 > get_alu_stage: table  0 , alu_id =  11 :  1.0
alu  11  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
 > get_alu_stage: table  0 , alu_id =  12 :  2.0
alu  12  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
 > get_alu_stage: table  0 , alu_id =  13 :  3.0
alu  13  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  13  ;  [(<alus.DominoALU object at 0x7feb629cb220>, 0), (<alus.DominoALU object at 0x7feb629cb2e0>, 1), (<alus.DominoALU object at 0x7feb629cb310>, 2), (<alus.DominoALU object at 0x7feb629cb370>, 3), (<alus.DominoALU object at 0x7feb629cb5b0>, 4), (<alus.DominoALU object at 0x7feb629cb610>, 5), (<alus.DominoALU object at 0x7feb629cb640>, 6), (<alus.DominoALU object at 0x7feb629cb670>, 7), (<alus.DominoALU object at 0x7feb629cb6a0>, 8), (<alus.DominoALU object at 0x7feb629cb6d0>, 9), (<alus.DominoALU object at 0x7feb629cb700>, 10), (<alus.DominoALU object at 0x7feb629cb730>, 11), (<alus.DominoALU object at 0x7feb629cb760>, 12)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7feb62a12e50>, 0)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  0  and  9
 * gen_dependency_list: dependency between  0  and  10
 * gen_dependency_list: dependency between  0  and  11
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  13
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  13
 * gen_dependency_list: dependency between  9  and  12
 * gen_dependency_list: dependency between  10  and  12
 * gen_dependency_list: dependency between  11  and  12
 * gen_dependency_list: dependency between  12  and  13
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 2), (0, 5), (0, 7), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_002', 'state_0', 'p__br_tmp2', 'p__br_tmp3', 'p_state_001', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) > 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - pkt_1) != 21)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 21;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 5, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 2, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 3, 'opcode': 1, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_2', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '1'}, {'id': 5, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_2', 'immediate_operand': '3'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_3', 'immediate_operand': '28'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_4', 'immediate_operand': '10'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '16'}, {'id': 9, 'opcode': 12, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_5', 'immediate_operand': '0'}, {'id': 10, 'opcode': 1, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_6', 'immediate_operand': '4'}, {'id': 11, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_7', 'immediate_operand': '2'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '9'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '31'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 2), (0, 5), (0, 7), (0, 9), (0, 10), (0, 11), (1, 4), (2, 4), (3, 4), (4, 13), (5, 8), (6, 8), (7, 8), (8, 13), (9, 12), (10, 12), (11, 12), (12, 13)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p_state_002', 'state_0', 'p__br_tmp2', 'p__br_tmp3', 'p_state_001', 'p_state_000'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if((state_0_0 - pkt_0) > 0)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - 0) > 1)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((pkt_1 - pkt_1) != 21)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_0 + pkt_1;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + 21;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 5, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 2, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 3, 'opcode': 1, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_2', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 4, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '1'}, {'id': 5, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_2', 'immediate_operand': '3'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_1', 'result': '_out_s12_3', 'immediate_operand': '28'}, {'id': 7, 'opcode': 14, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_1', 'result': '_out_s12_4', 'immediate_operand': '10'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '16'}, {'id': 9, 'opcode': 12, 'operand0': '1', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_5', 'immediate_operand': '0'}, {'id': 10, 'opcode': 1, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_2', 'result': '_out_s12_6', 'immediate_operand': '4'}, {'id': 11, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_7', 'immediate_operand': '2'}, {'id': 12, 'opcode': 14, 'operand0': '_out_s12_5', 'operand1': '_out_s12_6', 'operand2': '_out_s12_7', 'result': '_out_s20_1', 'immediate_operand': '9'}, {'id': 13, 'opcode': 14, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s20_1', 'result': 'p_pkt_11', 'immediate_operand': '31'}]}
Time taken: 69.31587386131287 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq, program name: stfq_equivalent_10_canonicalizer. Grammar: nested_ifs. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU nested_ifs
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

lhs p__br_tmp4 rhs !((p_pkt_0<p_state_000)&&(p_state_000>1))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_state_000']
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

lhs p_pkt_10 rhs p__br_tmp4 ? (p_pkt_0) : (p_pkt_1)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_1']
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

lhs p_pkt_11 rhs p__br_tmp5 ? (p_state_001) : (p_pkt_10)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001', 'p_pkt_10']
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_2', 'p_state_001', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
RAW p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
RAW p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fe503aaa6a0>, 'write': <dependencyGraph.Statement object at 0x7fe503ae4940>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe503aaa6a0>, 'write': <dependencyGraph.Statement object at 0x7fe503ae4940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10) stmts len 1
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
SCC 1
v p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1) stmts len 1
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) stmts len 1
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe503ae4b50>, <dependencyGraph.Codelet object at 0x7fe503ae4b20>, <dependencyGraph.Codelet object at 0x7fe503ae4130>]
p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
p_state_000 = state_0;
p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe503ae4130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p_state_001', 'p__br_tmp4', 'p__br_tmp5'}
elements in v_outputs:  {'p_state_001', 'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
2   p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
3   p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
4   p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
 rhs_vars:  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001', 'p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_pkt_2', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_pkt_2', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  None
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
-----------number of nodes in the graph:  5
---------------number of nodes in the graph:  5
finding node for codelet:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
find_codelet for stmt :  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1))
finding node for codelet:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
find_codelet for stmt :  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000)
finding node for codelet:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)) p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000) p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1) p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_11'}
{'p_pkt_11'}
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1)); p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1); p_state_002 = p__br_tmp5 ? (p_pkt_2+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)&&(p_state_000>1)&&(p_state_001>1);
v:  p_pkt_11 = p__br_tmp5 ? (p_state_001) : (p_pkt_10);
u:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_pkt_10 = p__br_tmp4 ? (p_pkt_0) : (p_pkt_1);
u:  p__br_tmp4 = !((p_pkt_0<p_state_000)&&(p_state_000>1));
v:  p_state_001 = p__br_tmp4 ? (p_pkt_0+p_pkt_2) : (p_state_000);
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0', 'p_pkt_2']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_2', 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  nested_ifs :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_2.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
running sketch, bnd = 3
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/stfq/stfq_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_11_bnd_3.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_11 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  7  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  8  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  9  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  10  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_11_bnd_3.sk.out
['comp_6']
final_output:  _out_s20_1
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
   alu output:  _out_s12_2
   alu output:  _out_s12_3
   alu output:  _out_s12_4
   alu output:  _out_s20_0
   alu output:  _out_s12_5
   alu output:  _out_s20_1
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  3  and ALU  4
 *** found stateless dependency between ALU  4  and ALU  10
 *** found stateless dependency between ALU  5  and ALU  8
 *** found stateless dependency between ALU  6  and ALU  8
 *** found stateless dependency between ALU  7  and ALU  8
 *** found stateless dependency between ALU  8  and ALU  10
 *** found stateless dependency between ALU  9  and ALU  10
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  2
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  3
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  5
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  7
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6', 2: 'comp_6', 3: 'comp_6', 4: 'comp_6', 5: 'comp_6', 6: 'comp_6', 7: 'comp_6', 8: 'comp_6', 9: 'comp_6', 10: 'comp_6'}
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,3,5,7,
+---> dependencies of ALU  1 : 
4,
+---> dependencies of ALU  2 : 
4,
+---> dependencies of ALU  3 : 
4,
+---> dependencies of ALU  4 : 
10,
+---> dependencies of ALU  5 : 
8,
+---> dependencies of ALU  6 : 
8,
+---> dependencies of ALU  7 : 
8,
+---> dependencies of ALU  8 : 
10,
+---> dependencies of ALU  9 : 
10,
+---> dependencies of ALU  10 : 

# alus: =  11
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  10
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  10
 * gen_dependency_list: dependency between  9  and  10
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 11}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: Adding var  T0_A_7
ILP_Gurobi: Adding var  T0_A_8
ILP_Gurobi: Adding var  T0_A_9
ILP_Gurobi: Adding var  T0_A_10
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (0, 3), (0, 5), (0, 7), (1, 4), (2, 4), (3, 4), (4, 10), (5, 8), (6, 8), (7, 8), (8, 10), (9, 10)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 204 rows, 145 columns and 470 nonzeros
Model fingerprint: 0x33f02f15
Model has 132 general constraints
Variable types: 0 continuous, 145 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 15 rows and 0 columns
Presolve removed 0 rows and 30 columns
Presolve time: 0.01s
Presolved: 219 rows, 115 columns, 519 nonzeros
Variable types: 0 continuous, 115 integer (103 binary)
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.01 work units)
Thread count was 28 (of 56 available processors)

Solution count 1: 3 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 0
T0_A_2 1
T0_A_3 1
T0_A_4 2
T0_A_5 1
T0_A_6 -0
T0_A_7 1
T0_A_8 2
T0_A_9 0
T0_A_10 3
************************************************
Obj: 3
number of stages:  4
stage:  -0.0
action:  0
num stages:  4
stage:  0.0
action:  1
num stages:  4
stage:  1.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  2.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  -0.0
action:  6
num stages:  4
stage:  1.0
action:  7
num stages:  4
stage:  2.0
action:  8
num stages:  4
stage:  0.0
action:  9
num stages:  4
stage:  3.0
action:  10
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  0.0
 > get_alu_stage: table  0 , alu_id =  1 :  0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
 > get_alu_stage: table  0 , alu_id =  4 :  2.0
alu  4  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
 > get_alu_stage: table  0 , alu_id =  6 :  -0.0
alu  6  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
 > get_alu_stage: table  0 , alu_id =  7 :  1.0
alu  7  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
 > get_alu_stage: table  0 , alu_id =  8 :  2.0
alu  8  is of type  STATELESS ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  9 :  0.0
 > get_alu_stage: table  0 , alu_id =  9 :  0.0
alu  9  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  10 :  3.0
 > get_alu_stage: table  0 , alu_id =  10 :  3.0
alu  10  is of type  STATELESS ; scheduled to stage  3
Codegen processed ALUs:  10  ;  [(<alus.DominoALU object at 0x7fe503a9d220>, 0), (<alus.DominoALU object at 0x7fe503a9d2e0>, 1), (<alus.DominoALU object at 0x7fe503a9d310>, 2), (<alus.DominoALU object at 0x7fe503a9d370>, 3), (<alus.DominoALU object at 0x7fe503a9d5b0>, 4), (<alus.DominoALU object at 0x7fe503a9d610>, 5), (<alus.DominoALU object at 0x7fe503a9d640>, 6), (<alus.DominoALU object at 0x7fe503a9d670>, 7), (<alus.DominoALU object at 0x7fe503a9d6a0>, 8), (<alus.DominoALU object at 0x7fe503a9d6d0>, 9)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fe503ae4e50>, 0)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  0  and  3
 * gen_dependency_list: dependency between  0  and  5
 * gen_dependency_list: dependency between  0  and  7
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  3  and  4
 * gen_dependency_list: dependency between  4  and  10
 * gen_dependency_list: dependency between  5  and  8
 * gen_dependency_list: dependency between  6  and  8
 * gen_dependency_list: dependency between  7  and  8
 * gen_dependency_list: dependency between  8  and  10
 * gen_dependency_list: dependency between  9  and  10
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 2), (0, 3), (0, 5), (0, 7), (1, 4), (2, 4), (3, 4), (4, 10), (5, 8), (6, 8), (7, 8), (8, 10), (9, 10)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p__br_tmp4', 'p_state_000', 'p__br_tmp5', 'p_state_002', 'state_0', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - 0) > 4)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) < 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - 0) < 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_1', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 2, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 3, 'opcode': 6, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_2', 'result': '_out_s12_1', 'immediate_operand': '15'}, {'id': 4, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '1'}, {'id': 5, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_2', 'immediate_operand': '0'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_3', 'immediate_operand': '3'}, {'id': 7, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_4', 'immediate_operand': '0'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '0'}, {'id': 9, 'opcode': 15, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_5', 'immediate_operand': '2'}, {'id': 10, 'opcode': 15, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s12_5', 'result': 'p_pkt_11', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(0, 2), (0, 3), (0, 5), (0, 7), (1, 4), (2, 4), (3, 4), (4, 10), (5, 8), (6, 8), (7, 8), (8, 10), (9, 10)], 'stateful_alus': [{'inputs': ['state_0', 'p_pkt_0', 'p_pkt_2'], 'outputs': ['p__br_tmp4', 'p_state_000', 'p__br_tmp5', 'p_state_002', 'state_0', 'p_state_001'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:132*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(((state_0_0 + pkt_0) - 0) > 4)/*comp_0_..ateful.sk:134*/\n', '  {\n', '    if((state_0_0 - pkt_0) < 0)/*comp_0_..ateful.sk:135*/\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  else\n', '  {\n', '    if((state_0_0 - 0) < 2)/*comp_0_..ateful.sk:141*/\n', '    {\n', '      state_0 = pkt_1 + pkt_0;\n', '    }\n', '    else\n', '    {\n', '      state_0 = state_0_0 + pkt_1;\n', '    }\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 11, 'operand0': 'p_pkt_0', 'operand1': 'p_pkt_2', 'operand2': 'p_pkt_1', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 2, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': '1', 'result': '_out_s12_0', 'immediate_operand': '1'}, {'id': 3, 'opcode': 6, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_2', 'result': '_out_s12_1', 'immediate_operand': '15'}, {'id': 4, 'opcode': 10, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': '_out_s20', 'immediate_operand': '1'}, {'id': 5, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': '_out_s12_2', 'immediate_operand': '0'}, {'id': 6, 'opcode': 14, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_3', 'immediate_operand': '3'}, {'id': 7, 'opcode': 14, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_4', 'immediate_operand': '0'}, {'id': 8, 'opcode': 14, 'operand0': '_out_s12_2', 'operand1': '_out_s12_3', 'operand2': '_out_s12_4', 'result': '_out_s20_0', 'immediate_operand': '0'}, {'id': 9, 'opcode': 15, 'operand0': 'p_pkt_2', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_5', 'immediate_operand': '2'}, {'id': 10, 'opcode': 15, 'operand0': '_out_s20', 'operand1': '_out_s20_0', 'operand2': '_out_s12_5', 'result': 'p_pkt_11', 'immediate_operand': '0'}]}
Time taken: 45.241938829422 s
preprocessor time:
