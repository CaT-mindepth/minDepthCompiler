running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_0', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7f81b7ce4190>, 'write': <dependencyGraph.Statement object at 0x7f81b7ce4520>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f81b7caa6a0>, 'write': <dependencyGraph.Statement object at 0x7f81b7ce4940>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f81b7ce47c0>, 'write': <dependencyGraph.Statement object at 0x7f81b7ce4a00>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f81b7ce4190>, 'write': <dependencyGraph.Statement object at 0x7f81b7ce4520>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f81b7caa6a0>, 'write': <dependencyGraph.Statement object at 0x7f81b7ce4940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f81b7ce47c0>, 'write': <dependencyGraph.Statement object at 0x7f81b7ce4a00>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f81b7ce4a60>, <dependencyGraph.Codelet object at 0x7f81b7ce40a0>, <dependencyGraph.Codelet object at 0x7f81b7ce4a30>, <dependencyGraph.Codelet object at 0x7f81b7ce4af0>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f81b7ce40a0>, <dependencyGraph.Codelet object at 0x7f81b7ce4a30>, <dependencyGraph.Codelet object at 0x7f81b7ce4a60>}
total number of nodes created:  4
state vars {'state_2', 'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_100', 'p_state_000', 'p_state_200', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f81b7ce4fd0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f81b7ce4f70>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f81b7ce4700>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f81b7ce4fd0>, 0), (<alus.DominoGenericSALU object at 0x7f81b7ce4f70>, 1), (<alus.DominoGenericSALU object at 0x7f81b7ce4f40>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_100', 'p_state_101', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['p_state_201', 'p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'state_0', 'p_state_001'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_100', 'p_state_101', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['p_state_201', 'p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'state_0', 'p_state_001'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
Time taken: 3.00411319732666 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7f2cae1b6190>, 'write': <dependencyGraph.Statement object at 0x7f2cae1b6520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f2cae1b67c0>, 'write': <dependencyGraph.Statement object at 0x7f2cae1b6a00>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f2cae17c6a0>, 'write': <dependencyGraph.Statement object at 0x7f2cae1b6940>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f2cae1b6190>, 'write': <dependencyGraph.Statement object at 0x7f2cae1b6520>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f2cae1b67c0>, 'write': <dependencyGraph.Statement object at 0x7f2cae1b6a00>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2cae17c6a0>, 'write': <dependencyGraph.Statement object at 0x7f2cae1b6940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2cae1b6a60>, <dependencyGraph.Codelet object at 0x7f2cae1b60a0>, <dependencyGraph.Codelet object at 0x7f2cae1b6a30>, <dependencyGraph.Codelet object at 0x7f2cae1b6af0>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2cae1b60a0>, <dependencyGraph.Codelet object at 0x7f2cae1b6a30>, <dependencyGraph.Codelet object at 0x7f2cae1b6a60>}
total number of nodes created:  4
state vars {'state_2', 'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_001', 'p_state_101', 'p_state_100', 'p_state_200', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f2cae1b6fd0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f2cae1b6f70>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f2cae1b6700>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f2cae1b6fd0>, 0), (<alus.DominoGenericSALU object at 0x7f2cae1b6f70>, 1), (<alus.DominoGenericSALU object at 0x7f2cae1b6f40>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['state_1', 'p_state_101', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['state_2', 'p_state_201', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['state_1', 'p_state_101', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['state_2', 'p_state_201', 'p_state_200'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
Time taken: 2.106531858444214 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fbe945ba7c0>, 'write': <dependencyGraph.Statement object at 0x7fbe945baa00>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fbe945806a0>, 'write': <dependencyGraph.Statement object at 0x7fbe945ba940>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fbe945ba190>, 'write': <dependencyGraph.Statement object at 0x7fbe945ba520>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fbe945ba7c0>, 'write': <dependencyGraph.Statement object at 0x7fbe945baa00>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fbe945806a0>, 'write': <dependencyGraph.Statement object at 0x7fbe945ba940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fbe945ba190>, 'write': <dependencyGraph.Statement object at 0x7fbe945ba520>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fbe945baa60>, <dependencyGraph.Codelet object at 0x7fbe945ba0a0>, <dependencyGraph.Codelet object at 0x7fbe945baa30>, <dependencyGraph.Codelet object at 0x7fbe945baaf0>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fbe945ba0a0>, <dependencyGraph.Codelet object at 0x7fbe945baa30>, <dependencyGraph.Codelet object at 0x7fbe945baa60>}
total number of nodes created:  4
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_101', 'p_state_201', 'p_state_000', 'p_state_200'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fbe945bafd0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fbe945baf70>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fbe945ba700>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fbe945bafd0>, 0), (<alus.DominoGenericSALU object at 0x7fbe945baf70>, 1), (<alus.DominoGenericSALU object at 0x7fbe945baf40>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_100', 'state_1', 'p_state_101'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['p_state_201', 'p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_100', 'state_1', 'p_state_101'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['p_state_201', 'p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
Time taken: 2.1636972427368164 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_2', 'state_1'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f761b9046a0>, 'write': <dependencyGraph.Statement object at 0x7f761b93e940>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f761b93e190>, 'write': <dependencyGraph.Statement object at 0x7f761b93e520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f761b93e7c0>, 'write': <dependencyGraph.Statement object at 0x7f761b93ea00>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f761b9046a0>, 'write': <dependencyGraph.Statement object at 0x7f761b93e940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f761b93e190>, 'write': <dependencyGraph.Statement object at 0x7f761b93e520>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f761b93e7c0>, 'write': <dependencyGraph.Statement object at 0x7f761b93ea00>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f761b93ea60>, <dependencyGraph.Codelet object at 0x7f761b93e0a0>, <dependencyGraph.Codelet object at 0x7f761b93ea30>, <dependencyGraph.Codelet object at 0x7f761b93eaf0>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f761b93e0a0>, <dependencyGraph.Codelet object at 0x7f761b93ea30>, <dependencyGraph.Codelet object at 0x7f761b93ea60>}
total number of nodes created:  4
state vars {'state_0', 'state_2', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_201', 'p_state_200', 'p_state_000', 'p_state_100', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f761b93efd0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f761b93ef70>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f761b93e700>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f761b93efd0>, 0), (<alus.DominoGenericSALU object at 0x7f761b93ef70>, 1), (<alus.DominoGenericSALU object at 0x7f761b93ef40>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_101', 'p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['p_state_200', 'p_state_201', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_101', 'p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['p_state_200', 'p_state_201', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
Time taken: 2.159428119659424 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_2', 'state_1', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_2': {'read': <dependencyGraph.Statement object at 0x7f6f55022190>, 'write': <dependencyGraph.Statement object at 0x7f6f55022520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f6f550227c0>, 'write': <dependencyGraph.Statement object at 0x7f6f55022a00>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f6f54fe86a0>, 'write': <dependencyGraph.Statement object at 0x7f6f55022940>}}
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f6f55022190>, 'write': <dependencyGraph.Statement object at 0x7f6f55022520>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f6f550227c0>, 'write': <dependencyGraph.Statement object at 0x7f6f55022a00>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f6f54fe86a0>, 'write': <dependencyGraph.Statement object at 0x7f6f55022940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f6f55022a60>, <dependencyGraph.Codelet object at 0x7f6f550220a0>, <dependencyGraph.Codelet object at 0x7f6f55022a30>, <dependencyGraph.Codelet object at 0x7f6f55022af0>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f6f550220a0>, <dependencyGraph.Codelet object at 0x7f6f55022a30>, <dependencyGraph.Codelet object at 0x7f6f55022a60>}
total number of nodes created:  4
state vars {'state_2', 'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_001', 'p_state_200', 'p_state_100', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6f55022fd0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f6f55022f70>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f6f55022700>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f6f55022fd0>, 0), (<alus.DominoGenericSALU object at 0x7f6f55022f70>, 1), (<alus.DominoGenericSALU object at 0x7f6f55022f40>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_100', 'p_state_101', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['state_2', 'p_state_200', 'p_state_201'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_100', 'p_state_101', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['state_2', 'p_state_200', 'p_state_201'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
Time taken: 2.1002860069274902 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fbcd7af77c0>, 'write': <dependencyGraph.Statement object at 0x7fbcd7af7a00>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fbcd7af7190>, 'write': <dependencyGraph.Statement object at 0x7fbcd7af7520>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fbcd7abd6a0>, 'write': <dependencyGraph.Statement object at 0x7fbcd7af7940>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fbcd7af77c0>, 'write': <dependencyGraph.Statement object at 0x7fbcd7af7a00>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fbcd7af7190>, 'write': <dependencyGraph.Statement object at 0x7fbcd7af7520>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fbcd7abd6a0>, 'write': <dependencyGraph.Statement object at 0x7fbcd7af7940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fbcd7af7a60>, <dependencyGraph.Codelet object at 0x7fbcd7af70a0>, <dependencyGraph.Codelet object at 0x7fbcd7af7a30>, <dependencyGraph.Codelet object at 0x7fbcd7af7af0>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fbcd7af70a0>, <dependencyGraph.Codelet object at 0x7fbcd7af7a30>, <dependencyGraph.Codelet object at 0x7fbcd7af7a60>}
total number of nodes created:  4
state vars {'state_1', 'state_2', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_001', 'p_state_200', 'p_state_201', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fbcd7af7fd0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fbcd7af7f70>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fbcd7af7700>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fbcd7af7fd0>, 0), (<alus.DominoGenericSALU object at 0x7fbcd7af7f70>, 1), (<alus.DominoGenericSALU object at 0x7fbcd7af7f40>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_101', 'p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['p_state_201', 'p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_101', 'p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['p_state_201', 'p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
Time taken: 2.160151958465576 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_2', 'state_0'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f593e8137c0>, 'write': <dependencyGraph.Statement object at 0x7f593e813a00>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f593e813190>, 'write': <dependencyGraph.Statement object at 0x7f593e813520>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f593e7d96a0>, 'write': <dependencyGraph.Statement object at 0x7f593e813940>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f593e8137c0>, 'write': <dependencyGraph.Statement object at 0x7f593e813a00>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f593e813190>, 'write': <dependencyGraph.Statement object at 0x7f593e813520>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f593e7d96a0>, 'write': <dependencyGraph.Statement object at 0x7f593e813940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f593e813a60>, <dependencyGraph.Codelet object at 0x7f593e8130a0>, <dependencyGraph.Codelet object at 0x7f593e813a30>, <dependencyGraph.Codelet object at 0x7f593e813af0>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f593e8130a0>, <dependencyGraph.Codelet object at 0x7f593e813a30>, <dependencyGraph.Codelet object at 0x7f593e813a60>}
total number of nodes created:  4
state vars {'state_1', 'state_2', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_101', 'p_state_001', 'p_state_201', 'p_state_200', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_7_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f593e813fd0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f593e813f70>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f593e813700>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f593e813fd0>, 0), (<alus.DominoGenericSALU object at 0x7f593e813f70>, 1), (<alus.DominoGenericSALU object at 0x7f593e813f40>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_100', 'state_1', 'p_state_101'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['p_state_201', 'p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_100', 'state_1', 'p_state_101'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['p_state_201', 'p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': '1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
Time taken: 2.107715606689453 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f281796c7c0>, 'write': <dependencyGraph.Statement object at 0x7f281796ca00>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f28179326a0>, 'write': <dependencyGraph.Statement object at 0x7f281796c940>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7f281796c190>, 'write': <dependencyGraph.Statement object at 0x7f281796c520>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f281796c7c0>, 'write': <dependencyGraph.Statement object at 0x7f281796ca00>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f28179326a0>, 'write': <dependencyGraph.Statement object at 0x7f281796c940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7f281796c190>, 'write': <dependencyGraph.Statement object at 0x7f281796c520>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f281796ca60>, <dependencyGraph.Codelet object at 0x7f281796c0a0>, <dependencyGraph.Codelet object at 0x7f281796ca30>, <dependencyGraph.Codelet object at 0x7f281796caf0>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f281796c0a0>, <dependencyGraph.Codelet object at 0x7f281796ca30>, <dependencyGraph.Codelet object at 0x7f281796ca60>}
total number of nodes created:  4
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_200', 'p_state_000', 'p_state_001', 'p_state_100', 'p_state_201'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f281796cfd0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f281796cf70>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f281796c700>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f281796cfd0>, 0), (<alus.DominoGenericSALU object at 0x7f281796cf70>, 1), (<alus.DominoGenericSALU object at 0x7f281796cf40>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_100', 'p_state_101', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['state_2', 'p_state_200', 'p_state_201'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_100', 'p_state_101', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['state_2', 'p_state_200', 'p_state_201'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': 'p_pkt_1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
Time taken: 2.2635695934295654 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_1', 'state_0', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7faa357b17c0>, 'write': <dependencyGraph.Statement object at 0x7faa357b1a00>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7faa357776a0>, 'write': <dependencyGraph.Statement object at 0x7faa357b1940>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7faa357b1190>, 'write': <dependencyGraph.Statement object at 0x7faa357b1520>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7faa357b17c0>, 'write': <dependencyGraph.Statement object at 0x7faa357b1a00>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7faa357776a0>, 'write': <dependencyGraph.Statement object at 0x7faa357b1940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7faa357b1190>, 'write': <dependencyGraph.Statement object at 0x7faa357b1520>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7faa357b1a60>, <dependencyGraph.Codelet object at 0x7faa357b10a0>, <dependencyGraph.Codelet object at 0x7faa357b1a30>, <dependencyGraph.Codelet object at 0x7faa357b1af0>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7faa357b10a0>, <dependencyGraph.Codelet object at 0x7faa357b1a30>, <dependencyGraph.Codelet object at 0x7faa357b1a60>}
total number of nodes created:  4
state vars {'state_1', 'state_0', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_201', 'p_state_000', 'p_state_101', 'p_state_001', 'p_state_200', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7faa357b1fd0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7faa357b1f70>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7faa357b1700>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7faa357b1fd0>, 0), (<alus.DominoGenericSALU object at 0x7faa357b1f70>, 1), (<alus.DominoGenericSALU object at 0x7faa357b1f40>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['state_1', 'p_state_100', 'p_state_101'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['state_2', 'p_state_200', 'p_state_201'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'state_0', 'p_state_001'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['state_1', 'p_state_100', 'p_state_101'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['state_2', 'p_state_200', 'p_state_201'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'state_0', 'p_state_001'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
Time taken: 2.1321606636047363 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp, program name: rcp_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_state_200 = state_2;

lhs p_state_200 rhs state_2
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_200 = state_2;

 is_read_flank: processing rhs_vars =  ['state_2']
read flank
p_state_001 = p_pkt_0+p_state_000;

lhs p_state_001 rhs p_pkt_0+p_state_000
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_001 = p_pkt_0+p_state_000;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p__br_tmp1 = p_pkt_1<30;

lhs p__br_tmp1 rhs p_pkt_1<30
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_1<30;

 is_read_flank: processing rhs_vars =  ['p_pkt_1']
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_1', 'p_state_100', 'p_state_100']
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

lhs p_state_201 rhs p__br_tmp1 ? (1+p_state_200) : (p_state_200)
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_200', 'p_state_200']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
state_2 = p_state_201;

lhs state_2 rhs p_state_201
state_vars {'state_0', 'state_1', 'state_2'}
read/write flanks: processing line  state_2 = p_state_201;

 is_read_flank: processing rhs_vars =  ['p_state_201']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p_pkt_0+p_state_000;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_001 = p_pkt_0+p_state_000; state_0 = p_state_001;
RAW p__br_tmp1 = p_pkt_1<30; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
RAW p__br_tmp1 = p_pkt_1<30; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
RAW p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
RAW p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fde6fc5f6a0>, 'write': <dependencyGraph.Statement object at 0x7fde6fc99940>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fde6fc997c0>, 'write': <dependencyGraph.Statement object at 0x7fde6fc99a00>}, 'state_2': {'read': <dependencyGraph.Statement object at 0x7fde6fc99190>, 'write': <dependencyGraph.Statement object at 0x7fde6fc99520>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fde6fc5f6a0>, 'write': <dependencyGraph.Statement object at 0x7fde6fc99940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fde6fc997c0>, 'write': <dependencyGraph.Statement object at 0x7fde6fc99a00>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_2
{'read': <dependencyGraph.Statement object at 0x7fde6fc99190>, 'write': <dependencyGraph.Statement object at 0x7fde6fc99520>}
state_var  state_2
read_flank p_state_200 = state_2
write_flank state_2 = p_state_201
total number of nodes created:  10
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p_pkt_0+p_state_000 stmts len 1
p_state_001 = p_pkt_0+p_state_000;
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_state_200 = state_2 stmts len 1
p_state_200 = state_2;
v p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) stmts len 1
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
v state_2 = p_state_201 stmts len 1
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
SCC 3
v p__br_tmp1 = p_pkt_1<30 stmts len 1
p__br_tmp1 = p_pkt_1<30;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fde6fc99a60>, <dependencyGraph.Codelet object at 0x7fde6fc990a0>, <dependencyGraph.Codelet object at 0x7fde6fc99a30>, <dependencyGraph.Codelet object at 0x7fde6fc99af0>]
p_state_000 = state_0;
p_state_001 = p_pkt_0+p_state_000;
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_state_200 = state_2;
p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200);
state_2 = p_state_201;
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
stateful
p__br_tmp1 = p_pkt_1<30;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fde6fc990a0>, <dependencyGraph.Codelet object at 0x7fde6fc99a30>, <dependencyGraph.Codelet object at 0x7fde6fc99a60>}
total number of nodes created:  4
state vars {'state_0', 'state_1', 'state_2'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_201', 'p_state_001', 'p_state_000', 'p_state_200', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
-------------------------------------- stateful codelet vars :  ['state_2'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_2']
codelet  p_state_200 = state_2 p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200) state_2 = p_state_201  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p_pkt_0+p_state_000 state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_2']
 is_read_flank: processing rhs_vars =  ['p_state_201']
Principal Outputs:  {'p__br_tmp1'}
{'p__br_tmp1'}
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p__br_tmp1 = p_pkt_1<30;
v:  p_state_200 = state_2; p_state_201 = p__br_tmp1 ? (1+p_state_200) : (p_state_200); state_2 = p_state_201;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp1', 'p_pkt_1']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 'p_pkt_1', 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_2', 'p__br_tmp1']
 ~~~| state var:  ['state_2']
salu_inputs {'metadata_lo': 'p__br_tmp1', 'metadata_hi': 0, 'register_lo': 'state_2', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/rcp/rcp_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp1_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp1 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp1_bnd_1.sk.out
['comp_4']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fde6fc99fd0>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  0
------successor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7fde6fc99f70>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4'}
Stateless ALU id 3 has output p__br_tmp1
 *** found dependency between stateless ALU  3  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 

+---> dependencies of ALU  3 : 
0,1,
# alus: =  4
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 4}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: alu_dep_dic:  {'T0': [(3, 0), (3, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 81 rows, 54 columns and 168 nonzeros
Model fingerprint: 0xf661c982
Model has 48 general constraints
Variable types: 0 continuous, 54 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 11 rows and 0 columns
Presolve removed 0 rows and 4 columns
Presolve time: 0.00s
Presolved: 92 rows, 50 columns, 221 nonzeros
Variable types: 0 continuous, 50 integer (45 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 1
T0_A_2 -0
T0_A_3 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
stage:  -0.0
action:  3
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
 > get_alu_stage: table  0 , alu_id =  3 :  -0.0
alu  3  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fde6fc99700>, 0)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fde6fc99fd0>, 0), (<alus.DominoGenericSALU object at 0x7fde6fc99f70>, 1), (<alus.DominoGenericSALU object at 0x7fde6fc99f40>, 2)]
 * gen_dependency_list: dependency between  3  and  0
 * gen_dependency_list: dependency between  3  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_101', 'state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['p_state_201', 'p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(3, 0), (3, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp1', 'p_pkt_1'], 'outputs': ['p_state_101', 'state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_2', 'p__br_tmp1'], 'outputs': ['p_state_201', 'p_state_200', 'state_2'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_001', 'p_state_000'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 13, 'operand0': 'p_pkt_1', 'operand1': '1', 'operand2': 'p_pkt_1', 'result': 'p__br_tmp1', 'immediate_operand': '30'}]}
Time taken: 2.2215325832366943 s
preprocessor time:
