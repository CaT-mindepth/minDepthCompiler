running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_1_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f1d5f5326a0>, 'write': <dependencyGraph.Statement object at 0x7f1d5f56c790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1d5f5326a0>, 'write': <dependencyGraph.Statement object at 0x7f1d5f56c790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1d5f56cb50>, <dependencyGraph.Codelet object at 0x7f1d5f56cb20>, <dependencyGraph.Codelet object at 0x7f1d5f56c130>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1d5f56c130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp4 = !(p_state_000==29)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f1d5f5290d0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f1d5f56cd60>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp4', 'p_state_001', 'p__br_tmp5', 'state_0', 'p_state_000', 'p_state_002'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp4', 'p_state_001', 'p__br_tmp5', 'state_0', 'p_state_000', 'p_state_002'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.12147855758667 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_2_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fad12c996a0>, 'write': <dependencyGraph.Statement object at 0x7fad12cd3790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fad12c996a0>, 'write': <dependencyGraph.Statement object at 0x7fad12cd3790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fad12cd3b50>, <dependencyGraph.Codelet object at 0x7fad12cd3b20>, <dependencyGraph.Codelet object at 0x7fad12cd3130>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fad12cd3130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp4 = !(p_state_000==29)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fad12c900d0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fad12cd3d60>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_001', 'p_state_000', 'p__br_tmp4', 'p_state_002', 'p__br_tmp5'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p_state_001', 'p_state_000', 'p__br_tmp4', 'p_state_002', 'p__br_tmp5'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.096914291381836 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_3_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp6 = !(p_state_000==29);

lhs p__br_tmp6 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp6 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp6 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0']
p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_000', 'p_state_000']
p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp7 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp7 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_00']
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp6 = !(p_state_000==29); p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
RAW p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
RAW p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f621dd366a0>, 'write': <dependencyGraph.Statement object at 0x7f621dd70790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f621dd366a0>, 'write': <dependencyGraph.Statement object at 0x7f621dd70790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = !(p_state_000==29) stmts len 1
p__br_tmp6 = !(p_state_000==29);
v p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
v p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp7 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f621dd70b50>, <dependencyGraph.Codelet object at 0x7f621dd70b20>, <dependencyGraph.Codelet object at 0x7f621dd70130>]
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp6 = !(p_state_000==29);
p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f621dd70130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp6', 'p__br_tmp7'}
elements in v_outputs:  {'p__br_tmp6', 'p__br_tmp7'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp6 = !(p_state_000==29)
2   p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp7 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp7 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp6', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp7 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp7', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp6    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp7    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp6 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = !(p_state_000==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp6 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp6 = !(p_state_000==29)
finding node for codelet:  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp6 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
u:  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
u:  p__br_tmp6 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
u:  p__br_tmp6 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f621dd2d0d0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f621dd70d60>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p__br_tmp6', 'p_state_000', 'p_state_001', 'p_state_002', 'p__br_tmp7'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['state_0', 'p__br_tmp6', 'p_state_000', 'p_state_001', 'p_state_002', 'p__br_tmp7'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.0834410190582275 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_4_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fa6b64826a0>, 'write': <dependencyGraph.Statement object at 0x7fa6b64bc790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa6b64826a0>, 'write': <dependencyGraph.Statement object at 0x7fa6b64bc790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa6b64bcb50>, <dependencyGraph.Codelet object at 0x7fa6b64bcb20>, <dependencyGraph.Codelet object at 0x7fa6b64bc130>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa6b64bc130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp4 = !(p_state_000==29)
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fa6b647a0d0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fa6b64bceb0>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp5', 'p_state_002', 'p__br_tmp4', 'p_state_000', 'p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp5', 'p_state_002', 'p__br_tmp4', 'p_state_000', 'p_state_001', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.056875467300415 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_5_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f1ee4d486a0>, 'write': <dependencyGraph.Statement object at 0x7f1ee4d82790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1ee4d486a0>, 'write': <dependencyGraph.Statement object at 0x7f1ee4d82790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1ee4d82b50>, <dependencyGraph.Codelet object at 0x7f1ee4d82b20>, <dependencyGraph.Codelet object at 0x7f1ee4d82130>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1ee4d82130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp4 = !(p_state_000==29)
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f1ee4d400d0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f1ee4d82eb0>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp5', 'p_state_000', 'state_0', 'p__br_tmp4', 'p_state_001', 'p_state_002'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp5', 'p_state_000', 'state_0', 'p__br_tmp4', 'p_state_001', 'p_state_002'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.1106147766113281 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_6_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp8 = !(p_state_000==29);

lhs p__br_tmp8 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp8 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp8 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_0']
p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp8 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_state_000', 'p_state_000']
p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp9 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp9 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_pkt_00']
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp9 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp9 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp8 = !(p_state_000==29); p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
RAW p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
RAW p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
RAW p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fd33d32b6a0>, 'write': <dependencyGraph.Statement object at 0x7fd33d365790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fd33d32b6a0>, 'write': <dependencyGraph.Statement object at 0x7fd33d365790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp8 = !(p_state_000==29) stmts len 1
p__br_tmp8 = !(p_state_000==29);
v p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
v p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp9 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd33d365b50>, <dependencyGraph.Codelet object at 0x7fd33d365b20>, <dependencyGraph.Codelet object at 0x7fd33d365130>]
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp8 = !(p_state_000==29);
p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd33d365130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp8', 'p__br_tmp9'}
elements in v_outputs:  {'p__br_tmp8', 'p__br_tmp9'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp8 = !(p_state_000==29)
2   p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp9 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp9 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp9 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp9', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp8', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp9  not in state vars
 statement:  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp8    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp9    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp8 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp8 = !(p_state_000==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp8 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp8 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp8 = !(p_state_000==29)
finding node for codelet:  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp8 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
u:  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
u:  p__br_tmp8 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
u:  p__br_tmp8 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fd33d3220d0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fd33d365d60>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp8', 'p_state_002', 'state_0', 'p_state_001', 'p_state_000', 'p__br_tmp9'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp8', 'p_state_002', 'state_0', 'p_state_001', 'p_state_000', 'p__br_tmp9'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = 0;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.137458086013794 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_7_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp5 = p_state_000==29;

lhs p__br_tmp5 rhs p_state_000==29
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = p_state_000==29;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp5 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp5 ? (0) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_000']
p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));

lhs p__br_tmp6 rhs (!(p_state_000==29))&&(!(p_state_001==29))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp6 ? (0) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_00']
p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (1+p_state_001) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp5 = p_state_000==29;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
RAW p__br_tmp5 = p_state_000==29; p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
RAW p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
RAW p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
RAW p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
RAW p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
RAW p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
RAW p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f936570b6a0>, 'write': <dependencyGraph.Statement object at 0x7f9365745940>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f936570b6a0>, 'write': <dependencyGraph.Statement object at 0x7f9365745940>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp5 = p_state_000==29 stmts len 1
p__br_tmp5 = p_state_000==29;
v p_state_001 = p__br_tmp5 ? (0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
v p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) stmts len 1
p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
v p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f9365745b50>, <dependencyGraph.Codelet object at 0x7f9365745b20>, <dependencyGraph.Codelet object at 0x7f9365745130>]
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp5 = p_state_000==29;
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f9365745130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp6'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp6'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp5 = p_state_000==29
2   p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
3   p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29))
4   p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001)
5   state_0 = p_state_002
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001)
 rhs_vars:  ['p__br_tmp6', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29))
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
 rhs_vars:  ['p__br_tmp5', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = p_state_000==29
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp6    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp5 = p_state_000==29
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = p_state_000==29
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp5 = p_state_000==29
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = p_state_000==29
find_codelet for stmt :  p__br_tmp5 = p_state_000==29
finding node for codelet:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29))
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29))
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = p_state_000==29;
u:  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
u:  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
u:  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
v:  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
u:  p__br_tmp5 = p_state_000==29;
v:  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
u:  p__br_tmp5 = p_state_000==29;
v:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
u:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
v:  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f93657010d0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7f9365745d60>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_002', 'p__br_tmp6', 'p_state_001', 'state_0', 'p_state_000', 'p__br_tmp5'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_002', 'p__br_tmp6', 'p_state_001', 'state_0', 'p_state_000', 'p__br_tmp5'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_state_000', 'operand2': '1', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.0644969940185547 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_8_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fb9d5f6c6a0>, 'write': <dependencyGraph.Statement object at 0x7fb9d5fa6790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb9d5f6c6a0>, 'write': <dependencyGraph.Statement object at 0x7fb9d5fa6790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb9d5fa6b50>, <dependencyGraph.Codelet object at 0x7fb9d5fa6b20>, <dependencyGraph.Codelet object at 0x7fb9d5fa6130>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb9d5fa6130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  4
---------------number of nodes in the graph:  4
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp4 = !(p_state_000==29)
finding node for codelet:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fb9d5f630d0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fb9d5fa6d60>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p__br_tmp5', 'p_state_001', 'p__br_tmp4', 'state_0', 'p_state_002'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p__br_tmp5', 'p_state_001', 'p__br_tmp4', 'state_0', 'p_state_002'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_state_000', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.0718474388122559 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_9_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp2 = !(p_state_000==29);

lhs p__br_tmp2 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp2 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp2 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0']
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp3 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp3 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_00']
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp3 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp3 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp2 = !(p_state_000==29); p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
RAW p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
RAW p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
RAW p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fa0f47c76a0>, 'write': <dependencyGraph.Statement object at 0x7fa0f4801790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa0f47c76a0>, 'write': <dependencyGraph.Statement object at 0x7fa0f4801790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = !(p_state_000==29) stmts len 1
p__br_tmp2 = !(p_state_000==29);
v p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp3 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa0f4801b50>, <dependencyGraph.Codelet object at 0x7fa0f4801b20>, <dependencyGraph.Codelet object at 0x7fa0f4801130>]
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp2 = !(p_state_000==29);
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa0f4801130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp3', 'p__br_tmp2'}
elements in v_outputs:  {'p__br_tmp3', 'p__br_tmp2'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp2 = !(p_state_000==29)
2   p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp3 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp3 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp3  not in state vars
 statement:  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp2', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp3 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp3', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp3    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp2    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp2 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp2 = !(p_state_000==29)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp2 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp2 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp2 = !(p_state_000==29)
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp2 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
u:  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
u:  p__br_tmp2 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
u:  p__br_tmp2 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7fa0f47bf0d0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7fa0f4801eb0>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp3', 'state_0', 'p_state_001', 'p_state_002', 'p_state_000', 'p__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p__br_tmp3', 'state_0', 'p_state_001', 'p_state_002', 'p_state_000', 'p__br_tmp2'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 == 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.0649006366729736 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_10_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU if_else_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7ff4a6d346a0>, 'write': <dependencyGraph.Statement object at 0x7ff4a6d6e790>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7ff4a6d346a0>, 'write': <dependencyGraph.Statement object at 0x7ff4a6d6e790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ff4a6d6eb50>, <dependencyGraph.Codelet object at 0x7ff4a6d6eb20>, <dependencyGraph.Codelet object at 0x7ff4a6d6e130>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ff4a6d6e130>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p__br_tmp5    read_flanks:  ['p_state_000']   write_flanks:  []
output  p__br_tmp4    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_000'}
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  3
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  None
finding node for codelet:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
find_codelet for stmt :  None
finding node for codelet:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
find_codelet for stmt :  None
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
finding node for codelet:  p__br_tmp4 = !(p_state_000==29)
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
adding stmt :  p__br_tmp4 = !(p_state_000==29)
find_codelet for stmt :  p__br_tmp4 = !(p_state_000==29)
-----------number of nodes in the graph:  6
---------------number of nodes in the graph:  6
number of SCC nodes post splitting:  6
total number of nodes created:  6
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  6
number of nodes in comp_graph:  6
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  {'p_pkt_01'}
{'p_pkt_01'}
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp4 = !(p_state_000==29);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
u:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
u:  p__br_tmp4 = !(p_state_000==29);
v:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
u:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
~~~~~~~~~~set_alu_inputs:  ['state_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 0, 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  if_else_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_6_stateless_p_pkt_01_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p_pkt_01 --------- 
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_6 , type?  STATELESS
filename_to_compname: filename =  comp_6_stateless_p_pkt_01_bnd_1.sk.out
['comp_6']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_6  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_6'}
 *** found stateless dependency between ALU  0  and ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
1,
+---> dependencies of ALU  1 : 

# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x5ac356c2
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7ff4a6d2c0d0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.DominoGenericSALU object at 0x7ff4a6d6eeb0>, 0)]
 * gen_dependency_list: dependency between  0  and  1
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p__br_tmp5', 'p_state_001', 'p__br_tmp4', 'p_state_002', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
----------------------------------------------------
{'num_pipeline_stages': 2, 'alu_dependencies': [(0, 1)], 'stateful_alus': [{'inputs': ['state_0'], 'outputs': ['p_state_000', 'p__br_tmp5', 'p_state_001', 'p__br_tmp4', 'p_state_002', 'state_0'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 != 29)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  else\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 1, 'opcode': 9, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': 'p_pkt_01', 'immediate_operand': '29'}]}
Time taken: 1.1299941539764404 s
preprocessor time:
