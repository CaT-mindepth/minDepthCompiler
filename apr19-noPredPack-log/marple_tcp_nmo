running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f92eec3d580>, 'write': <dependencyGraph.Statement object at 0x7f92eebfb400>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f92eebfb760>, 'write': <dependencyGraph.Statement object at 0x7f92eebfb820>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f92eec3d580>, 'write': <dependencyGraph.Statement object at 0x7f92eebfb400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f92eebfb760>, 'write': <dependencyGraph.Statement object at 0x7f92eebfb820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f92eebfb0a0>, <dependencyGraph.Codelet object at 0x7f92eebfb040>, <dependencyGraph.Codelet object at 0x7f92eebfb9d0>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f92eebfb0a0>, <dependencyGraph.Codelet object at 0x7f92eebfb9d0>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_100', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f92eebfbf40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f92eebfbf40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  5
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f92eebfbf40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f92eebfbf40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,3,4,5,5,
+---> dependencies of ALU  2 : 
3,3,4,5,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 3), (1, 4), (1, 5), (1, 5), (2, 3), (2, 3), (2, 4), (2, 5), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 141 rows, 93 columns and 312 nonzeros
Model fingerprint: 0x9a0f222a
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 5 rows and 22 columns
Presolve time: 0.01s
Presolved: 136 rows, 71 columns, 321 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f92eebfb6a0>, 0), (<alus.DominoALU object at 0x7f92eec370a0>, 1), (<alus.DominoALU object at 0x7f92eec370d0>, 2), (<alus.DominoALU object at 0x7f92eec37100>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f92eebfbf40>, 0), (<alus.DominoGenericSALU object at 0x7f92eebfbeb0>, 1), (<alus.DominoGenericSALU object at 0x7f92eebfbe80>, 2)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 3), (1, 4), (1, 5), (1, 5), (2, 3), (2, 3), (2, 4), (2, 5), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['p_state_100', 'state_1', 'p_state_101'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0', 'p_state_000', 'p__br_tmp4'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0', 'p_state_000', 'p__br_tmp4'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_state_000', 'operand1': 'p_state_001', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 3), (1, 4), (1, 5), (1, 5), (2, 3), (2, 3), (2, 4), (2, 5), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['p_state_100', 'state_1', 'p_state_101'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0', 'p_state_000', 'p__br_tmp4'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'state_0', 'p_state_000', 'p__br_tmp4'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_state_000', 'operand1': 'p_state_001', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
Time taken: 14.083882570266724 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f6b809ce760>, 'write': <dependencyGraph.Statement object at 0x7f6b809ce820>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f6b80a10580>, 'write': <dependencyGraph.Statement object at 0x7f6b809ce400>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f6b809ce760>, 'write': <dependencyGraph.Statement object at 0x7f6b809ce820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f6b80a10580>, 'write': <dependencyGraph.Statement object at 0x7f6b809ce400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f6b809ce100>, <dependencyGraph.Codelet object at 0x7f6b809ce040>, <dependencyGraph.Codelet object at 0x7f6b809ce9d0>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f6b809ce100>, <dependencyGraph.Codelet object at 0x7f6b809ce9d0>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p_state_000'}
p_state_001  is write flank
p_state_000  is read flank
elements in v_outputs:  {'p_state_001', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6b809cef40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6b809cef40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  5
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6b809cef40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f6b809cef40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,4,5,5,
+---> dependencies of ALU  2 : 
3,4,5,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 4), (1, 5), (1, 5), (2, 3), (2, 4), (2, 5), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 139 rows, 93 columns and 308 nonzeros
Model fingerprint: 0xcf013b3a
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 22 columns
Presolve time: 0.01s
Presolved: 136 rows, 71 columns, 321 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f6b809ce6a0>, 0), (<alus.DominoALU object at 0x7f6b80a0a0a0>, 1), (<alus.DominoALU object at 0x7f6b80a0a0d0>, 2), (<alus.DominoALU object at 0x7f6b80a0a100>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f6b809cef40>, 0), (<alus.DominoGenericSALU object at 0x7f6b809ceeb0>, 1), (<alus.DominoGenericSALU object at 0x7f6b809cee80>, 2)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (1, 5), (2, 3), (2, 4), (2, 5), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['p_state_100', 'p_state_101', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p__br_tmp4', 'p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p__br_tmp4', 'p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 15, 'operand0': '1', 'operand1': 'p_state_001', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 15, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (1, 5), (2, 3), (2, 4), (2, 5), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['p_state_100', 'p_state_101', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p__br_tmp4', 'p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_001', 'p__br_tmp4', 'p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_0', 'immediate_operand': '3'}, {'id': 5, 'opcode': 15, 'operand0': '1', 'operand1': 'p_state_001', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '0'}, {'id': 6, 'opcode': 15, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
Time taken: 3.8691866397857666 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp6 = !(p_pkt_0<p_state_000);

lhs p__br_tmp6 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp6 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0', 'p_state_000']
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f1f68c3d760>, 'write': <dependencyGraph.Statement object at 0x7f1f68c3d820>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f1f68c7f580>, 'write': <dependencyGraph.Statement object at 0x7f1f68c3d400>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f1f68c3d760>, 'write': <dependencyGraph.Statement object at 0x7f1f68c3d820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1f68c7f580>, 'write': <dependencyGraph.Statement object at 0x7f1f68c3d400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp6 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1f68c3d100>, <dependencyGraph.Codelet object at 0x7f1f68c3d040>, <dependencyGraph.Codelet object at 0x7f1f68c3d9d0>]
p_state_100 = state_1;
p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp6 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1f68c3d100>, <dependencyGraph.Codelet object at 0x7f1f68c3d9d0>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp6 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp6', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_001', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp7'}
{'p__br_tmp7'}
u:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp7']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp7', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp7_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp7_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp7_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp7_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp7_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp7_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_4_stateless_p__br_tmp7_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp7 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp7_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp7_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp7_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp7_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp7_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp7_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp7_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp7_bnd_2.sk.out
['comp_4']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f1f68c3df40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f1f68c3df40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f1f68c3df40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f1f68c3df40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp7
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,4,5,
+---> dependencies of ALU  2 : 
3,4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 137 rows, 93 columns and 304 nonzeros
Model fingerprint: 0xa2391eef
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 22 columns
Presolve time: 0.01s
Presolved: 136 rows, 71 columns, 321 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f1f68c3d6a0>, 0), (<alus.DominoALU object at 0x7f1f68c790a0>, 1), (<alus.DominoALU object at 0x7f1f68c790d0>, 2), (<alus.DominoALU object at 0x7f1f68c79100>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f1f68c3df40>, 0), (<alus.DominoGenericSALU object at 0x7f1f68c3deb0>, 1), (<alus.DominoGenericSALU object at 0x7f1f68c3de80>, 2)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp7'], 'outputs': ['state_1', 'p_state_100', 'p_state_101'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'p__br_tmp6', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'p__br_tmp6', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '27'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp7', 'immediate_operand': '6'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp7'], 'outputs': ['state_1', 'p_state_100', 'p_state_101'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'p__br_tmp6', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'p__br_tmp6', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '27'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp7', 'immediate_operand': '6'}]}
Time taken: 5.930567979812622 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fc3902c4760>, 'write': <dependencyGraph.Statement object at 0x7fc3902c4820>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fc390306580>, 'write': <dependencyGraph.Statement object at 0x7fc3902c4400>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fc3902c4760>, 'write': <dependencyGraph.Statement object at 0x7fc3902c4820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fc390306580>, 'write': <dependencyGraph.Statement object at 0x7fc3902c4400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc3902c4100>, <dependencyGraph.Codelet object at 0x7fc3902c4040>, <dependencyGraph.Codelet object at 0x7fc3902c49d0>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc3902c4100>, <dependencyGraph.Codelet object at 0x7fc3902c49d0>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_001', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc3902c4f40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc3902c4f40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc3902c4f40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc3902c4f40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,4,5,
+---> dependencies of ALU  2 : 
3,4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 137 rows, 93 columns and 304 nonzeros
Model fingerprint: 0xa2391eef
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 22 columns
Presolve time: 0.01s
Presolved: 136 rows, 71 columns, 321 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fc3902c46a0>, 0), (<alus.DominoALU object at 0x7fc3903000a0>, 1), (<alus.DominoALU object at 0x7fc3903000d0>, 2), (<alus.DominoALU object at 0x7fc390300100>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fc3902c4f40>, 0), (<alus.DominoGenericSALU object at 0x7fc3902c4eb0>, 1), (<alus.DominoGenericSALU object at 0x7fc3902c4e80>, 2)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1', 'p_state_100', 'p_state_101'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0', 'p__br_tmp4'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0', 'p__br_tmp4'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '20'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['state_1', 'p_state_100', 'p_state_101'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0', 'p__br_tmp4'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0', 'p__br_tmp4'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '20'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
Time taken: 55.47492837905884 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fe7e313d760>, 'write': <dependencyGraph.Statement object at 0x7fe7e313d820>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fe7e317f580>, 'write': <dependencyGraph.Statement object at 0x7fe7e313d400>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe7e313d760>, 'write': <dependencyGraph.Statement object at 0x7fe7e313d820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe7e317f580>, 'write': <dependencyGraph.Statement object at 0x7fe7e313d400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe7e313d100>, <dependencyGraph.Codelet object at 0x7fe7e313d040>, <dependencyGraph.Codelet object at 0x7fe7e313d9d0>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe7e313d100>, <dependencyGraph.Codelet object at 0x7fe7e313d9d0>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe7e313df40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe7e313df40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  5
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe7e313df40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fe7e313df40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,4,5,5,
+---> dependencies of ALU  2 : 
3,4,5,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 4), (1, 5), (1, 5), (2, 3), (2, 4), (2, 5), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 139 rows, 93 columns and 308 nonzeros
Model fingerprint: 0xcf013b3a
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 22 columns
Presolve time: 0.01s
Presolved: 136 rows, 71 columns, 321 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fe7e313d6a0>, 0), (<alus.DominoALU object at 0x7fe7e31790a0>, 1), (<alus.DominoALU object at 0x7fe7e31790d0>, 2), (<alus.DominoALU object at 0x7fe7e3179100>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fe7e313df40>, 0), (<alus.DominoGenericSALU object at 0x7fe7e313deb0>, 1), (<alus.DominoGenericSALU object at 0x7fe7e313de80>, 2)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (1, 5), (2, 3), (2, 4), (2, 5), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['p_state_100', 'p_state_101', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p__br_tmp4', 'p_state_000', 'state_0', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p__br_tmp4', 'p_state_000', 'state_0', 'p_state_001'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (1, 5), (2, 3), (2, 4), (2, 5), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['p_state_100', 'p_state_101', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p__br_tmp4', 'p_state_000', 'state_0', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p__br_tmp4', 'p_state_000', 'state_0', 'p_state_001'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '31'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '31'}, {'id': 5, 'opcode': 15, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '1'}, {'id': 6, 'opcode': 12, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '0'}]}
Time taken: 4.2754130363464355 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp8 = !(p_pkt_0<p_state_000);

lhs p__br_tmp8 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp8 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp8 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_0', 'p_state_000']
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp9 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp9 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f224249b580>, 'write': <dependencyGraph.Statement object at 0x7f2242459400>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f2242459760>, 'write': <dependencyGraph.Statement object at 0x7f2242459820>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f224249b580>, 'write': <dependencyGraph.Statement object at 0x7f2242459400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f2242459760>, 'write': <dependencyGraph.Statement object at 0x7f2242459820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp8 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp8 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f22424590a0>, <dependencyGraph.Codelet object at 0x7f2242459040>, <dependencyGraph.Codelet object at 0x7f22424599d0>]
p_state_100 = state_1;
p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp8 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f22424590a0>, <dependencyGraph.Codelet object at 0x7f22424599d0>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp8 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp8', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp9'}
{'p__br_tmp9'}
u:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp9']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp9', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp9_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp9_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp9_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp9_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp9_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp9_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_4_stateless_p__br_tmp9_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp9 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp9_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp9_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp9_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp9_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp9_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp9_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp9_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp9_bnd_2.sk.out
['comp_4']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f2242459f40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f2242459f40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f2242459f40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f2242459f40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp9
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,4,5,
+---> dependencies of ALU  2 : 
3,4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 137 rows, 93 columns and 304 nonzeros
Model fingerprint: 0xa2391eef
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 22 columns
Presolve time: 0.01s
Presolved: 136 rows, 71 columns, 321 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f22424596a0>, 0), (<alus.DominoALU object at 0x7f22424950a0>, 1), (<alus.DominoALU object at 0x7f22424950d0>, 2), (<alus.DominoALU object at 0x7f2242495100>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f2242459f40>, 0), (<alus.DominoGenericSALU object at 0x7f2242459eb0>, 1), (<alus.DominoGenericSALU object at 0x7f2242459e80>, 2)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp9'], 'outputs': ['p_state_100', 'p_state_101', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0', 'p__br_tmp8'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0', 'p__br_tmp8'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 19, 'operand0': 'p_state_001', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp9', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp9'], 'outputs': ['p_state_100', 'p_state_101', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 != pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0', 'p__br_tmp8'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'p_state_001', 'state_0', 'p__br_tmp8'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12', 'immediate_operand': '1'}, {'id': 4, 'opcode': 19, 'operand0': 'p_state_001', 'operand1': 'p_pkt_0', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12_1', 'immediate_operand': '31'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp9', 'immediate_operand': '1'}]}
Time taken: 4.280378580093384 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<p_state_100;

lhs p__br_tmp5 rhs p_pkt_0<p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp5 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_000', 'p_state_000']
p__br_tmp6 = !(p_pkt_0<p_state_100);

lhs p__br_tmp6 rhs !(p_pkt_0<p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = !(p_pkt_0<p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp6 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp5 = p_pkt_0<p_state_100;
RAW p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<p_state_100; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
RAW p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
RAW p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f64c3ccd580>, 'write': <dependencyGraph.Statement object at 0x7f64c3c8c790>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f64c3c8c760>, 'write': <dependencyGraph.Statement object at 0x7f64c3c8c820>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f64c3ccd580>, 'write': <dependencyGraph.Statement object at 0x7f64c3c8c790>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f64c3c8c760>, 'write': <dependencyGraph.Statement object at 0x7f64c3c8c820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p__br_tmp5 = p_pkt_0<p_state_100 stmts len 1
p__br_tmp5 = p_pkt_0<p_state_100;
SCC 2
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp6 = !(p_pkt_0<p_state_100) stmts len 1
p__br_tmp6 = !(p_pkt_0<p_state_100);
v p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f64c3c8c040>, <dependencyGraph.Codelet object at 0x7f64c3c8c160>, <dependencyGraph.Codelet object at 0x7f64c3c8c0a0>]
p_state_000 = state_0;
p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p__br_tmp5 = p_pkt_0<p_state_100;
p_state_100 = state_1;
p__br_tmp6 = !(p_pkt_0<p_state_100);
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f64c3c8c0a0>, <dependencyGraph.Codelet object at 0x7f64c3c8c040>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp6 = !(p_pkt_0<p_state_100) p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp6 = !(p_pkt_0<p_state_100) p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
v:  p__br_tmp5 = p_pkt_0<p_state_100;
u:  p__br_tmp5 = p_pkt_0<p_state_100;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp5']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_3_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_3_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_3_stateless_p__br_tmp5_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_3_stateless_p__br_tmp5_bnd_1.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_3_stateless_p__br_tmp5_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p__br_tmp5_bnd_1.sk.out
['comp_3']
final_output:  _out_s12
   alu output:  _out_s12
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_3  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
 *** found stateless dependency between ALU  0  and ALU  2
------successor of comp  comp_3  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
-------ALU in the component of  comp_1 :  [<alus.DominoGenericSALU object at 0x7f64c3c8cbe0>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_3'}
Stateless ALU id 2 has output p__br_tmp5
 *** found dependency between stateless ALU  2  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 
2,
+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 2), (2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 65 rows, 41 columns and 128 nonzeros
Model fingerprint: 0x2b729b7c
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 7 columns
Presolve time: 0.00s
Presolved: 62 rows, 34 columns, 148 nonzeros
Variable types: 0 continuous, 34 integer (30 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 2.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 2 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 2.000000000000e+00, best bound 2.000000000000e+00, gap 0.0000%
Optimal objective: 2
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 2
T0_A_2 1
************************************************
Obj: 2
number of stages:  3
stage:  -0.0
action:  0
num stages:  3
stage:  2.0
action:  1
num stages:  3
stage:  1.0
action:  2
num stages:  3
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  2.0
 > get_alu_stage: table  0 , alu_id =  1 :  2.0
alu  1  is of type  STATEFUL ; scheduled to stage  2
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
 > get_alu_stage: table  0 , alu_id =  2 :  1.0
alu  2  is of type  STATELESS ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<alus.DominoALU object at 0x7f64c3c8cca0>, 0)]
Codegen processed SALUs:  2  ;  [(<alus.DominoGenericSALU object at 0x7f64c3c8ce80>, 0), (<alus.DominoGenericSALU object at 0x7f64c3c8cbe0>, 1)]
 * gen_dependency_list: dependency between  0  and  2
 * gen_dependency_list: dependency between  2  and  1
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 2), (2, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0'], 'outputs': ['p_state_100', 'p_state_101', 'state_1', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp5'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': 'p__br_tmp5', 'immediate_operand': '11'}]}
----------------------------------------------------
{'num_pipeline_stages': 3, 'alu_dependencies': [(0, 2), (2, 1)], 'stateful_alus': [{'inputs': ['state_1', 'p_pkt_0'], 'outputs': ['p_state_100', 'p_state_101', 'state_1', 'p__br_tmp6'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p__br_tmp5'], 'outputs': ['p_state_000', 'p_state_001', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}], 'stateless_alus': [{'id': 2, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_100', 'operand2': '1', 'result': 'p__br_tmp5', 'immediate_operand': '11'}]}
Time taken: 1.5686721801757812 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f073cdec580>, 'write': <dependencyGraph.Statement object at 0x7f073cdaa400>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f073cdaa760>, 'write': <dependencyGraph.Statement object at 0x7f073cdaa820>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f073cdec580>, 'write': <dependencyGraph.Statement object at 0x7f073cdaa400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f073cdaa760>, 'write': <dependencyGraph.Statement object at 0x7f073cdaa820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f073cdaa0a0>, <dependencyGraph.Codelet object at 0x7f073cdaa040>, <dependencyGraph.Codelet object at 0x7f073cdaa9d0>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f073cdaa0a0>, <dependencyGraph.Codelet object at 0x7f073cdaa9d0>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  3
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f073cdaaf40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  4
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  4
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f073cdaaf40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  5
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  5
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f073cdaaf40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7f073cdaaf40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,3,4,4,5,5,
+---> dependencies of ALU  2 : 
3,3,4,4,5,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 3), (1, 4), (1, 4), (1, 5), (1, 5), (2, 3), (2, 3), (2, 4), (2, 4), (2, 5), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 143 rows, 93 columns and 316 nonzeros
Model fingerprint: 0xe766595f
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 7 rows and 22 columns
Presolve time: 0.01s
Presolved: 136 rows, 71 columns, 321 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7f073cdaa6a0>, 0), (<alus.DominoALU object at 0x7f073cde60a0>, 1), (<alus.DominoALU object at 0x7f073cde60d0>, 2), (<alus.DominoALU object at 0x7f073cde6100>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7f073cdaaf40>, 0), (<alus.DominoGenericSALU object at 0x7f073cdaaeb0>, 1), (<alus.DominoGenericSALU object at 0x7f073cdaae80>, 2)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 3), (1, 4), (1, 4), (1, 5), (1, 5), (2, 3), (2, 3), (2, 4), (2, 4), (2, 5), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['p_state_101', 'state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000', 'p__br_tmp4', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000', 'p__br_tmp4', 'p_state_001'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_state_001', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '4'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 3), (1, 4), (1, 4), (1, 5), (1, 5), (2, 3), (2, 3), (2, 4), (2, 4), (2, 5), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['p_state_101', 'state_1', 'p_state_100'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 < pkt_0)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + 1;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000', 'p__br_tmp4', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['state_0', 'p_state_000', 'p__br_tmp4', 'p_state_001'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_state_000', 'operand1': 'p_state_001', 'operand2': 'p_state_000', 'result': '_out_s12', 'immediate_operand': '3'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_001', 'result': '_out_s12_0', 'immediate_operand': '0'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '3'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '4'}]}
Time taken: 5.0519795417785645 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp2 = !(p_pkt_0<p_state_000);

lhs p__br_tmp2 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_000']
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp3 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fddd938c760>, 'write': <dependencyGraph.Statement object at 0x7fddd938c820>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fddd93ce580>, 'write': <dependencyGraph.Statement object at 0x7fddd938c400>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fddd938c760>, 'write': <dependencyGraph.Statement object at 0x7fddd938c820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fddd93ce580>, 'write': <dependencyGraph.Statement object at 0x7fddd938c400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp2 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fddd938c0a0>, <dependencyGraph.Codelet object at 0x7fddd938c040>, <dependencyGraph.Codelet object at 0x7fddd938c9d0>]
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp2 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fddd938c0a0>, <dependencyGraph.Codelet object at 0x7fddd938c9d0>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp2 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp3'}
{'p__br_tmp3'}
u:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp3']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp3', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp3_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp3_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp3_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp3_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp3_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp3_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_4_stateless_p__br_tmp3_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp3 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp3_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp3_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp3_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp3_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp3_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp3_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp3_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp3_bnd_2.sk.out
['comp_4']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fddd938cf40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fddd938cf40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fddd938cf40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fddd938cf40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp3
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,5,
+---> dependencies of ALU  2 : 
3,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 135 rows, 93 columns and 300 nonzeros
Model fingerprint: 0x297dd5a1
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 21 columns
Presolve time: 0.01s
Presolved: 136 rows, 72 columns, 322 nonzeros
Variable types: 0 continuous, 72 integer (64 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 -0
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  -0.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
 > get_alu_stage: table  0 , alu_id =  4 :  -0.0
alu  4  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fddd938c6a0>, 0), (<alus.DominoALU object at 0x7fddd93c80a0>, 1), (<alus.DominoALU object at 0x7fddd93c80d0>, 2), (<alus.DominoALU object at 0x7fddd93c8100>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fddd938cf40>, 0), (<alus.DominoGenericSALU object at 0x7fddd938ceb0>, 1), (<alus.DominoGenericSALU object at 0x7fddd938ce80>, 2)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp3'], 'outputs': ['p_state_101', 'p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp2', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp2', 'p_state_001'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 9, 'operand0': '1', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '21'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp3', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 5), (2, 3), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp3'], 'outputs': ['p_state_101', 'p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  state_0 = state_0_0 + pkt_0;\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp2', 'p_state_001'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p_state_000', 'state_0', 'p__br_tmp2', 'p_state_001'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 10, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': '1', 'result': '_out_s12', 'immediate_operand': '2'}, {'id': 4, 'opcode': 9, 'operand0': '1', 'operand1': '1', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '21'}, {'id': 5, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '6'}, {'id': 6, 'opcode': 14, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp3', 'immediate_operand': '1'}]}
Time taken: 8.059902667999268 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
Using stateful ALU pred_raw
Using stateless ALU grammars/stateless_domino/stateless.sk
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fc76b9f8580>, 'write': <dependencyGraph.Statement object at 0x7fc76b9b6400>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fc76b9b6760>, 'write': <dependencyGraph.Statement object at 0x7fc76b9b6820>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fc76b9f8580>, 'write': <dependencyGraph.Statement object at 0x7fc76b9b6400>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fc76b9b6760>, 'write': <dependencyGraph.Statement object at 0x7fc76b9b6820>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc76b9b6100>, <dependencyGraph.Codelet object at 0x7fc76b9b6040>, <dependencyGraph.Codelet object at 0x7fc76b9b69d0>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc76b9b6100>, <dependencyGraph.Codelet object at 0x7fc76b9b69d0>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p_state_000'}
p_state_001  is write flank
p_state_000  is read flank
elements in v_outputs:  {'p_state_001', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  1
State variables:  ['state_0']
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
TODO: call synthesizer
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  {'p__br_tmp5'}
{'p__br_tmp5'}
u:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
v:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
number of outputs for  pred_raw :  2
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
 --------- processing stateful output ---------
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_1.sk
return code 1
failed
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk.out
running sketch, bnd = 2
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_4_stateless_p__br_tmp5_bnd_2.sk.out
processing: output is stateless.
 --------- processing stateless output p__br_tmp5 --------- 
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  3  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  4  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  5  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
>>>>>>>>>> add_new_alu: adding ALU with id  6  and component  comp_4 , type?  STATELESS
filename_to_compname: filename =  comp_4_stateless_p__br_tmp5_bnd_2.sk.out
['comp_4']
final_output:  _out_s20
   alu output:  _out_s12
   alu output:  _out_s12_0
   alu output:  _out_s12_1
   alu output:  _out_s20
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** found stateless dependency between ALU  3  and ALU  6
 *** found stateless dependency between ALU  4  and ALU  6
 *** found stateless dependency between ALU  5  and ALU  6
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  3
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  3
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc76b9b6f40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 3 has output _out_s12
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  4
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  4
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc76b9b6f40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 4 has output _out_s12_0
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  1  and ALU  5
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
 *** found stateless dependency between ALU  2  and ALU  5
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc76b9b6f40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 5 has output _out_s12_1
 *** Done finding stateless+stateful dependencies ***
------predecessor of comp  comp_4  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------predecessor of comp  comp_4  :  comp_2
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
------successor of comp  comp_4  :  comp_0
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
-------ALU in the component of  comp_0 :  [<alus.DominoGenericSALU object at 0x7fc76b9b6f40>]
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2', 3: 'comp_4', 4: 'comp_4', 5: 'comp_4', 6: 'comp_4'}
Stateless ALU id 6 has output p__br_tmp5
 *** found dependency between stateless ALU  6  and stateful ALU  0
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
3,4,5,
+---> dependencies of ALU  2 : 
3,4,5,
+---> dependencies of ALU  3 : 
6,
+---> dependencies of ALU  4 : 
6,
+---> dependencies of ALU  5 : 
6,
+---> dependencies of ALU  6 : 
0,
# alus: =  7
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 7}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: Adding var  T0_A_3
ILP_Gurobi: Adding var  T0_A_4
ILP_Gurobi: Adding var  T0_A_5
ILP_Gurobi: Adding var  T0_A_6
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 137 rows, 93 columns and 304 nonzeros
Model fingerprint: 0xa2391eef
Model has 84 general constraints
Variable types: 0 continuous, 93 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 1 rows and 22 columns
Presolve time: 0.01s
Presolved: 136 rows, 71 columns, 321 nonzeros
Variable types: 0 continuous, 71 integer (63 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 7.0000000
Found heuristic solution: objective 3.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 4: 3 7 10 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.000000000000e+00, best bound 3.000000000000e+00, gap 0.0000%
Optimal objective: 3
Following is the result we want:*****************
T0_A_0 3
T0_A_1 -0
T0_A_2 -0
T0_A_3 1
T0_A_4 1
T0_A_5 1
T0_A_6 2
************************************************
Obj: 3
number of stages:  4
stage:  3.0
action:  0
num stages:  4
stage:  -0.0
action:  1
num stages:  4
stage:  -0.0
action:  2
num stages:  4
stage:  1.0
action:  3
num stages:  4
stage:  1.0
action:  4
num stages:  4
stage:  1.0
action:  5
num stages:  4
stage:  2.0
action:  6
num stages:  4
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
 > get_alu_stage: table  0 , alu_id =  0 :  3.0
alu  0  is of type  STATEFUL ; scheduled to stage  3
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
 > get_alu_stage: table  0 , alu_id =  3 :  1.0
alu  3  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
 > get_alu_stage: table  0 , alu_id =  4 :  1.0
alu  4  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
 > get_alu_stage: table  0 , alu_id =  5 :  1.0
alu  5  is of type  STATELESS ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
 > get_alu_stage: table  0 , alu_id =  6 :  2.0
alu  6  is of type  STATELESS ; scheduled to stage  2
Codegen processed ALUs:  4  ;  [(<alus.DominoALU object at 0x7fc76b9b66a0>, 0), (<alus.DominoALU object at 0x7fc76b9f20a0>, 1), (<alus.DominoALU object at 0x7fc76b9f20d0>, 2), (<alus.DominoALU object at 0x7fc76b9f2100>, 3)]
Codegen processed SALUs:  3  ;  [(<alus.DominoGenericSALU object at 0x7fc76b9b6f40>, 0), (<alus.DominoGenericSALU object at 0x7fc76b9b6eb0>, 1), (<alus.DominoGenericSALU object at 0x7fc76b9b6e80>, 2)]
 * gen_dependency_list: dependency between  1  and  3
 * gen_dependency_list: dependency between  1  and  4
 * gen_dependency_list: dependency between  1  and  5
 * gen_dependency_list: dependency between  2  and  3
 * gen_dependency_list: dependency between  2  and  4
 * gen_dependency_list: dependency between  2  and  5
 * gen_dependency_list: dependency between  3  and  6
 * gen_dependency_list: dependency between  4  and  6
 * gen_dependency_list: dependency between  5  and  6
 * gen_dependency_list: dependency between  6  and  0
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['p_state_101', 'p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p__br_tmp4', 'p_state_001', 'p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p__br_tmp4', 'p_state_001', 'p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 4, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '1'}]}
----------------------------------------------------
{'num_pipeline_stages': 4, 'alu_dependencies': [(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 6), (6, 0)], 'stateful_alus': [{'inputs': ['state_1', 'p__br_tmp5'], 'outputs': ['p_state_101', 'p_state_100', 'state_1'], 'id': 0, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_0_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(0 == pkt_1)/*comp_0_..ateful.sk:133*/\n', '  {\n', '    state_0 = state_0_0 + pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = 0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p__br_tmp4', 'p_state_001', 'p_state_000', 'state_0'], 'id': 1, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_1_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_1_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0;\n']}, {'inputs': ['state_0', 'p_pkt_0'], 'outputs': ['p__br_tmp4', 'p_state_001', 'p_state_000', 'state_0'], 'id': 2, 'body': ['void salu (int state_0_0, int pkt_0, int pkt_1, ref int[2] _out0)/*comp_2_..ateful.sk:131*/\n', '{\n', '  _out0 = ((int[2])0);\n', '  int state_0 = state_0_0;\n', '  if(state_0_0 < pkt_0)/*comp_2_..ateful.sk:133*/\n', '  {\n', '    state_0 = pkt_0;\n', '  }\n', '  _out0[0] = state_0;\n', '  _out0[1] = state_0_0;\n']}], 'stateless_alus': [{'id': 3, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_001', 'operand2': 'p_state_001', 'result': '_out_s12', 'immediate_operand': '0'}, {'id': 4, 'opcode': 12, 'operand0': 'p_pkt_0', 'operand1': 'p_state_000', 'operand2': 'p_pkt_0', 'result': '_out_s12_0', 'immediate_operand': '2'}, {'id': 5, 'opcode': 4, 'operand0': 'p_state_000', 'operand1': '1', 'operand2': 'p_state_000', 'result': '_out_s12_1', 'immediate_operand': '2'}, {'id': 6, 'opcode': 18, 'operand0': '_out_s12', 'operand1': '_out_s12_0', 'operand2': '_out_s12_1', 'result': 'p__br_tmp5', 'immediate_operand': '1'}]}
Time taken: 4.071488857269287 s
preprocessor time:
