//
// ruijief:
// every stateless sketch file includes the below alu function 
// as a "alu black box," and it does not include any holes.
int alu(int opcode, int operand0, int operand1, int immediate_operand) {
	if (opcode == 0) {
		return operand0;
	}
    if (opcode == 1) {
        return immediate_operand;
    }
	if (opcode == 2) {
		return operand0 + operand1;
	}
    if (opcode == 3) {
        return operand0 + immediate_operand;
    }
	if (opcode == 4) {
		return operand1 - operand0;
	}
    if (opcode == 5) {
        return operand0 - immediate_operand;
    }
    if (opcode == 6) {
        return immediate_operand - operand0;
    }
    /*
    if (opcode == 7) {
        // max(operand0, operand1)
        return operand0 > operand1 ? operand0 : operand1;
    }
    if (opcode == 8) {
        // max(operand0, immediate_operand)
        return operand0 > immediate_operand ? operand0 : immediate_operand;
    }
    if (opcode == 9) {
        // min(operand0, operand1)
        return operand0 > operand1 ? operand1 : operand0;
    }
    else {
        // min(operand0, immediate_operand)
        return operand0 > immediate_operand ? immediate_operand : operand0;
    }*/
}

generator int expr(fun vars, int bnd) {
	assert bnd >= 1;
    int t = ??(1);

    if (t == 0) {
        return alu(??, vars(), vars(), ??);
    }
    if (t == 1) {
        return alu(??, expr(vars, bnd-1), expr(vars, bnd-1), ??);
    }
}

int blue_decrease_1(int p_now_plus_free, int p_now) {
    p_now_plus_free = p_now - 1;
    return p_now_plus_free;
}

harness void sketch(int p_now_plus_free, int p_now) {
    generator int vars() {
        return {|p_now_plus_free | p_now |};
    }

    assert(expr(vars, 1) == blue_decrease_1(p_now_plus_free, p_now));
}