SKETCH version 1.7.6
Benchmark = blue_decrease_stateful_2.sk
/* BEGIN PACKAGE ANONYMOUS*/
/*blue_de..eful_2.sk:245*/

void blue_decrease_2 (int p_now_plus_free, int last_update_0, int p_mark_1, int p_now, ref int[2] _out)/*blue_de..eful_2.sk:245*/
{
  _out = ((int[2])0);
  int p_mark = p_mark_1;
  int last_update = last_update_0;
  if(p_now_plus_free > last_update_0)/*blue_de..eful_2.sk:247*/
  {
    p_mark = p_mark_1 - 2;
    last_update = p_now;
  }
  _out[0] = last_update;
  _out[1] = p_mark;
  return;
}
/*blue_de..eful_2.sk:81*/

void bool_op (int opcode, bit o1, bit o2, ref bit _out)/*blue_de..eful_2.sk:81*/
{
  if(opcode == 0)/*blue_de..eful_2.sk:82*/
  {
    _out = 0;
    return;
  }
  if(opcode == 1)/*blue_de..eful_2.sk:85*/
  {
    _out = !(o1 | o2);
    return;
  }
  if(opcode == 2)/*blue_de..eful_2.sk:88*/
  {
    _out = (!(o1)) & o2;
    return;
  }
  if(opcode == 3)/*blue_de..eful_2.sk:91*/
  {
    _out = !(o1);
    return;
  }
  if(opcode == 4)/*blue_de..eful_2.sk:94*/
  {
    _out = o1 & (!(o2));
    return;
  }
  if(opcode == 5)/*blue_de..eful_2.sk:97*/
  {
    _out = !(o2);
    return;
  }
  if(opcode == 6)/*blue_de..eful_2.sk:100*/
  {
    _out = o1 & o2;
    return;
  }
  if(opcode == 7)/*blue_de..eful_2.sk:104*/
  {
    _out = !(o1 & o2);
    return;
  }
  if(opcode == 8)/*blue_de..eful_2.sk:107*/
  {
    _out = o1 & o2;
    return;
  }
  if(opcode == 9)/*blue_de..eful_2.sk:110*/
  {
    _out = !(o1 & o2);
    return;
  }
  if(opcode == 10)/*blue_de..eful_2.sk:114*/
  {
    _out = o2;
    return;
  }
  if(opcode == 11)/*blue_de..eful_2.sk:117*/
  {
    _out = (!(o1)) | o2;
    return;
  }
  if(opcode == 12)/*blue_de..eful_2.sk:120*/
  {
    _out = o1;
    return;
  }
  if(opcode == 13)/*blue_de..eful_2.sk:123*/
  {
    _out = o1 | (!(o2));
    return;
  }
  if(opcode == 14)/*blue_de..eful_2.sk:126*/
  {
    _out = o1 | o2;
    return;
  }
  else
  {
    _out = 1;
    return;
  }
}
/*blue_de..eful_2.sk:136*/

void compute_alu (int op, int o1, int o2, ref int _out)/*blue_de..eful_2.sk:136*/
{
  if(op == 0)/*blue_de..eful_2.sk:137*/
  {
    _out = o1 + o2;
    return;
  }
  if(op == 1)/*blue_de..eful_2.sk:140*/
  {
    _out = o1 - o2;
    return;
  }
  if(op == 2)/*blue_de..eful_2.sk:143*/
  {
    _out = o2 - o1;
    return;
  }
  if(op == 3)/*blue_de..eful_2.sk:146*/
  {
    _out = o2;
    return;
  }
  if(op == 4)/*blue_de..eful_2.sk:149*/
  {
    _out = o1;
    return;
  }
  if(op == 5)/*blue_de..eful_2.sk:152*/
  {
    _out = 0;
    return;
  }
  else
  {
    _out = 1;
    return;
  }
}
/*blue_de..eful_2.sk:160*/

void salu (int metadata_lo, int metadata_hi, int register_lo_0, int register_hi_1, ref int[2] _out)/*blue_de..eful_2.sk:160*/
{
  _out = ((int[2])0);
  int register_hi = register_hi_1;
  int register_lo = register_lo_0;
  int update_hi_1_value_s13 = 0;
  compute_alu(2, 2, register_hi_1, update_hi_1_value_s13)//{};
  int update_hi_2_value_s23 = 0;
  compute_alu(1, 0, 2, update_hi_2_value_s23)//{};
  int update_lo_1_value_s33 = 0;
  compute_alu(2, 21, register_hi_1, update_lo_1_value_s33)//{};
  int update_lo_2_value_s43 = 0;
  compute_alu(0, metadata_hi, 0, update_lo_2_value_s43)//{};
  bit condition_hi_s55 = ((0 - metadata_lo) - register_hi_1) == 0;
  bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) < 0;
  bit update_hi_1_predicate_s69 = 0;
  bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);
  bit update_hi_2_predicate_s71 = 0;
  bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);
  bit update_lo_1_predicate_s73 = 0;
  bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);
  bit update_lo_2_predicate_s75 = 0;
  bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);
  assert (!(update_hi_1_predicate_s69 && update_hi_2_predicate_s71)); //ASSERTION CAN NOT BE SATISFIED: blue_de..eful_2.sk:196 Assert at blue_de..eful_2.sk:196 (1)
  if(update_hi_1_predicate_s69 && (!(update_hi_2_predicate_s71)))/*blue_de..eful_2.sk:197*/
  {
    register_hi = update_hi_1_value_s13;
  }
  else
  {
    if((!(update_hi_1_predicate_s69)) && update_hi_2_predicate_s71)/*blue_de..eful_2.sk:199*/
    {
      register_hi = update_hi_2_value_s23;
    }
    else
    {
      register_hi = register_hi_1;
    }
  }
  assert (!(update_lo_1_predicate_s73 && update_lo_2_predicate_s75)); //ASSERTION CAN NOT BE SATISFIED: blue_de..eful_2.sk:207 Assert at blue_de..eful_2.sk:207 (1)
  if(update_lo_1_predicate_s73 && (!(update_lo_2_predicate_s75)))/*blue_de..eful_2.sk:208*/
  {
    register_lo = update_lo_1_value_s33;
  }
  else
  {
    if((!(update_lo_1_predicate_s73)) && update_lo_2_predicate_s75)/*blue_de..eful_2.sk:210*/
    {
      register_lo = update_lo_2_value_s43;
    }
    else
    {
      register_lo = register_lo_0;
    }
  }
  _out[0] = register_lo;
  _out[1] = register_hi;
  return;
}
/*blue_de..eful_2.sk:256*/

void sketch (int p_now_plus_free, int last_update, int p_mark, int p_now)/*blue_de..eful_2.sk:256*/
{
  int[2] impl_s1 = {0,0};
  salu(p_now_plus_free, p_now, last_update, p_mark, impl_s1);
  int[2] spec_s3 = {0,0};
  blue_decrease_2(p_now_plus_free, last_update, p_mark, p_now, spec_s3);
  assert ((impl_s1[0]) == (spec_s3[0])); //Assert at blue_de..eful_2.sk:259 (1)
  assert ((impl_s1[1]) == (spec_s3[1])); //Assert at blue_de..eful_2.sk:260 (1)
}
/*blue_de..eful_2.sk:256*/

void sketch__Wrapper (int p_now_plus_free, int last_update, int p_mark, int p_now)  implements sketch__WrapperNospec/*blue_de..eful_2.sk:256*/
{
  sketch(p_now_plus_free, last_update, p_mark, p_now);
}
/*blue_de..eful_2.sk:256*/

void sketch__WrapperNospec (int p_now_plus_free, int last_update, int p_mark, int p_now)/*blue_de..eful_2.sk:256*/
{ }
/* END PACKAGE ANONYMOUS*/
[SKETCH] DONE
Total time = 305
