
lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp00 = p_pkt_10>p_state_100;

lhs p__br_tmp00 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp00 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_tmp1 = p_state_000-2;

lhs p_tmp1 rhs p_state_000-2
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_tmp1 = p_state_000-2;

 is_read_flank: processing rhs_vars =  ['p_state_000']
state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;

lhs state_0 rhs (p__br_tmp00) ? p_tmp1 : p_state_000
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_tmp1', 'p_state_000']
write flank
state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;

lhs state_1 rhs (p__br_tmp00) ? (p_pkt_0) : p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;

 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
write flank
finding dependencies
RAW p_state_000 = state_0; p_tmp1 = p_state_000-2;
RAW p_state_000 = state_0; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
RAW p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp00 = p_pkt_10>p_state_100;
RAW p__br_tmp00 = p_pkt_10>p_state_100; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
RAW p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;
RAW p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x101f82d30>, 'write': <dependencyGraph.Statement object at 0x101f82ac0>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x101f82e20>, 'write': <dependencyGraph.Statement object at 0x101f82d90>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x101f82d30>, 'write': <dependencyGraph.Statement object at 0x101f82ac0>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100
var:  state_0
{'read': <dependencyGraph.Statement object at 0x101f82e20>, 'write': <dependencyGraph.Statement object at 0x101f82d90>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000
SCC 0
v p_state_000 = state_0; stmts len 1
p_state_000 = state_0;
v p_tmp1 = p_state_000-2; stmts len 1
p_tmp1 = p_state_000-2;
v state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000; stmts len 1
state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_tmp1', 'p_state_000']
SCC 1
v p_state_100 = state_1; stmts len 1
p_state_100 = state_1;
v p__br_tmp00 = p_pkt_10>p_state_100; stmts len 1
p__br_tmp00 = p_pkt_10>p_state_100;
v state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100; stmts len 1
state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
SCC 2
v p_pkt_10 = p_pkt_0-10; stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x101f824f0>, <dependencyGraph.Codelet object at 0x101f82040>, <dependencyGraph.Codelet object at 0x101f82100>]
p_state_000 = state_0;
p_tmp1 = p_state_000-2;
state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_tmp1', 'p_state_000']
stateful
p_state_100 = state_1;
p__br_tmp00 = p_pkt_10>p_state_100;
state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x101f824f0>, <dependencyGraph.Codelet object at 0x101f82040>}
state vars {'state_1', 'state_0'}
Created output directory all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out
Synthesizer
output dir all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_tmp1', 'p_state_000']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_tmp1', 'p_state_000']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
number of POs:  0
 # state_vars :  ['state_0']
 # state_vars :  ['state_1']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_tmp1', 'p_state_000']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p__br_tmp00', 'p_pkt_0', 'p_state_100']
:  comp_1  -> comp_0
:  comp_2  -> comp_1
--------------------- stateless components from BCI --------------------
------- Stateful Component:  comp_0
p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
# state_vars:  ['state_0']
-------
------- Stateful Component:  comp_1
p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;
# state_vars:  ['state_1']
-------
------- Stateless Component:  comp_2
p_pkt_10 = p_pkt_0-10;
-------
------------------------------------------------- Merging components... ------------------------------------
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;', 'p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
 node outputs:  ['p_tmp1', 'state_0', 'p_state_000']
 node inputs:  ['p__br_tmp00', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
     |  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;
adj_inputs ['p__br_tmp00', 'state_0']
redundant outputs ['p_state_100']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_tmp1', 'p_state_000']
state_var ['state_0']
 ~ merge_candidate: a inputs :  ['p_pkt_0', 'state_1', 'p_pkt_10']
 ~ merge_candidate: a outputs :  ['p__br_tmp00', 'state_1']
 ~ merge_candidate: b inputs :  ['p__br_tmp00', 'state_0']
 ~ merge_candidate: b outputs :  ['state_0']
                | merge_candidate: a_output_vars :  ['p__br_tmp00', 'state_1']
                | merge_candidate: b_output_vars :  ['state_0']
                | merge_candidate: merged output_vars :  []
     ~ merge_candidate: checking inputs size...
     | a inputs:  ['p_pkt_0', 'state_1', 'p_pkt_10']
     | b inputs:  ['p__br_tmp00', 'state_0']
     | merged inputs:  ['state_0', 'p_pkt_0', 'p_pkt_10']
                | merged state vars:  {'state_1', 'state_0'}
                | merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
                | merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;
 | b:  p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
 | state_pkt_fields of component a:  ['(p__br_tmp00) ? (p_pkt_0) : p_state_100', 'p_state_100']
 | state_pkt_fields of component b:  ['(p__br_tmp00) ? p_tmp1 : p_state_000', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;
 ********************** adding statements from component  p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;  with *************************
[<dependencyGraph.Statement object at 0x101f82e20>, <dependencyGraph.Statement object at 0x101f82d00>, <dependencyGraph.Statement object at 0x101f82d90>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100; p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
new component inputs:  ['p_pkt_0', 'state_1', 'p_pkt_10', 'state_0']
new component outputs:  ['state_1', 'p__br_tmp00', 'p_state_000', 'p_state_100', 'p_tmp1', 'state_0']
new component state_pkt_fields:  ['(p__br_tmp00) ? (p_pkt_0) : p_state_100', 'p_state_100', '(p__br_tmp00) ? p_tmp1 : p_state_000', 'p_state_000']
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_000', 'p_state_100', 'p_tmp1']
state_var ['state_1', 'state_0']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p_pkt_0', 'state_1', 'p_pkt_10', 'state_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/try_merge_comp_1_stateful_bnd_1.sk > all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/try_merge_comp_1_stateful_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/try_merge_comp_1_stateful_bnd_1.sk
return code 0
solved
output is in all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/try_merge_comp_1_stateful_bnd_1.sk.out
---------- Merge success. ---------
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;
 | component b:  p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
 | state_pkt_fields of component a:  ['(p__br_tmp00) ? (p_pkt_0) : p_state_100', 'p_state_100']
 | state_pkt_fields of component b:  ['(p__br_tmp00) ? p_tmp1 : p_state_000', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;
 ********************** adding statements from component  p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;  with *************************
[<dependencyGraph.Statement object at 0x101f82e20>, <dependencyGraph.Statement object at 0x101f82d00>, <dependencyGraph.Statement object at 0x101f82d90>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_000', 'p_state_100', 'p_tmp1']
state_var ['state_1', 'state_0']
                * new component :  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100; p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
                * new component inputs :  ['p_pkt_0', 'state_1', 'p_pkt_10', 'state_0']
                * new component outputs :  ['state_1', 'state_0']
                * state_pkt_fields of new component:  ['(p__br_tmp00) ? (p_pkt_0) : p_state_100', 'p_state_100', '(p__br_tmp00) ? p_tmp1 : p_state_000', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100; p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100; p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['p_pkt_0', 'state_1', 'p_pkt_10', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100; p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
 ~ merge_candidate: a inputs :  ['p_pkt_0']
 ~ merge_candidate: a outputs :  ['p_pkt_10']
 ~ merge_candidate: b inputs :  ['p_pkt_0', 'state_1', 'p_pkt_10', 'state_0']
 ~ merge_candidate: b outputs :  ['state_1', 'state_0']
                ~ merge_candidate: component b state_vars length != 1
                | merge_candidate: a_output_vars :  ['p_pkt_10']
                | merge_candidate: b_output_vars :  ['state_1', 'state_0']
                | merge_candidate: merged output_vars :  []
     ~ merge_candidate: checking inputs size...
     | a inputs:  ['p_pkt_0']
     | b inputs:  ['p_pkt_0', 'state_1', 'p_pkt_10', 'state_0']
     | merged inputs:  ['p_pkt_0', 'state_1', 'state_0']
                | merged state vars:  {'state_1', 'state_0'}
                | merged stateless vars:  ['p_pkt_0']
                | merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100; p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
 | state_pkt_fields of component b:  ['(p__br_tmp00) ? (p_pkt_0) : p_state_100', 'p_state_100', '(p__br_tmp00) ? p_tmp1 : p_state_000', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100; p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x101f82ca0>]
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100; p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
new component inputs:  ['p_pkt_0', 'state_1', 'state_0']
new component outputs:  ['state_1', 'state_0', 'p__br_tmp00', 'p_state_000', 'p_state_100', 'p_tmp1', 'p_pkt_10']
new component state_pkt_fields:  ['(p__br_tmp00) ? (p_pkt_0) : p_state_100', 'p_state_100', '(p__br_tmp00) ? p_tmp1 : p_state_000', 'p_state_000']
adj_inputs []
redundant outputs ['p__br_tmp00', 'p_state_000', 'p_state_100', 'p_tmp1', 'p_pkt_10']
state_var ['state_1', 'state_0']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['p_pkt_0', 'state_1', 'state_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/try_merge_comp_1_stateful_bnd_1.sk > all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/try_merge_comp_1_stateful_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/try_merge_comp_1_stateful_bnd_1.sk
try_mer.._bnd_1.sk:238: There is a variable in the rhs of the assignment that may not have been initialized. All variables must be statically initialized.
[ERROR] [SKETCH] Failed with IllegalStateException exception; message: Semantic check failed
return code 1
failed
---------- Merge failure. ---------
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100; p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10;
 node outputs:  ['p_pkt_10']
 node inputs:  ['p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p_pkt_0', 'state_1', 'p_pkt_10', 'state_0'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  ['p_pkt_10']
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10;
 * recursive_merge: finished processing  p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
------------------------------------------------- Merge components end. ------------------------------------
 * number of components in current graph:  2
----------------------------------
comp index {}
Eliminate redundant outputs after merging
 -------- component  0  is this:  p_pkt_10 = p_pkt_0-10;
0
p_pkt_10 = p_pkt_0-10;
redundant outputs []
inputs ['p_pkt_0']
outputs ['p_pkt_10']
 -------- component  1  is this:  p_state_100 = state_1; p__br_tmp00 = p_pkt_10>p_state_100; state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100; p_state_000 = state_0; p_tmp1 = p_state_000-2; state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
1
p_state_100 = state_1;
p__br_tmp00 = p_pkt_10>p_state_100;
state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;
p_state_000 = state_0;
p_tmp1 = p_state_000-2;
state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
inputs ['p_pkt_0', 'state_1', 'p_pkt_10', 'state_0']
outputs ['state_1', 'state_0']
Synthesize each codelet
0
p_pkt_10 = p_pkt_0-10;
inputs ['p_pkt_0']
outputs ['p_pkt_10']
 > codelet output directory: all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out
sketch all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/comp_0_stateless_p_pkt_10_bnd_1.sk > all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/comp_0_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/comp_0_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/comp_0_stateless_p_pkt_10_bnd_1.sk.out
processing sketch output...
processing: output is stateless.
process_stateless_output: processing file  all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/comp_0_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_0_stateless_p_pkt_10_bnd_1.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATELESS
filename_to_compname: filename =  comp_0_stateless_p_pkt_10_bnd_1.sk.out
['comp_0']
1
p_state_100 = state_1;
p__br_tmp00 = p_pkt_10>p_state_100;
state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;
p_state_000 = state_0;
p_tmp1 = p_state_000-2;
state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;
inputs ['p_pkt_0', 'state_1', 'p_pkt_10', 'state_0']
outputs ['state_1', 'state_0']
 > codelet output directory: all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out
~~~~~~~~~~set_alu_inputs:  ['p_pkt_0', 'state_1', 'p_pkt_10', 'state_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/comp_1_stateful_bnd_1.sk > all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/comp_1_stateful_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/comp_1_stateful_bnd_1.sk
return code 0
solved
output is in all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/comp_1_stateful_bnd_1.sk.out
processing sketch output...
processing: output is stateful.
 find_output_dst: reading from sketch file  all_mutations/_blue_decrease_equivalent_3_canonicalizer.c_out/comp_1_stateful_bnd_1.sk
find_output_dst: trying to find `void comp_1`
done
curr line:      int[2] _out;

curr line:      bit p__br_tmp00;

curr line:      int p_state_000;

curr line:      int p_state_100;

curr line:      int p_tmp1;

curr line:      p_state_100 = state_1;

curr line:      p__br_tmp00 = p_pkt_10>p_state_100;

curr line:      state_1 = (p__br_tmp00) ? (p_pkt_0) : p_state_100;

curr line:      p_state_000 = state_0;

curr line:      p_tmp1 = p_state_000-2;

curr line:      state_0 = (p__br_tmp00) ? p_tmp1 : p_state_000;

curr line:      _out[0] = state_1;

 > FOUND OUT LINE :     _out[0] = state_1;

curr line:      _out[1] = state_0;

 > FOUND OUT LINE :     _out[1] = state_0;

> found out variable:  state_0
curr line:      return _out;

curr line: }

done ---- outs[-1] is  state_0
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= p_pkt_10  register_lo= state_1  register_hi= state_0  output_dst= state_0
demangled line:  _out0 = ( ( int [ 2 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 23 24 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 23, 24, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 11 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 11, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_lo = ( metadata_hi - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_hi - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 0 condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, 0, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(0)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 0 condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, 0, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (0)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 0 condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, 0, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 0 condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, 0, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_.._bnd_1.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_.._bnd_1.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_.._bnd_1.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_.._bnd_1.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful_bnd_1.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful_bnd_1.sk.out
['comp_1']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.Component'>
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
alu1 id:  0  ; alu1 type:  STATELESS
alu2 id:  0  ; alu2 type:  STATELESS
alu1 id:  0  ; alu1 type:  STATELESS
alu2 id:  1  ; alu2 type:  STATEFUL
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
------successor of comp  comp_0  :  comp_1
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1'}
-------ALU in the component of  comp_1 :  [<sketch_output_processor.SALU object at 0x101f82a30>]
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1'}
 *** found dependency between stateless ALU  0  and stateful ALU  1
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
NewTable:2;(1,0)
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 :  []
+---> dependencies of ALU  1 :  [<sketch_output_processor.ALU object at 0x101f82160>]
# alus: =  2
 * gen_dependency_list: dependency between  0  and  1
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(0, 1)]}
Come here------------------------
Gurobi Optimizer version 9.1.2 build v9.1.2rc0 (mac64[arm])
Thread count: 8 physical cores, 8 logical processors, using up to 8 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x4fbb38f3
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
Presolve removed 39 rows and 3 columns
Presolve time: 0.00s
Presolved: 9 rows, 25 columns, 72 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds
Thread count was 8 (of 8 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 0
T0_A_1 1
************************************************
Obj: 1
number of stages:  2
stage:  0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
number of stages:  2
stage:  0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
================P4Codegen
[<sketch_output_processor.ALU object at 0x101f82160>, <sketch_output_processor.SALU object at 0x101f82a30>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATELESS ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
Codegen processed ALUs:  1  ;  [(<sketch_output_processor.ALU object at 0x101f82160>, 0)]
Codegen processed SALUs:  1  ;  [(<sketch_output_processor.SALU object at 0x101f82a30>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  state_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_10
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
generate_stateless_alu_matrix: stage  1 , with ALUs  [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <sketch_output_processor.SALU object at 0x101f82a30>
 - curr_stage:  1
 -* this SALU:  <sketch_output_processor.SALU object at 0x101f82a30>
salu_configs:  [[0], [1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.state_0', 'update_hi_1_value': '(alu_hi)-(2)', 'update_hi_2_value': '(23)+(24)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(alu_lo)-(1)', 'condition_lo': '(ipv4.p_pkt_10-alu_lo)>0', 'update_hi_1_predicate': '( not (0)) and (condition_lo)', 'update_hi_2_predicate': '(0)', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}], [{'output_dst': 'ipv4.state_0', 'update_hi_1_value': '(alu_hi)-(2)', 'update_hi_2_value': '(23)+(24)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(alu_lo)-(1)', 'condition_lo': '(ipv4.p_pkt_10-alu_lo)>0', 'update_hi_1_predicate': '( not (0)) and (condition_lo)', 'update_hi_2_predicate': '(0)', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}], [{'enable': 0, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[0], [1]]
num pipeline stages:  2
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
Traceback (most recent call last):
  File "/Users/rjf/Projects/synthesis/minDepthCompiler/src/run-tests.py", line 98, in <module>
    codegen = p4_codegen.P4Codegen(ilp_table, ilp_output, "test")
  File "/Users/rjf/Projects/synthesis/minDepthCompiler/src/p4_codegen.py", line 28, in __init__
    self.tofinop4 = populate_j2.TofinoP4(sketch_name, self.num_alus_per_stage, \
  File "/Users/rjf/Projects/synthesis/minDepthCompiler/src/populate_j2.py", line 216, in __init__
    self._stateful_alus_wellformed()
  File "/Users/rjf/Projects/synthesis/minDepthCompiler/src/populate_j2.py", line 139, in _stateful_alus_wellformed
    self._check_fields(self.stateful_alus[i][j], self.stateful_alu_fields)
  File "/Users/rjf/Projects/synthesis/minDepthCompiler/src/populate_j2.py", line 95, in _check_fields
    raise Exception('_check_fields(...): field ' + field + ' is not in dict\n') 
Exception: _check_fields(...): field condition_hi is not in dict

