int compute_alu(int o1, int o2) {
	int opcode = ??(3);
	if (opcode == 0) {
		return o1 + o2;
	}
	else if (opcode == 1) {
		return o1 - o2;
	}
	else if (opcode == 2) {
		return o2 - o1;
	}
	else if (opcode == 3) {
		return o2;
	}
	else if (opcode == 4) {
		return o1;
	}
	else if (opcode == 5) {
		return 0;
	}
	else {
		return 1;
	}
}

int salu(int metadata_lo, int metadata_hi, int register_lo, int register_hi) {
    int original_lo = register_lo;
    int original_hi = register_hi;
    
    // compute_alu(A, B), where A can be metadata or constant
    // where B can be register or constant

    // Model computation ALUs from Tofino salu.pdf
    int update_hi_1_value = compute_alu(Mux3(metadata_lo, metadata_hi, C()), Mux3(register_lo, register_hi, C()));
    int update_hi_2_value = compute_alu(Mux3(metadata_lo, metadata_hi, C()), Mux3(register_lo, register_hi, C()));
    int update_lo_1_value = compute_alu(Mux3(metadata_lo, metadata_hi, C()), Mux3(register_lo, register_hi, C()));
    int update_lo_2_value = compute_alu(Mux3(metadata_lo, metadata_hi, C()), Mux3(register_lo, register_hi, C()));

    // Comparison unit
    // NOTE: rel_op doesn't support >-, <= but it should be enough because
    // bool_op (used to compute the ALU predicates) has support for ~.
    bit condition_hi = rel_op(arith_op(arith_op(0, Mux3(metadata_lo, metadata_hi, 0)),
                                    Mux3(register_lo, register_hi, 0)) + C(),
                            0);
    bit condition_lo = rel_op(arith_op(arith_op(0, Mux3(metadata_lo, metadata_hi, 0)),
                                    Mux3(register_lo, register_hi, 0)) + C(),
                            0);

    // ALU predicates
    bit update_hi_1_predicate = bool_op(condition_hi, condition_lo);
    bit update_hi_2_predicate = bool_op(condition_hi, condition_lo);
    bit update_lo_1_predicate = bool_op(condition_hi, condition_lo);
    bit update_lo_2_predicate = bool_op(condition_hi, condition_lo);

    // Actually run the ALUs
    if (update_hi_1_predicate && update_hi_2_predicate) {
    // TODO: Implement necessary code to compute bitwise OR using bit vectors.
    // Following line needs to be written as register_hi = update_hi_1_value | update_hi_2_value.
    // The bitwise OR of the two alu values. Sketch only supports bitwise OR for
    // bit vectors not for ints. So we now leave this as assert(false) to catch
    // that certain benchmarks don't pass because of this.
        assert(false);
    } else if (update_hi_1_predicate && !update_hi_2_predicate) {
        register_hi = update_hi_1_value;
    } else if (!update_hi_1_predicate && update_hi_2_predicate) {
        register_hi = update_hi_2_value;
    } else {
        register_hi = register_hi;
    }

    if (update_lo_1_predicate && update_lo_2_predicate) {
    // TODO: Same as above.
        assert(false);
    } else if (update_lo_1_predicate && !update_lo_2_predicate) {
        register_lo = update_lo_1_value;
    } else if (!update_lo_1_predicate && update_lo_2_predicate) {
        register_lo = update_lo_2_value;
    } else {
        register_lo = register_lo;
    }

    int alu_lo = register_lo;
    int alu_hi = register_hi;

    // TODO: We can only update one metadata field, and we don't know at this point
    // which one will get updated. We would return simply one value from here and
    // let the output mux choose. To handle this, we would like to change all
    // stateful alus to return one single integer value and modify related Python
    // sketch generator scripts to accomodate this.
    int output_value = Mux4(original_lo, original_hi, alu_lo, alu_hi);
    return output_value;
}