salu1(0, 0, count, 0, 0); // stateful update to count
p_br_tmp0 = salu2(0, 0, count, 0, 0); // This implements count == 29. This should implement the stateful update too.
p_sample = salu3(p_br_tmp0, 0, 0, 0, 1);
salu2 salu3

void salu1 (int metadata_lo, int metadata_hi, int register_lo_0, int register_hi_1, bit stateless_flag, ref int _out)/*statele..tofino.sk:138*/
{
  int register_hi = register_hi_1;
  int update_hi_1_value = 0;
  int update_hi_2_value = 0;
  if(stateless_flag)/*statele..tofino.sk:147*/
  {
    int update_hi_1_value_s14 = 0;
    stateful_compute_alu(0, metadata_lo, 0, update_hi_1_value_s14)//{};
    update_hi_1_value = update_hi_1_value_s14;
    int update_hi_2_value_s22 = 0;
    stateful_compute_alu(0, metadata_lo, 0, update_hi_2_value_s22)//{};
    update_hi_2_value = update_hi_2_value_s22;
    int update_lo_1_value_s30 = 0;
    stateful_compute_alu(0, metadata_lo, 0, update_lo_1_value_s30)//{};
    int update_lo_2_value_s38 = 0;
    stateful_compute_alu(0, metadata_lo, 0, update_lo_2_value_s38)//{};
  }
  else
  {
    int update_hi_1_value_s48 = 0;
    stateful_compute_alu(0, 1, register_lo_0, update_hi_1_value_s48)//{};
    update_hi_1_value = update_hi_1_value_s48;
    int update_hi_2_value_s58 = 0;
    stateful_compute_alu(0, 1, register_lo_0, update_hi_2_value_s58)//{};
    update_hi_2_value = update_hi_2_value_s58;
    int update_lo_1_value_s68 = 0;
    stateful_compute_alu(7, 22, 30, update_lo_1_value_s68)//{};
    int update_lo_2_value_s78 = 0;
    stateful_compute_alu(2, metadata_lo, 3, update_lo_2_value_s78)//{};
  }
  bit condition_hi = 0;
  bit condition_lo = 0;
  if(stateless_flag)/*statele..tofino.sk:168*/
  {
    condition_hi = metadata_lo == 0;
    condition_lo = metadata_lo != 0;
  }
  else
  {
    condition_hi = (metadata_lo - 0) <= 0;
    condition_lo = ((metadata_lo - register_lo_0) + 29) != 0;
  }
  bit update_hi_1_predicate_s124 = condition_hi & condition_lo;
  assert (!(update_hi_1_predicate_s124 && (!(condition_hi)))); //ASSERTION CAN NOT BE SATISFIED: statele..tofino.sk:200 Assert at statele..tofino.sk:200 (1)
  if(update_hi_1_predicate_s124 && (!(!(condition_hi))))/*statele..tofino.sk:201*/
  {
    register_hi = update_hi_1_value;
  }
  else
  {
    if((!(update_hi_1_predicate_s124)) && (!(condition_hi)))/*statele..tofino.sk:203*/
    {
      register_hi = update_hi_2_value;
    }
    else
    {
      register_hi = register_hi_1;
    }
  }
  assert (!((!(condition_hi)) && (condition_hi | condition_lo))); //ASSERTION CAN NOT BE SATISFIED: statele..tofino.sk:211 Assert at statele..tofino.sk:211 (1)
  _out = register_hi;
  return;
}

void salu2 (int metadata_lo, int metadata_hi, int register_lo_0, int register_hi_1, bit stateless_flag, ref int _out)/*statele..tofino.sk:138*/
{
  int register_hi = register_hi_1;
  int update_hi_1_value = 0;
  int update_hi_2_value = 0;
  if(stateless_flag)/*statele..tofino.sk:147*/
  {
    int update_hi_1_value_s14 = 0;
    stateful_compute_alu(0, metadata_lo, 0, update_hi_1_value_s14)//{};
    update_hi_1_value = update_hi_1_value_s14;
    int update_hi_2_value_s22 = 0;
    stateful_compute_alu(0, metadata_lo, 0, update_hi_2_value_s22)//{};
    update_hi_2_value = update_hi_2_value_s22;
    int update_lo_1_value_s30 = 0;
    stateful_compute_alu(0, metadata_lo, 0, update_lo_1_value_s30)//{};
    int update_lo_2_value_s38 = 0;
    stateful_compute_alu(0, metadata_lo, 0, update_lo_2_value_s38)//{};
  }
  else
  {
    int update_hi_1_value_s48 = 0;
    stateful_compute_alu(1, 30, register_lo_0, update_hi_1_value_s48)//{};
    update_hi_1_value = update_hi_1_value_s48;
    int update_hi_2_value_s58 = 0;
    stateful_compute_alu(2, 25, register_lo_0, update_hi_2_value_s58)//{};
    update_hi_2_value = update_hi_2_value_s58;
    int update_lo_1_value_s68 = 0;
    stateful_compute_alu(3, 28, 21, update_lo_1_value_s68)//{};
    int update_lo_2_value_s78 = 0;
    stateful_compute_alu(6, 0, register_lo_0, update_lo_2_value_s78)//{};
  }
  bit condition_hi = 0;
  bit condition_lo = 0;
  if(stateless_flag)/*statele..tofino.sk:168*/
  {
    condition_hi = metadata_lo > 0;
    condition_lo = metadata_lo < 0;
  }
  else
  {
    condition_hi = ((0 - register_lo_0) + 25) != 0;
    condition_lo = ((metadata_lo - register_lo_0) + 29) == 0;
  }
  bit update_hi_1_predicate_s124 = condition_hi & condition_lo;
  assert (!(update_hi_1_predicate_s124 && (!(condition_hi)))); //ASSERTION CAN NOT BE SATISFIED: statele..tofino.sk:200 Assert at statele..tofino.sk:200 (1)
  if(update_hi_1_predicate_s124 && (!(!(condition_hi))))/*statele..tofino.sk:201*/
  {
    register_hi = update_hi_1_value;
  }
  else
  {
    if((!(update_hi_1_predicate_s124)) && (!(condition_hi)))/*statele..tofino.sk:203*/
    {
      register_hi = update_hi_2_value;
    }
    else
    {
      register_hi = register_hi_1;
    }
  }
  assert (!((!(condition_hi)) && (condition_hi & condition_lo))); //ASSERTION CAN NOT BE SATISFIED: statele..tofino.sk:211 Assert at statele..tofino.sk:211 (1)
  _out = register_hi;
  return;
}

void salu3 (int metadata_lo, int metadata_hi, int register_lo_0, int register_hi_1, bit stateless_flag, ref int _out)/*statele..tofino.sk:138*/
{
  int register_lo = register_lo_0;
  int update_lo_1_value = 0;
  int update_lo_2_value = 0;
  if(stateless_flag)/*statele..tofino.sk:147*/
  {
    int update_hi_1_value_s14 = 0;
    stateful_compute_alu(7, metadata_hi, 16, update_hi_1_value_s14)//{};
    int update_hi_2_value_s22 = 0;
    stateful_compute_alu(1, metadata_hi, 1, update_hi_2_value_s22)//{};
    int update_lo_1_value_s30 = 0;
    stateful_compute_alu(4, 21, 0, update_lo_1_value_s30)//{};
    update_lo_1_value = update_lo_1_value_s30;
    int update_lo_2_value_s38 = 0;
    stateful_compute_alu(7, metadata_lo, 4, update_lo_2_value_s38)//{};
    update_lo_2_value = update_lo_2_value_s38;
  }
  else
  {
    int update_hi_1_value_s48 = 0;
    stateful_compute_alu(0, metadata_lo, register_lo_0, update_hi_1_value_s48)//{};
    int update_hi_2_value_s58 = 0;
    stateful_compute_alu(0, metadata_lo, register_lo_0, update_hi_2_value_s58)//{};
    int update_lo_1_value_s68 = 0;
    stateful_compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s68)//{};
    update_lo_1_value = update_lo_1_value_s68;
    int update_lo_2_value_s78 = 0;
    stateful_compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s78)//{};
    update_lo_2_value = update_lo_2_value_s78;
  }
  bit condition_hi = 0;
  bit condition_lo = 0;
  if(stateless_flag)/*statele..tofino.sk:168*/
  {
    condition_hi = ((0 - metadata_lo) + 1) == 0;
    condition_lo = ((0 - metadata_lo) - 5) == 0;
  }
  else
  {
    condition_hi = (metadata_lo + register_lo_0) == 0;
    condition_lo = (metadata_lo + register_lo_0) > 0;
  }
  bit update_lo_1_predicate_s128 = condition_hi & condition_lo;
  bit update_lo_2_predicate_s130 = condition_hi | condition_lo;
  assert (!((condition_hi & condition_lo) && (!(condition_hi)))); //ASSERTION CAN NOT BE SATISFIED: statele..tofino.sk:200 Assert at statele..tofino.sk:200 (1)
  assert (!(update_lo_1_predicate_s128 && update_lo_2_predicate_s130)); //ASSERTION CAN NOT BE SATISFIED: statele..tofino.sk:211 Assert at statele..tofino.sk:211 (1)
  if(update_lo_1_predicate_s128 && (!(update_lo_2_predicate_s130)))/*statele..tofino.sk:212*/
  {
    register_lo = update_lo_1_value;
  }
  else
  {
    if((!(update_lo_1_predicate_s128)) && update_lo_2_predicate_s130)/*statele..tofino.sk:214*/
    {
      register_lo = update_lo_2_value;
    }
    else
    {
      register_lo = register_lo_0;
    }
  }
  _out = register_lo;
  return;
}

int stateful_compute_alu(int op, int o1, int o2) {
	if (op == 0) {
		return o1 + o2;
	}
	else if (op == 1) {
		return o1 - o2;
	}
	else if (op == 2) {
		return o2 - o1;
	}
	else if (op == 3) {
		return o2;
	}
	else if (op == 4) {
		return o1;
	}
	else if (op == 5) {
		return 0;
	}
	else {
		return 1;
	}
}






