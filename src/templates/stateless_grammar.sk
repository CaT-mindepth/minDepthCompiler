int iteop = 14;

generator int relop() {
	return {|6 | 8 | 10 | 12|};
}

int alu(int op, int o1, int o2) {
	if (op == 0) {
		return {|?? | -??|};
	}
	if (op == 1) {
		return o1 + o2;
	}
	if (op == 3) {
		return o1 - o2;
	}
}


int alu_ite(int op, bit o1, int o2, int o3) {
	return o1 ? o2 : o3;

	/*dst = cond? src: dst
	neither cond nor src can be a PHV*/
}

bit alu_rel(int relop, int o1, int o2) {
	if (relop == 6) {
		return o1 != o2;
	}
	if (relop == 8) {
		return o1 == o2;
	}
	if (relop == 10) {
		return o1 >= o2;
	}
	if (relop == 12) {
		return o1 < o2;
	}
}

bit alu_bool(int op, bit o1, bit o2) {
	if (op == 16) {
		return o1 | o2;
	}
	if (op == 18) {
		return o1 & o2;
	}
}

generator int expr(fun vars, fun bool_vars, int bnd) {
	assert bnd >= 0;
	int t = ??(3);
	if (t == 0) {
		return vars();
	}
	if (t == 1) {
		return ??;
	}
	if (t == 2) {
		return -??;
	}
	if (t == 3) {
		return alu_ite(iteop, bool_expr(vars, bool_vars, bnd-1), expr(vars, bool_vars, bnd-1), expr(vars, bool_vars, bnd-1));
	}
	if (t == 4) {
		return alu(1, expr(vars, bool_vars, bnd-1), expr(vars, bool_vars, bnd-1));
	}
	else {
		return alu(3, expr(vars, bool_vars, bnd-1), expr(vars, bool_vars, bnd-1));
	}
}

generator bit bool_expr(fun vars, fun bool_vars, int bnd) {
	assert bnd >= 0;
	int t = ??(3);
	if (t == 0) {
		return bool_vars();
	}
	if (t == 1) {
		return {| 0 | 1 |};
	}
	if (t == 2) {
		return alu_rel(relop(), expr(vars, bool_vars, bnd-1), expr(vars, bool_vars, bnd-1));
	}
	if (t == 3) {
		return alu_bool(18, bool_expr(vars, bool_vars, bnd-1), bool_expr(vars, bool_vars, bnd-1));
	}
	else {
		return alu_bool(16, bool_expr(vars, bool_vars, bnd-1), bool_expr(vars, bool_vars, bnd-1));
	}
}
