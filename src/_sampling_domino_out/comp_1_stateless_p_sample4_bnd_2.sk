int alu(int opcode, int operand0, int operand1, int operand2, int immediate_operand) {
        if (opcode == 0) {
                return operand0;
        }
    if (opcode == 1) {
        return immediate_operand;
    }
        if (opcode == 2) {
                return operand0 + operand1;
        }
    if (opcode == 3) {
        return operand0 + immediate_operand;
    }
        if (opcode == 4) {
                return operand1 - operand0;
        }
    if (opcode == 5) {
        return (operand0 == immediate_operand);
    }
    if (opcode == 6) {
        return immediate_operand - operand0;
    }
    if (opcode == 7) {
        // max(operand0, operand1)
        return operand0 > operand1 ? operand0 : operand1;
    }
    if (opcode == 8) {
        // max(operand0, immediate_operand)
        return operand0 > immediate_operand ? operand0 : immediate_operand;
    }
    if (opcode == 9) {
        // min(operand0, operand1)
        return operand0 > operand1 ? operand1 : operand0;
    }
    if (opcode == 10) {
        return ((operand0 != 0) && (operand1 != 0));
    }
    if (opcode == 11) {
       return (operand0 != 0) ? operand1 : operand2;
    } else {
        // min(operand0, immediate_operand)
        return operand0 > immediate_operand ? immediate_operand : operand0;
    }
}
generator int expr(fun vars, int bnd) {
  assert bnd >= 1;
    int t = ??(1);

    if (t == 0) {
        return alu(??, vars(), vars(), vars(), ??);
    }
    if (t == 1) {
        return alu(??, expr(vars, bnd-1), expr(vars, bnd-1), expr(vars, bnd - 1),  ??);
    }
}int comp_1(bit p_br_tmp1, int p_sample0, bit p_br_tmp0){
	int p_sample2;
	int p_sample4;
	p_sample2 = p_br_tmp0 ? 1 : p_sample0;
	p_sample4 = p_br_tmp1 ? 0 : p_sample2;
	return p_sample4;
}

harness void sketch(bit p_br_tmp1, int p_sample0, bit p_br_tmp0) {
	generator int vars(){
		return {| 1 | p_sample0 |};
	}
	assert expr(vars, 2) == comp_1(p_br_tmp1, p_sample0, p_br_tmp0);
}
