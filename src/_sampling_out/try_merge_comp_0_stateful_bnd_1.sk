generator int C() { return ??; }

generator int Opt(int op1) {
  bit enable = ??(1);
  if (enable != 0) {
    return 0;
  }
  else {
    return op1;
  }
}

generator int Mux2(int op1, int op2) {
  int choice = ??(1);
  if (choice == 0) {
    return op1;
  }
  else {
    return op2;
  }
}

generator int Mux3(int op1, int op2, int op3) {
  int choice = ??(2);
  if (choice == 0) {
    return op1;
  }
  if (choice == 1) {
    return op2;
  }
  else {
    return op3;
  }
}

generator int Mux4(int op1, int op2, int op3, int op4) {
  int choice = ??(2);
  if (choice == 0) {
    return op1;
  }
  if (choice == 1) {
    return op2;
  }
  if (choice == 2) {
    return op3;
  }
  else {
    return op4;
  }
}

generator int arith_op(int o1, int o2) {
  int opcode = ??(1);
  if (opcode == 0) {
    return o1 + o2;
  } 
  else {
    return o1 - o2;
  }
}

generator bit rel_op(int o1, int o2) {
  int opcode = ??(2);
  if (opcode == 0) {
    return o1 != o2;
  }
  if (opcode == 1) {
    return o1 < o2;
  }
  if (opcode == 2) {
    return o1 > o2;
  }
  else {
    return o1 == o2;
  }
	//return {| o1 ( == | != | > | >= | < | <= ) o2 |};
}

bit bool_op(int opcode, bit o1, bit o2) {
	if (opcode == 0) {
		return 0;
	}
	if (opcode == 1) {
		return !(o1 | o2);
	}
  if (opcode == 2) {
    return (!o1) & o2;
  }
  if (opcode == 3) {
    return !o1;
  }
  if (opcode == 4) {
    return o1 & (!o2);
  }
  if (opcode == 5) {
    return !o2;
  }
  if (opcode == 6) {
    // used to be XOR; switched to AND because Tofino compiler doesn't accept it
    return o1 & o2;
  }
  if (opcode == 7) {
    return !(o1 & o2);
  }
  if (opcode == 8) {
    return o1 & o2;
  }
  if (opcode == 9) {
    // This used to be XOR; it's been switched to AND because the Tofino compiler doesn't accept it (issue #20).
    return !(o1 & o2);
  }
  if (opcode == 10) {
    return o2;
  }
  if (opcode == 11) {
    return (!o1) | o2;
  }
  if (opcode == 12) {
    return o1;
  }
  if (opcode == 13) {
    return o1 | (!o2);
  }
  if (opcode == 14) {
    return o1 | o2;
  }
	else {
		return 1;
	}
}



int compute_alu(int op, int o1, int o2) {
	if (op == 0) {
		return o1 + o2;
	}
	if (op == 1) {
		return o1 - o2;
	}
	if (op == 2) {
		return o2 - o1;
	}
	if (op == 3) {
		return o2;
	}
	if (op == 4) {
		return o1;
	}
	if (op == 5) {
		return 0;
	}
	else {
		return 1;
	}
}

int[2] salu(int metadata_lo, int metadata_hi, int register_lo, int register_hi) {
    int original_lo = register_lo;
    int original_hi = register_hi;
    
    // compute_alu(A, B), where A can be metadata or constant
    // where B can be register or constant

    // Model computation ALUs from Tofino salu.pdf
    int update_hi_1_value = compute_alu(??(3), Mux3(metadata_lo, metadata_hi, C()), Mux3(register_lo, register_hi, C()));
    int update_hi_2_value = compute_alu(??(3), Mux3(metadata_lo, metadata_hi, C()), Mux3(register_lo, register_hi, C()));
    int update_lo_1_value = compute_alu(??(3), Mux3(metadata_lo, metadata_hi, C()), Mux3(register_lo, register_hi, C()));
    int update_lo_2_value = compute_alu(??(3), Mux3(metadata_lo, metadata_hi, C()), Mux3(register_lo, register_hi, C()));

    // Comparison unit
    // NOTE: rel_op doesn't support >-, <= but it should be enough because
    // bool_op (used to compute the ALU predicates) has support for ~.
    bit condition_hi = rel_op(arith_op(arith_op(0, Mux3(metadata_lo, metadata_hi, 0)),
                                    Mux3(register_lo, register_hi, 0)) + C(),
                            0);
    bit condition_lo = rel_op(arith_op(arith_op(0, Mux3(metadata_lo, metadata_hi, 0)),
                                    Mux3(register_lo, register_hi, 0)) + C(),
                            0);

    // ALU predicates
    bit update_hi_1_predicate = bool_op(??(4), condition_hi, condition_lo);
    bit update_hi_2_predicate = bool_op(??(4), condition_hi, condition_lo);
    bit update_lo_1_predicate = bool_op(??(4), condition_hi, condition_lo);
    bit update_lo_2_predicate = bool_op(??(4), condition_hi, condition_lo);

    // Actually run the ALUs
    if (update_hi_1_predicate && update_hi_2_predicate) {
    // TODO: Implement necessary code to compute bitwise OR using bit vectors.
    // Following line needs to be written as register_hi = update_hi_1_value | update_hi_2_value.
    // The bitwise OR of the two alu values. Sketch only supports bitwise OR for
    // bit vectors not for ints. So we now leave this as assert(false) to catch
    // that certain benchmarks don't pass because of this.
        assert(false);
    } else if (update_hi_1_predicate && !update_hi_2_predicate) {
        register_hi = update_hi_1_value;
    } else if (!update_hi_1_predicate && update_hi_2_predicate) {
        register_hi = update_hi_2_value;
    } else {
        register_hi = register_hi;
    }

    if (update_lo_1_predicate && update_lo_2_predicate) {
    // TODO: Same as above.
        assert(false);
    } else if (update_lo_1_predicate && !update_lo_2_predicate) {
        register_lo = update_lo_1_value;
    } else if (!update_lo_1_predicate && update_lo_2_predicate) {
        register_lo = update_lo_2_value;
    } else {
        register_lo = register_lo;
    }

    int alu_lo = register_lo;
    int alu_hi = register_hi;

    // TODO: We can only update one metadata field, and we don't know at this point
    // which one will get updated. We would return simply one value from here and
    // let the output mux choose. To handle this, we would like to change all
    // stateful alus to return one single integer value and modify related Python
    // sketch generator scripts to accomodate this.
    int output_value = Mux4(original_lo, original_hi, alu_lo, alu_hi);
    
    int[2] result;
    result[0] = register_lo; // register_lo is the state variable
    result[1] = output_value; 
    return result;
}

int[2] comp_0(int count, int p_sample0){
	int[2] _out;
	int p_sample2;
	int p_count0;
	int p_count2;
	int p_count3;
	bit p_br_tmp0;
	int p_count4;
	int p_sample4;
	bit p_br_tmp1;
	p_count0 = count;
	p_br_tmp1 = !(p_count0 == 30 - 1);
	p_br_tmp0 = (p_count0 == 30 - 1);
	p_count2 = p_br_tmp0 ? 0 : p_count0;
	p_count3 = p_count2 + 1;
	p_count4 = p_br_tmp1 ? p_count3 : p_count2;
	count = p_count4;
	p_sample2 = p_br_tmp0 ? 1 : p_sample0;
	p_sample4 = p_br_tmp1 ? 0 : p_sample2;
	_out[0] = count;
	_out[1] = p_sample4;
	return _out;
}

harness void sketch(int count, int p_sample0) {
	int[2] impl = salu(p_sample0, 0, count, 0);
	int [2] spec = comp_0(count, p_sample0);
	assert(impl[0] == spec[0]);
	assert(impl[1] == spec[1]);
}
