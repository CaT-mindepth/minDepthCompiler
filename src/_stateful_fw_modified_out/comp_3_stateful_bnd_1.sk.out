SKETCH version 1.7.6
Benchmark = _stateful_fw_modified_out/comp_3_stateful_bnd_1.sk
/* BEGIN PACKAGE ANONYMOUS*/
/*comp_3_.._bnd_1.sk:79*/

void bool_op (int opcode, bit o1, bit o2, ref bit _out0)/*comp_3_.._bnd_1.sk:79*/
{
  if(opcode == 0)/*comp_3_.._bnd_1.sk:80*/
  {
    _out0 = 0;
    return;
  }
  if(opcode == 1)/*comp_3_.._bnd_1.sk:83*/
  {
    _out0 = !(o1 | o2);
    return;
  }
  if(opcode == 2)/*comp_3_.._bnd_1.sk:86*/
  {
    _out0 = (!(o1)) & o2;
    return;
  }
  if(opcode == 3)/*comp_3_.._bnd_1.sk:89*/
  {
    _out0 = !(o1);
    return;
  }
  if(opcode == 4)/*comp_3_.._bnd_1.sk:92*/
  {
    _out0 = o1 & (!(o2));
    return;
  }
  if(opcode == 5)/*comp_3_.._bnd_1.sk:95*/
  {
    _out0 = !(o2);
    return;
  }
  if(opcode == 6)/*comp_3_.._bnd_1.sk:98*/
  {
    _out0 = o1 & o2;
    return;
  }
  if(opcode == 7)/*comp_3_.._bnd_1.sk:102*/
  {
    _out0 = !(o1 & o2);
    return;
  }
  if(opcode == 8)/*comp_3_.._bnd_1.sk:105*/
  {
    _out0 = o1 & o2;
    return;
  }
  if(opcode == 9)/*comp_3_.._bnd_1.sk:108*/
  {
    _out0 = !(o1 & o2);
    return;
  }
  if(opcode == 10)/*comp_3_.._bnd_1.sk:112*/
  {
    _out0 = o2;
    return;
  }
  if(opcode == 11)/*comp_3_.._bnd_1.sk:115*/
  {
    _out0 = (!(o1)) | o2;
    return;
  }
  if(opcode == 12)/*comp_3_.._bnd_1.sk:118*/
  {
    _out0 = o1;
    return;
  }
  if(opcode == 13)/*comp_3_.._bnd_1.sk:121*/
  {
    _out0 = o1 | (!(o2));
    return;
  }
  if(opcode == 14)/*comp_3_.._bnd_1.sk:124*/
  {
    _out0 = o1 | o2;
    return;
  }
  else
  {
    _out0 = 1;
    return;
  }
}
/*comp_3_.._bnd_1.sk:230*/

void comp_3 (int p_drop1_0, int p_established_p_array_index1_2, ref int[2] _out0)/*comp_3_.._bnd_1.sk:230*/
{
  _out0 = ((int[2])0);
  int p_drop1 = (p_established_p_array_index1_2 == 0 ? 1 : 0);
  _out0[0] = p_drop1;
  _out0[1] = p_drop1;
  return;
}
/*comp_3_.._bnd_1.sk:134*/

void compute_alu (int op, int o1, int o2, ref int _out0)/*comp_3_.._bnd_1.sk:134*/
{
  if(op == 0)/*comp_3_.._bnd_1.sk:135*/
  {
    _out0 = o1 + o2;
    return;
  }
  if(op == 1)/*comp_3_.._bnd_1.sk:138*/
  {
    _out0 = o1 - o2;
    return;
  }
  if(op == 2)/*comp_3_.._bnd_1.sk:141*/
  {
    _out0 = o2 - o1;
    return;
  }
  if(op == 3)/*comp_3_.._bnd_1.sk:144*/
  {
    _out0 = o2;
    return;
  }
  if(op == 4)/*comp_3_.._bnd_1.sk:147*/
  {
    _out0 = o1;
    return;
  }
  if(op == 5)/*comp_3_.._bnd_1.sk:150*/
  {
    _out0 = 0;
    return;
  }
  else
  {
    _out0 = 1;
    return;
  }
}
/*comp_3_.._bnd_1.sk:158*/

void salu (int metadata_lo, int metadata_hi, int register_lo_0, int register_hi_1, ref int[2] _out0)/*comp_3_.._bnd_1.sk:158*/
{
  _out0 = ((int[2])0);
  int register_lo = register_lo_0;
  int update_hi_1_value_s13 = 0;
  compute_alu(3, 4, 1, update_hi_1_value_s13)//{};
  int update_hi_2_value_s23 = 0;
  compute_alu(1, 4, 14, update_hi_2_value_s23)//{};
  int update_lo_1_value_s33 = 0;
  compute_alu(6, 0, register_hi_1, update_lo_1_value_s33)//{};
  int update_lo_2_value_s43 = 0;
  compute_alu(5, 14, 27, update_lo_2_value_s43)//{};
  bit condition_hi_s55 = (((0 - metadata_lo) - 0) + 2) == 0;
  bit condition_lo_s67 = (((0 - metadata_lo) - 0) + 1) > 0;
  bit update_hi_1_predicate_s69 = 0;
  bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);
  bit update_hi_2_predicate_s71 = 0;
  bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);
  bit update_lo_1_predicate_s73 = 0;
  bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);
  bit update_lo_2_predicate_s75 = 0;
  bool_op(13, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);
  assert (!(update_hi_1_predicate_s69 && update_hi_2_predicate_s71)); //ASSERTION CAN NOT BE SATISFIED: comp_3_.._bnd_1.sk:194 Assert at comp_3_.._bnd_1.sk:194 (1)
  assert (!(update_lo_1_predicate_s73 && update_lo_2_predicate_s75)); //ASSERTION CAN NOT BE SATISFIED: comp_3_.._bnd_1.sk:205 Assert at comp_3_.._bnd_1.sk:205 (1)
  if(update_lo_1_predicate_s73 && (!(update_lo_2_predicate_s75)))/*comp_3_.._bnd_1.sk:206*/
  {
    register_lo = update_lo_1_value_s33;
  }
  else
  {
    if((!(update_lo_1_predicate_s73)) && update_lo_2_predicate_s75)/*comp_3_.._bnd_1.sk:208*/
    {
      register_lo = update_lo_2_value_s43;
    }
    else
    {
      register_lo = register_lo_0;
    }
  }
  _out0[0] = register_lo;
  _out0[1] = register_lo;
  return;
}
/*comp_3_.._bnd_1.sk:240*/

void sketch (int p_drop1, int p_established_p_array_index1_2)/*comp_3_.._bnd_1.sk:240*/
{
  int[2] impl_s1 = {0,0};
  salu(p_established_p_array_index1_2, 0, p_drop1, 0, impl_s1);
  int[2] spec_s3 = {0,0};
  comp_3(p_drop1, p_established_p_array_index1_2, spec_s3);
  assert ((impl_s1[0]) == (spec_s3[0])); //Assert at comp_3_.._bnd_1.sk:243 (1)
  assert ((impl_s1[1]) == (spec_s3[1])); //Assert at comp_3_.._bnd_1.sk:244 (1)
}
/*comp_3_.._bnd_1.sk:240*/

void sketch__Wrapper (int p_drop1, int p_established_p_array_index1_2)  implements sketch__WrapperNospec/*comp_3_.._bnd_1.sk:240*/
{
  sketch(p_drop1, p_established_p_array_index1_2);
}
/*comp_3_.._bnd_1.sk:240*/

void sketch__WrapperNospec (int p_drop1, int p_established_p_array_index1_2)/*comp_3_.._bnd_1.sk:240*/
{ }
/* END PACKAGE ANONYMOUS*/
[SKETCH] DONE
Total time = 303
