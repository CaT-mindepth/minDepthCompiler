int alu(int opcode, int pkt_0, int pkt_1, int pkt_2, int immediate_operand) {
    if (opcode == 0) {
    return immediate_operand;
    } elif (opcode == 1) {
    return pkt_0 + pkt_1;
    } elif (opcode == 2) {
    return pkt_0 + immediate_operand;
    } elif (opcode == 3) {
    return pkt_0 - pkt_1;
    } elif (opcode == 4) {
    return pkt_0 - immediate_operand;
    } elif (opcode == 5) {
    return immediate_operand - pkt_0;
    } elif (opcode == 6) {
    return pkt_0!=pkt_1;
    } elif (opcode == 7) {
    return (pkt_0 != immediate_operand);
    } elif (opcode == 8) {
    return (pkt_0 == pkt_1);
    } elif (opcode == 9) {
    return (pkt_0 == immediate_operand);
    } elif (opcode == 10) {
    return (pkt_0 >= pkt_1);
    } elif (opcode == 11) {
    return (pkt_0 >= immediate_operand);
    } elif (opcode == 12) {
    return (pkt_0 < pkt_1);
    } elif (opcode == 13) {
    return (pkt_0 < immediate_operand);
    } elif (opcode == 14) {
    return pkt_0 != 0 ? pkt_1 : pkt_2;
    } elif (opcode == 15) {
    return pkt_0 != 0 ? pkt_1 : immediate_operand;
    } elif (opcode == 16) {
    return ((pkt_0 != 0) || (pkt_1 != 0));
    } elif (opcode == 17) {
    return ((pkt_0 != 0) || (immediate_operand != 0));
    }  elif (opcode == 18) {
    return ((pkt_0 != 0) && (pkt_1 != 0));
    } elif (opcode == 19) {
    return ((pkt_0 != 0) && (immediate_operand != 0));
    } else {
    return (pkt_0 == 0);
    }
/*
   if (opcode == 0) {
                return operand0;
        }
    if (opcode == 1) {
        return immediate_operand;
    }
        if (opcode == 2) {
                return operand0 + operand1;
        }
    if (opcode == 3) {
        return operand0 + immediate_operand;
    }
        if (opcode == 4) {
                return operand1 - operand0;
        }
    if (opcode == 5) {
        return (operand0 == immediate_operand);
    }
    if (opcode == 6) {
        return immediate_operand - operand0;
    }
    if (opcode == 7) {
        // max(operand0, operand1)
        return operand0 > operand1 ? operand0 : operand1;
    }
    if (opcode == 8) {
        // max(operand0, immediate_operand)
        return operand0 > immediate_operand ? operand0 : immediate_operand;
    }
    if (opcode == 9) {
        // min(operand0, operand1)
        return operand0 > operand1 ? operand1 : operand0;
    }
    if (opcode == 10) {
        return ((operand0 != 0) && (operand1 != 0));
    }
    if (opcode == 11) {
       return (operand0 != 0) ? operand1 : operand2;
    } else {
        // min(operand0, immediate_operand)
        return operand0 > immediate_operand ? immediate_operand : operand0;
    }*/
}

generator int expr(fun vars, int bnd) {
  assert bnd >= 1;
    int t = ??(1);

    if (t == 0) {
        return alu(??, vars(), vars(), vars(), ??);
    }
    if (t == 1) {
        return alu(??, expr(vars, bnd-1), expr(vars, bnd-1), expr(vars, bnd - 1),  ??);
    }
}