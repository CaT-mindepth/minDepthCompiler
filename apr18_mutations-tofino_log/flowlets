running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_1. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f0e19ad85b0>, 'write': <dependencyGraph.Statement object at 0x7f0e19ad8310>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f0e19ad8580>, 'write': <dependencyGraph.Statement object at 0x7f0e19ad8370>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f0e19ad85b0>, 'write': <dependencyGraph.Statement object at 0x7f0e19ad8310>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f0e19ad8580>, 'write': <dependencyGraph.Statement object at 0x7f0e19ad8370>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f0e19ad8a90>, <dependencyGraph.Codelet object at 0x7f0e19ad8040>, <dependencyGraph.Codelet object at 0x7f0e19ad88b0>, <dependencyGraph.Codelet object at 0x7f0e19ad8a30>, <dependencyGraph.Codelet object at 0x7f0e19ad88e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f0e19ad8a30>, <dependencyGraph.Codelet object at 0x7f0e19ad8040>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out
Stored read, write flank variables
{'pkt_saved_hop01', 'pkt_last_time00', 'pkt_last_time01', 'pkt_saved_hop00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f0e19ad8820>]
adj_inputs []
redundant outputs ['pkt_saved_hop01', 'pkt_next_hop0', 'pkt_saved_hop00']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop01', 'pkt_saved_hop00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f0e19ad8820>]
removing two old components
adj_inputs []
redundant outputs ['pkt_saved_hop01', 'pkt_next_hop0', 'pkt_saved_hop00']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop01', 'pkt_saved_hop00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_last_time00', 'pkt_new_hop', 'pkt_arrival', 'saved_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_last_time00', 'pkt_new_hop', 'pkt_arrival']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_last_time00', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp1', 'saved_hop', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_arrival', 'pkt_last_time01']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_last_time01']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f0e19ad8130>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 'pkt_last_time01', 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | component b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f0e19ad8130>]
removing two old components
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_arrival', 'pkt_last_time01']
		* new component outputs :  ['pkt__br_tmp1', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time00', 'pkt_last_time01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1', 'last_time']
 node inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp1', 'saved_hop', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['pkt_arrival', 'last_time']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f0e19ad87c0>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f0e19ad87c0>]
removing two old components
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['pkt__br_tmp1', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time00', 'pkt_last_time01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1', 'last_time']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp1', 'saved_hop', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  set()
set()
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop01;

curr line: 	int pkt_next_hop0;

curr line: 	int pkt_saved_hop00;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	pkt_next_hop0 = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_next_hop0;

 > FOUND OUT LINE : 	_out[2] = pkt_next_hop0;

> found out variable:  pkt_next_hop0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_next_hop0
Constructing new SALU: id= 0  metadata_lo= pkt__br_tmp1  metadata_hi= pkt_new_hop  register_lo= saved_hop  register_hi= 0  output_dst= pkt_next_hop0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 metadata_lo 4 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, metadata_lo, 4, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_hi 29 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 29, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+1)>0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - 0 ) + 1 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-0)+1)!=0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - 0) + 1) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_1_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit pkt__br_tmp1;

curr line: 	int pkt_last_time00;

curr line: 	int pkt_last_time01;

curr line: 	pkt_last_time01 = pkt_arrival;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = pkt__br_tmp1;

> found out variable:  pkt__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt__br_tmp1
Constructing new SALU: id= 1  metadata_lo= pkt_arrival  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 1 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 1, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 29 30 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 29, 30, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 2 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 2, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 31 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+31)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 31) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 5 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+5)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 5) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0'}
>>>>>>>>>>ALU1 outputs ['pkt__br_tmp1']
 *** found stateful dependencies between  1  and  0
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
# alus: =  2
 * gen_dependency_list: dependency between  1  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x6fdc813c
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f0e19ad86d0>, <alus.SALU object at 0x7f0e19b0d580>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f0e19ad86d0>, 0), (<alus.SALU object at 0x7f0e19b0d580>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  pkt_next_hop0
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f0e19ad86d0>
 -* this SALU:  <alus.SALU object at 0x7f0e19b0d580>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f0e19ad86d0>
 -* this SALU:  <alus.SALU object at 0x7f0e19b0d580>
salu_configs:  [[0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '0', 'update_hi_2_value': '(ipv4.pkt__br_tmp1)-(alu_hi)', 'update_lo_1_value': '(ipv4.pkt_new_hop)+(alu_lo)', 'update_lo_2_value': '(ipv4.pkt_new_hop)', 'condition_hi': '((0-alu_lo)+1)>0', 'condition_lo': '(((0-ipv4.pkt__br_tmp1)-0)+1) !=0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(alu_lo)-(1)', 'update_hi_2_value': '(30)-(29)', 'update_lo_1_value': '(ipv4.pkt_arrival)-(0)', 'update_lo_2_value': '(ipv4.pkt_arrival)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+31)==0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+5)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) or (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': '(condition_hi) or ( not (condition_lo))', 'output_value': '0'}], [{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '0', 'update_hi_2_value': '(ipv4.pkt__br_tmp1)-(alu_hi)', 'update_lo_1_value': '(ipv4.pkt_new_hop)+(alu_lo)', 'update_lo_2_value': '(ipv4.pkt_new_hop)', 'condition_hi': '((0-alu_lo)+1)>0', 'condition_lo': '(((0-ipv4.pkt__br_tmp1)-0)+1) !=0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(alu_lo)-(1)', 'update_hi_2_value': '(30)-(29)', 'update_lo_1_value': '(ipv4.pkt_arrival)-(0)', 'update_lo_2_value': '(ipv4.pkt_arrival)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+31)==0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+5)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) or (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': '(condition_hi) or ( not (condition_lo))', 'output_value': '0'}]]
[[], []]
[[0, 1], [1, 0]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        pkt__br_tmp1 : 32 (signed);   
        pkt_next_hop0 : 32 (signed);   
        pkt_new_hop : 32 (signed);   
        pkt_arrival : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.pkt_arrival)+alu_lo)+5)<0;
    condition_hi              : (((0-ipv4.pkt_arrival)+alu_lo)+31)==0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (ipv4.pkt_arrival)-(0);
    update_lo_2_predicate     : (condition_hi) or ( not (condition_lo));
    update_lo_2_value         : (ipv4.pkt_arrival);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (alu_lo)-(1);
    update_hi_2_predicate     : (condition_hi) or (condition_lo);
    update_hi_2_value         : (30)-(29);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.pkt__br_tmp1)-0)+1) !=0;
    condition_hi              : ((0-alu_lo)+1)>0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.pkt_new_hop)+(alu_lo);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (ipv4.pkt_new_hop);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : 0;
    update_hi_2_predicate     : false;
    update_hi_2_value         : (ipv4.pkt__br_tmp1)-(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.pkt_next_hop0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.6812641620635986 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_2. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7f39eb668580>, 'write': <dependencyGraph.Statement object at 0x7f39eb668370>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f39eb6685b0>, 'write': <dependencyGraph.Statement object at 0x7f39eb668310>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f39eb668580>, 'write': <dependencyGraph.Statement object at 0x7f39eb668370>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f39eb6685b0>, 'write': <dependencyGraph.Statement object at 0x7f39eb668310>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f39eb668a90>, <dependencyGraph.Codelet object at 0x7f39eb668040>, <dependencyGraph.Codelet object at 0x7f39eb6688b0>, <dependencyGraph.Codelet object at 0x7f39eb668a30>, <dependencyGraph.Codelet object at 0x7f39eb6688e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f39eb668a30>, <dependencyGraph.Codelet object at 0x7f39eb668040>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out
Stored read, write flank variables
{'pkt_saved_hop00', 'pkt_saved_hop01', 'pkt_last_time00', 'pkt_last_time01'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f39eb668820>]
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop01', 'pkt_saved_hop00']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop01', 'pkt_saved_hop00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f39eb668820>]
removing two old components
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop01', 'pkt_saved_hop00']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop01', 'pkt_saved_hop00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_last_time00', 'pkt_new_hop', 'pkt_arrival', 'saved_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_last_time00', 'pkt_new_hop', 'pkt_arrival']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_last_time00', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp1', 'pkt_new_hop', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_last_time01', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_last_time01', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f39eb668130>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | component b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f39eb668130>]
removing two old components
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_last_time01', 'pkt_arrival']
		* new component outputs :  ['pkt__br_tmp1', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time00', 'pkt_last_time01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1', 'last_time']
 node inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp1', 'pkt_new_hop', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['last_time', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f39eb6687c0>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f39eb6687c0>]
removing two old components
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['pkt__br_tmp1', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time00', 'pkt_last_time01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1', 'last_time']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp1', 'pkt_new_hop', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  set()
set()
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_next_hop0;

curr line: 	int pkt_saved_hop01;

curr line: 	int pkt_saved_hop00;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	pkt_next_hop0 = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_next_hop0;

 > FOUND OUT LINE : 	_out[2] = pkt_next_hop0;

> found out variable:  pkt_next_hop0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_next_hop0
Constructing new SALU: id= 0  metadata_lo= pkt__br_tmp1  metadata_hi= pkt_new_hop  register_lo= saved_hop  register_hi= 0  output_dst= pkt_next_hop0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 6 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 6, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 24 21 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 24, 21, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 27 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 27, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 6 6 14 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 6, 14, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_hi ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_hi)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_hi_1) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_hi ) + register_lo ) + 1 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_hi)+register_lo)+1)!=0
    ( line =    bit condition_lo_s67 = (((0 - metadata_hi) + register_lo_0) + 1) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_2_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit pkt__br_tmp1;

curr line: 	int pkt_last_time00;

curr line: 	int pkt_last_time01;

curr line: 	pkt_last_time01 = pkt_arrival;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = pkt__br_tmp1;

> found out variable:  pkt__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt__br_tmp1
Constructing new SALU: id= 1  metadata_lo= pkt_arrival  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 3 0 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, 0, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 10 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 10, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 16 5 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 16, 5, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 5 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+5)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 5) < 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_hi ) + 27 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_hi)+27)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_hi) + 27) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0'}
>>>>>>>>>>ALU1 outputs ['pkt__br_tmp1']
 *** found stateful dependencies between  1  and  0
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
# alus: =  2
 * gen_dependency_list: dependency between  1  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x6fdc813c
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f39eb6686d0>, <alus.SALU object at 0x7f39eb69d580>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f39eb6686d0>, 0), (<alus.SALU object at 0x7f39eb69d580>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  pkt_next_hop0
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f39eb6686d0>
 -* this SALU:  <alus.SALU object at 0x7f39eb69d580>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f39eb6686d0>
 -* this SALU:  <alus.SALU object at 0x7f39eb69d580>
salu_configs:  [[0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(1)-(6)', 'update_hi_2_value': '(24)+(21)', 'update_lo_1_value': '(ipv4.pkt_new_hop)', 'update_lo_2_value': '1', 'condition_hi': '((0-ipv4.pkt__br_tmp1)-alu_hi)==0', 'condition_lo': '(((0-ipv4.pkt_new_hop)+alu_lo)+1) !=0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(1)', 'update_hi_2_value': '(alu_lo)-(10)', 'update_lo_1_value': '(ipv4.pkt_arrival)+(0)', 'update_lo_2_value': '(5)-(16)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+5)<0', 'condition_lo': '((0-0)+27)<0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': '0'}], [{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(1)-(6)', 'update_hi_2_value': '(24)+(21)', 'update_lo_1_value': '(ipv4.pkt_new_hop)', 'update_lo_2_value': '1', 'condition_hi': '((0-ipv4.pkt__br_tmp1)-alu_hi)==0', 'condition_lo': '(((0-ipv4.pkt_new_hop)+alu_lo)+1) !=0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(1)', 'update_hi_2_value': '(alu_lo)-(10)', 'update_lo_1_value': '(ipv4.pkt_arrival)+(0)', 'update_lo_2_value': '(5)-(16)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+5)<0', 'condition_lo': '((0-0)+27)<0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[], []]
[[0, 1], [1, 0]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        pkt__br_tmp1 : 32 (signed);   
        pkt_next_hop0 : 32 (signed);   
        pkt_new_hop : 32 (signed);   
        pkt_arrival : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-0)+27)<0;
    condition_hi              : (((0-ipv4.pkt_arrival)+alu_lo)+5)<0;
    update_lo_1_predicate     : true;
    update_lo_1_value         : (ipv4.pkt_arrival)+(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (5)-(16);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (1);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (alu_lo)-(10);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.pkt_new_hop)+alu_lo)+1) !=0;
    condition_hi              : ((0-ipv4.pkt__br_tmp1)-alu_hi)==0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (ipv4.pkt_new_hop);
    update_lo_2_predicate     : false;
    update_lo_2_value         : 1;
    update_hi_1_predicate     :  not (condition_lo);
    update_hi_1_value         : (1)-(6);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (24)+(21);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt_next_hop0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.5858280658721924 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_3. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f4d45b5e5b0>, 'write': <dependencyGraph.Statement object at 0x7f4d45b5e310>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f4d45b5e580>, 'write': <dependencyGraph.Statement object at 0x7f4d45b5e370>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f4d45b5e5b0>, 'write': <dependencyGraph.Statement object at 0x7f4d45b5e310>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f4d45b5e580>, 'write': <dependencyGraph.Statement object at 0x7f4d45b5e370>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f4d45b5ea90>, <dependencyGraph.Codelet object at 0x7f4d45b5e0d0>, <dependencyGraph.Codelet object at 0x7f4d45b5e8b0>, <dependencyGraph.Codelet object at 0x7f4d45b5ea30>, <dependencyGraph.Codelet object at 0x7f4d45b5e8e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f4d45b5ea30>, <dependencyGraph.Codelet object at 0x7f4d45b5e0d0>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out
Stored read, write flank variables
{'pkt_last_time00', 'pkt_last_time01', 'pkt_saved_hop01', 'pkt_saved_hop00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f4d45b5e820>]
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop01', 'pkt_saved_hop00']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop01', 'pkt_saved_hop00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f4d45b5e820>]
removing two old components
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop01', 'pkt_saved_hop00']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop01', 'pkt_saved_hop00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_last_time00', 'pkt_arrival', 'pkt_new_hop', 'saved_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_last_time00', 'pkt_arrival', 'pkt_new_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_last_time00', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_arrival', 'pkt_last_time01']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_last_time01']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f4d45b5e1c0>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 'pkt_last_time01', 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | component b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f4d45b5e1c0>]
removing two old components
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_arrival', 'pkt_last_time01']
		* new component outputs :  ['pkt__br_tmp1', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time00', 'pkt_last_time01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1', 'last_time']
 node inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['pkt_arrival', 'last_time']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f4d45b5e7c0>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f4d45b5e7c0>]
removing two old components
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['last_time', 'pkt__br_tmp1']
		* state_pkt_fields of new component:  ['pkt_last_time00', 'pkt_last_time01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['last_time', 'pkt__br_tmp1']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  set()
set()
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_next_hop0;

curr line: 	int pkt_saved_hop01;

curr line: 	int pkt_saved_hop00;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	pkt_next_hop0 = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_next_hop0;

 > FOUND OUT LINE : 	_out[2] = pkt_next_hop0;

> found out variable:  pkt_next_hop0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_next_hop0
Constructing new SALU: id= 0  metadata_lo= pkt__br_tmp1  metadata_hi= pkt_new_hop  register_lo= saved_hop  register_hi= 0  output_dst= pkt_next_hop0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 25 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 25, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 0 11 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 11, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 2 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 2, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - 0 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-0)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - 0) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_3_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time00;

curr line: 	bit pkt__br_tmp1;

curr line: 	int pkt_last_time01;

curr line: 	pkt_last_time01 = pkt_arrival;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = pkt__br_tmp1;

> found out variable:  pkt__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt__br_tmp1
Constructing new SALU: id= 1  metadata_lo= pkt_arrival  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 8 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 8, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 0 7 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, 0, 7, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi 5 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 5, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 5 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+5)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 5) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 5 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+5)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 5) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 7 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(7, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  7
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) && (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0'}
>>>>>>>>>>ALU1 outputs ['pkt__br_tmp1']
 *** found stateful dependencies between  1  and  0
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
# alus: =  2
 * gen_dependency_list: dependency between  1  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x6fdc813c
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f4d45b5e6d0>, <alus.SALU object at 0x7f4d45b93580>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f4d45b5e6d0>, 0), (<alus.SALU object at 0x7f4d45b93580>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  pkt_next_hop0
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f4d45b5e6d0>
 -* this SALU:  <alus.SALU object at 0x7f4d45b93580>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f4d45b5e6d0>
 -* this SALU:  <alus.SALU object at 0x7f4d45b93580>
salu_configs:  [[0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(0)-(25)', 'update_hi_2_value': '(0)+(11)', 'update_lo_1_value': '(ipv4.pkt_new_hop)+(alu_hi)', 'update_lo_2_value': '(2)+(alu_hi)', 'condition_hi': '((0-ipv4.pkt__br_tmp1)-0)==0', 'condition_lo': '((0-ipv4.pkt__br_tmp1)-alu_lo)>0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(ipv4.pkt_arrival)+(8)', 'update_hi_2_value': '1', 'update_lo_1_value': '(0)+(5)', 'update_lo_2_value': '(ipv4.pkt_arrival)+(0)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+5)==0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+5)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) and (condition_lo))', 'output_value': '0'}], [{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(0)-(25)', 'update_hi_2_value': '(0)+(11)', 'update_lo_1_value': '(ipv4.pkt_new_hop)+(alu_hi)', 'update_lo_2_value': '(2)+(alu_hi)', 'condition_hi': '((0-ipv4.pkt__br_tmp1)-0)==0', 'condition_lo': '((0-ipv4.pkt__br_tmp1)-alu_lo)>0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(ipv4.pkt_arrival)+(8)', 'update_hi_2_value': '1', 'update_lo_1_value': '(0)+(5)', 'update_lo_2_value': '(ipv4.pkt_arrival)+(0)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+5)==0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+5)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) and (condition_lo))', 'output_value': '0'}]]
[[], []]
[[0, 1], [1, 0]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        pkt__br_tmp1 : 32 (signed);   
        pkt_arrival : 32 (signed);   
        pkt_next_hop0 : 32 (signed);   
        pkt_new_hop : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.pkt_arrival)+alu_lo)+5)>0;
    condition_hi              : (((0-ipv4.pkt_arrival)+alu_lo)+5)==0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (0)+(5);
    update_lo_2_predicate     :  not ((condition_hi) and (condition_lo));
    update_lo_2_value         : (ipv4.pkt_arrival)+(0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (ipv4.pkt_arrival)+(8);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.pkt__br_tmp1)-alu_lo)>0;
    condition_hi              : ((0-ipv4.pkt__br_tmp1)-0)==0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (ipv4.pkt_new_hop)+(alu_hi);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (2)+(alu_hi);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (0)-(25);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (0)+(11);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt_next_hop0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.448533296585083 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_4. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f387e0585b0>, 'write': <dependencyGraph.Statement object at 0x7f387e058310>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f387e058580>, 'write': <dependencyGraph.Statement object at 0x7f387e058370>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f387e0585b0>, 'write': <dependencyGraph.Statement object at 0x7f387e058310>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f387e058580>, 'write': <dependencyGraph.Statement object at 0x7f387e058370>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f387e058a90>, <dependencyGraph.Codelet object at 0x7f387e058040>, <dependencyGraph.Codelet object at 0x7f387e0588b0>, <dependencyGraph.Codelet object at 0x7f387e058a30>, <dependencyGraph.Codelet object at 0x7f387e0588e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f387e058a30>, <dependencyGraph.Codelet object at 0x7f387e058040>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_last_time00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f387e058820>]
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop01', 'pkt_saved_hop00']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop01', 'pkt_saved_hop00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f387e058820>]
removing two old components
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop01', 'pkt_saved_hop00']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop01', 'pkt_saved_hop00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['saved_hop', 'pkt_arrival', 'pkt_new_hop', 'pkt_last_time00']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_new_hop', 'pkt_last_time00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_last_time01', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_last_time01', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f387e058130>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | component b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f387e058130>]
removing two old components
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_last_time01', 'pkt_arrival']
		* new component outputs :  ['pkt__br_tmp1', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1', 'last_time']
 node inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['pkt_arrival', 'last_time']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f387e0587c0>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time01', 'pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f387e0587c0>]
removing two old components
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time01', 'pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['pkt__br_tmp1', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1', 'last_time']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt__br_tmp1', 'pkt_new_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  set()
set()
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_next_hop0;

curr line: 	int pkt_saved_hop01;

curr line: 	int pkt_saved_hop00;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	pkt_next_hop0 = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_next_hop0;

 > FOUND OUT LINE : 	_out[2] = pkt_next_hop0;

> found out variable:  pkt_next_hop0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_next_hop0
Constructing new SALU: id= 0  metadata_lo= pkt__br_tmp1  metadata_hi= pkt_new_hop  register_lo= saved_hop  register_hi= 0  output_dst= pkt_next_hop0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 4 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 4, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 0 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, 0, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_hi - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_hi-register_lo)+1)>0
    ( line =    bit condition_hi_s55 = ((metadata_hi - register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_hi ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_hi)+1)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_hi_1) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_4_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit pkt__br_tmp1;

curr line: 	int pkt_last_time01;

curr line: 	int pkt_last_time00;

curr line: 	pkt_last_time01 = pkt_arrival;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = pkt__br_tmp1;

> found out variable:  pkt__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt__br_tmp1
Constructing new SALU: id= 1  metadata_lo= pkt_arrival  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_hi 8 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_hi, 8, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 0 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 0, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 20 31 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 20, 31, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 2 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 2, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 5 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+5)!=0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 5) != 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 4 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+4)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 4) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  true
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0'}
>>>>>>>>>>ALU1 outputs ['pkt__br_tmp1']
 *** found stateful dependencies between  1  and  0
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
# alus: =  2
 * gen_dependency_list: dependency between  1  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x6fdc813c
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f387e0586d0>, <alus.SALU object at 0x7f387e08d580>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f387e0586d0>, 0), (<alus.SALU object at 0x7f387e08d580>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  pkt_next_hop0
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f387e0586d0>
 -* this SALU:  <alus.SALU object at 0x7f387e08d580>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f387e0586d0>
 -* this SALU:  <alus.SALU object at 0x7f387e08d580>
salu_configs:  [[0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(4)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.pkt_new_hop)', 'update_lo_2_value': '(alu_lo)-(ipv4.pkt__br_tmp1)', 'condition_hi': '((ipv4.pkt_new_hop-alu_lo)+1)>0', 'condition_lo': '(((0-ipv4.pkt__br_tmp1)+alu_hi)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(8)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '(20)-(31)', 'update_lo_2_value': '(ipv4.pkt_arrival)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+5) !=0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+4)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': '0'}], [{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(4)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.pkt_new_hop)', 'update_lo_2_value': '(alu_lo)-(ipv4.pkt__br_tmp1)', 'condition_hi': '((ipv4.pkt_new_hop-alu_lo)+1)>0', 'condition_lo': '(((0-ipv4.pkt__br_tmp1)+alu_hi)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(8)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '(20)-(31)', 'update_lo_2_value': '(ipv4.pkt_arrival)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+5) !=0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+4)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': '0'}]]
[[], []]
[[0, 1], [1, 0]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        pkt__br_tmp1 : 32 (signed);   
        pkt_next_hop0 : 32 (signed);   
        pkt_new_hop : 32 (signed);   
        pkt_arrival : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.pkt_arrival)+alu_lo)+4)<0;
    condition_hi              : (((0-ipv4.pkt_arrival)+alu_lo)+5) !=0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (20)-(31);
    update_lo_2_predicate     : true;
    update_lo_2_value         : (ipv4.pkt_arrival);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (8)-(0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.pkt__br_tmp1)+alu_hi)+1)==0;
    condition_hi              : ((ipv4.pkt_new_hop-alu_lo)+1)>0;
    update_lo_1_predicate     : (condition_lo);
    update_lo_1_value         : (ipv4.pkt_new_hop);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (alu_lo)-(ipv4.pkt__br_tmp1);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (4);
    update_hi_2_predicate     : false;
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.pkt_next_hop0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.523667335510254 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_5. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7f30371b0580>, 'write': <dependencyGraph.Statement object at 0x7f30371b0370>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f30371b05b0>, 'write': <dependencyGraph.Statement object at 0x7f30371b0310>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f30371b0580>, 'write': <dependencyGraph.Statement object at 0x7f30371b0370>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f30371b05b0>, 'write': <dependencyGraph.Statement object at 0x7f30371b0310>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f30371b0a90>, <dependencyGraph.Codelet object at 0x7f30371b0040>, <dependencyGraph.Codelet object at 0x7f30371b08b0>, <dependencyGraph.Codelet object at 0x7f30371b0a30>, <dependencyGraph.Codelet object at 0x7f30371b08e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f30371b0a30>, <dependencyGraph.Codelet object at 0x7f30371b0040>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_last_time00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f30371b0820>]
adj_inputs []
redundant outputs ['pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_next_hop0']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop01', 'pkt_saved_hop00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f30371b0820>]
removing two old components
adj_inputs []
redundant outputs ['pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_next_hop0']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop01', 'pkt_saved_hop00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_arrival', 'pkt_new_hop', 'saved_hop', 'pkt_last_time00']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_new_hop', 'pkt_last_time00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp1', 'pkt_new_hop', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_last_time01', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_last_time01', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f30371b0130>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | component b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f30371b0130>]
removing two old components
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_last_time01', 'pkt_arrival']
		* new component outputs :  ['pkt__br_tmp1', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1', 'last_time']
 node inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp1', 'pkt_new_hop', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['pkt_arrival', 'last_time']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f30371b07c0>]
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time01', 'pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f30371b07c0>]
removing two old components
adj_inputs ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
redundant outputs ['pkt_last_time01', 'pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['pkt__br_tmp1', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1', 'last_time']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp1', 'pkt_new_hop', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  set()
set()
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt__br_tmp1', 'pkt_new_hop']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt__br_tmp1', 'metadata_hi': 'pkt_new_hop', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop01;

curr line: 	int pkt_saved_hop00;

curr line: 	int pkt_next_hop0;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	pkt_next_hop0 = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_next_hop0;

 > FOUND OUT LINE : 	_out[2] = pkt_next_hop0;

> found out variable:  pkt_next_hop0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_next_hop0
Constructing new SALU: id= 0  metadata_lo= pkt__br_tmp1  metadata_hi= pkt_new_hop  register_lo= saved_hop  register_hi= 0  output_dst= pkt_next_hop0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 7 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 7, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 31 25 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 31, 25, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 19 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 19, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 metadata_lo 1 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_lo, 1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_hi ) - register_lo ) + 1 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_hi)-register_lo)+1)!=0
    ( line =    bit condition_hi_s55 = (((0 - metadata_hi) - register_lo_0) + 1) != 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+1)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_5_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time01;

curr line: 	bit pkt__br_tmp1;

curr line: 	int pkt_last_time00;

curr line: 	pkt_last_time01 = pkt_arrival;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = pkt__br_tmp1;

> found out variable:  pkt__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt__br_tmp1
Constructing new SALU: id= 1  metadata_lo= pkt_arrival  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 5 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 5, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 2 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 2, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 5 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 5, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 29 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 29, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 5 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+5)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 5) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 6 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+6)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 6) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 9 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(9, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  9
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  ~((condition_hi) && (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0'}
>>>>>>>>>>ALU1 outputs ['pkt__br_tmp1']
 *** found stateful dependencies between  1  and  0
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
# alus: =  2
 * gen_dependency_list: dependency between  1  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x6fdc813c
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f30371b06d0>, <alus.SALU object at 0x7f30371e5580>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f30371b06d0>, 0), (<alus.SALU object at 0x7f30371e5580>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  pkt_next_hop0
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
Illegal character '~'
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f30371b06d0>
 -* this SALU:  <alus.SALU object at 0x7f30371e5580>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f30371b06d0>
 -* this SALU:  <alus.SALU object at 0x7f30371e5580>
salu_configs:  [[0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(7)', 'update_hi_2_value': '(25)-(31)', 'update_lo_1_value': '(ipv4.pkt_new_hop)', 'update_lo_2_value': '(1)', 'condition_hi': '(((0-ipv4.pkt_new_hop)-alu_lo)+1) !=0', 'condition_lo': '((0-ipv4.pkt__br_tmp1)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(ipv4.pkt_arrival)-(5)', 'update_hi_2_value': '(2)-(1)', 'update_lo_1_value': '(ipv4.pkt_arrival)', 'update_lo_2_value': '(ipv4.pkt_arrival)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+5)<0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+6)==0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': '((condition_hi) and (condition_lo))', 'output_value': '0'}], [{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(7)', 'update_hi_2_value': '(25)-(31)', 'update_lo_1_value': '(ipv4.pkt_new_hop)', 'update_lo_2_value': '(1)', 'condition_hi': '(((0-ipv4.pkt_new_hop)-alu_lo)+1) !=0', 'condition_lo': '((0-ipv4.pkt__br_tmp1)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(ipv4.pkt_arrival)-(5)', 'update_hi_2_value': '(2)-(1)', 'update_lo_1_value': '(ipv4.pkt_arrival)', 'update_lo_2_value': '(ipv4.pkt_arrival)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+5)<0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+6)==0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': '((condition_hi) and (condition_lo))', 'output_value': '0'}]]
[[], []]
[[0, 1], [1, 0]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        pkt__br_tmp1 : 32 (signed);   
        pkt_arrival : 32 (signed);   
        pkt_new_hop : 32 (signed);   
        pkt_next_hop0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.pkt_arrival)+alu_lo)+6)==0;
    condition_hi              : (((0-ipv4.pkt_arrival)+alu_lo)+5)<0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (ipv4.pkt_arrival);
    update_lo_2_predicate     : ((condition_hi) and (condition_lo));
    update_lo_2_value         : (ipv4.pkt_arrival);
    update_hi_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_1_value         : (ipv4.pkt_arrival)-(5);
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : (2)-(1);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.pkt__br_tmp1)+1)==0;
    condition_hi              : (((0-ipv4.pkt_new_hop)-alu_lo)+1) !=0;
    update_lo_1_predicate     : (condition_lo);
    update_lo_1_value         : (ipv4.pkt_new_hop);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (1);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (7);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (25)-(31);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt_next_hop0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.618366241455078 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_6. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f5f3c46f5b0>, 'write': <dependencyGraph.Statement object at 0x7f5f3c46f310>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f5f3c46f580>, 'write': <dependencyGraph.Statement object at 0x7f5f3c46f370>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f5f3c46f5b0>, 'write': <dependencyGraph.Statement object at 0x7f5f3c46f310>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f5f3c46f580>, 'write': <dependencyGraph.Statement object at 0x7f5f3c46f370>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f5f3c46fa90>, <dependencyGraph.Codelet object at 0x7f5f3c46f040>, <dependencyGraph.Codelet object at 0x7f5f3c46f8b0>, <dependencyGraph.Codelet object at 0x7f5f3c46fa30>, <dependencyGraph.Codelet object at 0x7f5f3c46f8e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f5f3c46fa30>, <dependencyGraph.Codelet object at 0x7f5f3c46f040>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out
Stored read, write flank variables
{'pkt_last_time01', 'pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_last_time00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f5f3c46f820>]
adj_inputs []
redundant outputs ['pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_next_hop0']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop01', 'pkt_saved_hop00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f5f3c46f820>]
removing two old components
adj_inputs []
redundant outputs ['pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_next_hop0']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop01', 'pkt_saved_hop00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_new_hop', 'saved_hop', 'pkt_arrival', 'pkt_last_time00']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt_arrival', 'pkt_last_time00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_last_time01', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_last_time01', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f5f3c46f130>]
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | component b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f5f3c46f130>]
removing two old components
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_last_time01', 'pkt_arrival']
		* new component outputs :  ['pkt__br_tmp1', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1', 'last_time']
 node inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['pkt_arrival', 'last_time']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f5f3c46f7c0>]
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time01', 'pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f5f3c46f7c0>]
removing two old components
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time01', 'pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['pkt__br_tmp1', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1', 'last_time']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'saved_hop', 'pkt_new_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  set()
set()
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop01;

curr line: 	int pkt_saved_hop00;

curr line: 	int pkt_next_hop0;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	pkt_next_hop0 = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_next_hop0;

 > FOUND OUT LINE : 	_out[2] = pkt_next_hop0;

> found out variable:  pkt_next_hop0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_next_hop0
Constructing new SALU: id= 0  metadata_lo= pkt_new_hop  metadata_hi= pkt__br_tmp1  register_lo= saved_hop  register_hi= 0  output_dst= pkt_next_hop0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 6 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 6, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 24 21 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 24, 21, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 27 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 27, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 26 29 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 26, 29, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_hi ) + register_hi ) + 1 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_hi)+register_hi)+1)!=0
    ( line =    bit condition_lo_s67 = (((0 - metadata_hi) + register_hi_1) + 1) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_6_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time01;

curr line: 	bit pkt__br_tmp1;

curr line: 	int pkt_last_time00;

curr line: 	pkt_last_time01 = pkt_arrival;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = pkt__br_tmp1;

> found out variable:  pkt__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt__br_tmp1
Constructing new SALU: id= 1  metadata_lo= pkt_arrival  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 7 6 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 7, 6, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 5 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+5)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 5) < 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 2 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+2)<0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 2) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0'}
>>>>>>>>>>ALU1 outputs ['pkt__br_tmp1']
 *** found stateful dependencies between  1  and  0
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
# alus: =  2
 * gen_dependency_list: dependency between  1  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x6fdc813c
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f5f3c46f6d0>, <alus.SALU object at 0x7f5f3c4a4580>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f5f3c46f6d0>, 0), (<alus.SALU object at 0x7f5f3c4a4580>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  pkt_next_hop0
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f5f3c46f6d0>
 -* this SALU:  <alus.SALU object at 0x7f5f3c4a4580>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f5f3c46f6d0>
 -* this SALU:  <alus.SALU object at 0x7f5f3c4a4580>
salu_configs:  [[0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(1)-(6)', 'update_hi_2_value': '(24)+(21)', 'update_lo_1_value': '(ipv4.pkt_new_hop)', 'update_lo_2_value': '(26)+(29)', 'condition_hi': '((0-ipv4.pkt__br_tmp1)-alu_lo)>0', 'condition_lo': '(((0-ipv4.pkt__br_tmp1)+alu_hi)+1) !=0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) or ( not (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(7)-(6)', 'update_hi_2_value': '(0)-(4)', 'update_lo_1_value': '(ipv4.pkt_arrival)+(alu_hi)', 'update_lo_2_value': '(ipv4.pkt_arrival)+(0)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+5)<0', 'condition_lo': '((ipv4.pkt_arrival-alu_lo)+2)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}], [{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(1)-(6)', 'update_hi_2_value': '(24)+(21)', 'update_lo_1_value': '(ipv4.pkt_new_hop)', 'update_lo_2_value': '(26)+(29)', 'condition_hi': '((0-ipv4.pkt__br_tmp1)-alu_lo)>0', 'condition_lo': '(((0-ipv4.pkt__br_tmp1)+alu_hi)+1) !=0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) or ( not (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(7)-(6)', 'update_hi_2_value': '(0)-(4)', 'update_lo_1_value': '(ipv4.pkt_arrival)+(alu_hi)', 'update_lo_2_value': '(ipv4.pkt_arrival)+(0)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+5)<0', 'condition_lo': '((ipv4.pkt_arrival-alu_lo)+2)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}]]
[[], []]
[[0, 1], [1, 0]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        pkt_new_hop : 32 (signed);   
        pkt_arrival : 32 (signed);   
        pkt__br_tmp1 : 32 (signed);   
        pkt_next_hop0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((ipv4.pkt_arrival-alu_lo)+2)<0;
    condition_hi              : (((0-ipv4.pkt_arrival)+alu_lo)+5)<0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (ipv4.pkt_arrival)+(alu_hi);
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : (ipv4.pkt_arrival)+(0);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (7)-(6);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (0)-(4);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.pkt__br_tmp1)+alu_hi)+1) !=0;
    condition_hi              : ((0-ipv4.pkt__br_tmp1)-alu_lo)>0;
    update_lo_1_predicate     : (condition_hi) or ( not (condition_lo));
    update_lo_1_value         : (ipv4.pkt_new_hop);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (26)+(29);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (1)-(6);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (24)+(21);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.pkt_next_hop0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.8248138427734375 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_7. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7f64c8176580>, 'write': <dependencyGraph.Statement object at 0x7f64c8176370>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f64c81765b0>, 'write': <dependencyGraph.Statement object at 0x7f64c8176310>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f64c8176580>, 'write': <dependencyGraph.Statement object at 0x7f64c8176370>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f64c81765b0>, 'write': <dependencyGraph.Statement object at 0x7f64c8176310>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f64c8176a90>, <dependencyGraph.Codelet object at 0x7f64c8176040>, <dependencyGraph.Codelet object at 0x7f64c81768b0>, <dependencyGraph.Codelet object at 0x7f64c8176a30>, <dependencyGraph.Codelet object at 0x7f64c81768e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f64c8176a30>, <dependencyGraph.Codelet object at 0x7f64c8176040>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out
Stored read, write flank variables
{'pkt_saved_hop00', 'pkt_last_time01', 'pkt_last_time00', 'pkt_saved_hop01'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f64c8176820>]
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop00', 'pkt_saved_hop01']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f64c8176820>]
removing two old components
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop00', 'pkt_saved_hop01']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_last_time00', 'pkt_arrival', 'pkt_new_hop', 'saved_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_last_time00', 'pkt_arrival', 'pkt_new_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_last_time00', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'saved_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_last_time01', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_last_time01', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f64c8176130>]
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | component b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f64c8176130>]
removing two old components
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_last_time01', 'pkt_arrival']
		* new component outputs :  ['last_time', 'pkt__br_tmp1']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['last_time', 'pkt__br_tmp1']
 node inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'saved_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['last_time', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f64c81767c0>]
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time01', 'pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f64c81767c0>]
removing two old components
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time01', 'pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['last_time', 'pkt__br_tmp1']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['last_time', 'pkt__br_tmp1']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'saved_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  set()
set()
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_next_hop0;

curr line: 	int pkt_saved_hop00;

curr line: 	int pkt_saved_hop01;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	pkt_next_hop0 = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_next_hop0;

 > FOUND OUT LINE : 	_out[2] = pkt_next_hop0;

> found out variable:  pkt_next_hop0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_next_hop0
Constructing new SALU: id= 0  metadata_lo= pkt_new_hop  metadata_hi= pkt__br_tmp1  register_lo= saved_hop  register_hi= 0  output_dst= pkt_next_hop0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 31 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 31, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 5 26 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 5, 26, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 0 8 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 8, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 27 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 27, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = metadata_lo < 0
process_salu_function: parsing  condition_hi ; rhs =  metadata_lo<0
    ( line =    bit condition_hi_s55 = metadata_lo < 0;
  )
demangled line:  bit condition_lo = metadata_hi > 0
process_salu_function: parsing  condition_lo ; rhs =  metadata_hi>0
    ( line =    bit condition_lo_s67 = metadata_hi > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_7_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time01;

curr line: 	int pkt_last_time00;

curr line: 	bit pkt__br_tmp1;

curr line: 	pkt_last_time01 = pkt_arrival;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = pkt__br_tmp1;

> found out variable:  pkt__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt__br_tmp1
Constructing new SALU: id= 1  metadata_lo= pkt_arrival  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 metadata_hi 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 28 30 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 28, 30, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 31 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 31, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 3 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+3)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 3) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 6 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+6)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 6) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  true
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0'}
>>>>>>>>>>ALU1 outputs ['pkt__br_tmp1']
 *** found stateful dependencies between  1  and  0
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
# alus: =  2
 * gen_dependency_list: dependency between  1  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x6fdc813c
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f64c81766d0>, <alus.SALU object at 0x7f64c81ab580>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f64c81766d0>, 0), (<alus.SALU object at 0x7f64c81ab580>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  pkt_next_hop0
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f64c81766d0>
 -* this SALU:  <alus.SALU object at 0x7f64c81ab580>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f64c81766d0>
 -* this SALU:  <alus.SALU object at 0x7f64c81ab580>
salu_configs:  [[0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(31)', 'update_hi_2_value': '(5)-(26)', 'update_lo_1_value': '(0)-(8)', 'update_lo_2_value': '(ipv4.pkt_new_hop)', 'condition_hi': 'ipv4.pkt_new_hop<0', 'condition_lo': 'ipv4.pkt__br_tmp1>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(29)-(ipv4.pkt_arrival)', 'update_hi_2_value': '1', 'update_lo_1_value': '(30)-(28)', 'update_lo_2_value': '(ipv4.pkt_arrival)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+3)<0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+6)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': '0'}], [{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(31)', 'update_hi_2_value': '(5)-(26)', 'update_lo_1_value': '(0)-(8)', 'update_lo_2_value': '(ipv4.pkt_new_hop)', 'condition_hi': 'ipv4.pkt_new_hop<0', 'condition_lo': 'ipv4.pkt__br_tmp1>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(29)-(ipv4.pkt_arrival)', 'update_hi_2_value': '1', 'update_lo_1_value': '(30)-(28)', 'update_lo_2_value': '(ipv4.pkt_arrival)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+3)<0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+6)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': '0'}]]
[[], []]
[[0, 1], [1, 0]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        pkt_new_hop : 32 (signed);   
        pkt__br_tmp1 : 32 (signed);   
        pkt_arrival : 32 (signed);   
        pkt_next_hop0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.pkt_arrival)+alu_lo)+6)>0;
    condition_hi              : (((0-ipv4.pkt_arrival)+alu_lo)+3)<0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (30)-(28);
    update_lo_2_predicate     : true;
    update_lo_2_value         : (ipv4.pkt_arrival);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (29)-(ipv4.pkt_arrival);
    update_hi_2_predicate     :  not (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ipv4.pkt__br_tmp1>0;
    condition_hi              : ipv4.pkt_new_hop<0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (0)-(8);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (ipv4.pkt_new_hop);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (31);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (5)-(26);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.pkt_next_hop0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.492563009262085 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_8. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'saved_hop', 'last_time'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'saved_hop': {'read': <dependencyGraph.Statement object at 0x7f1064ca35b0>, 'write': <dependencyGraph.Statement object at 0x7f1064ca3310>}, 'last_time': {'read': <dependencyGraph.Statement object at 0x7f1064ca3580>, 'write': <dependencyGraph.Statement object at 0x7f1064ca3370>}}
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7f1064ca35b0>, 'write': <dependencyGraph.Statement object at 0x7f1064ca3310>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7f1064ca3580>, 'write': <dependencyGraph.Statement object at 0x7f1064ca3370>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1064ca3a90>, <dependencyGraph.Codelet object at 0x7f1064ca3040>, <dependencyGraph.Codelet object at 0x7f1064ca38b0>, <dependencyGraph.Codelet object at 0x7f1064ca3a30>, <dependencyGraph.Codelet object at 0x7f1064ca38e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1064ca3a30>, <dependencyGraph.Codelet object at 0x7f1064ca3040>}
total number of nodes created:  5
state vars {'saved_hop', 'last_time'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out
Stored read, write flank variables
{'pkt_last_time00', 'pkt_last_time01', 'pkt_saved_hop00', 'pkt_saved_hop01'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f1064ca3820>]
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop00', 'pkt_saved_hop01']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7f1064ca3820>]
removing two old components
adj_inputs []
redundant outputs ['pkt_next_hop0', 'pkt_saved_hop00', 'pkt_saved_hop01']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['saved_hop', 'pkt_arrival', 'pkt_last_time00', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_last_time00', 'pkt_new_hop']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_last_time00', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'saved_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_last_time00', 'pkt_arrival']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_last_time01', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_last_time01', 'pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f1064ca31c0>]
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_last_time01', 'metadata_hi': 'pkt_arrival', 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | component b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7f1064ca31c0>]
removing two old components
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_last_time01', 'pkt_arrival']
		* new component outputs :  ['pkt__br_tmp1', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time00', 'pkt_last_time01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1', 'last_time']
 node inputs:  ['last_time', 'pkt_last_time01', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'saved_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['last_time', 'pkt_arrival']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f1064ca37c0>]
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['pkt__br_tmp1', 'last_time']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7f1064ca37c0>]
removing two old components
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['pkt__br_tmp1', 'last_time']
		* state_pkt_fields of new component:  ['pkt_last_time00', 'pkt_last_time01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1', 'last_time']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'saved_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  set()
set()
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_next_hop0;

curr line: 	int pkt_saved_hop00;

curr line: 	int pkt_saved_hop01;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	pkt_next_hop0 = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_next_hop0;

 > FOUND OUT LINE : 	_out[2] = pkt_next_hop0;

> found out variable:  pkt_next_hop0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_next_hop0
Constructing new SALU: id= 0  metadata_lo= pkt_new_hop  metadata_hi= pkt__br_tmp1  register_lo= saved_hop  register_hi= 0  output_dst= pkt_next_hop0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 6 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 6, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 24 21 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 24, 21, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 27 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 27, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 26 29 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 26, 29, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - 0 ) + 2 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-0)+2)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - 0) + 2) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_hi ) + register_hi ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_hi)+register_hi)!=0
    ( line =    bit condition_lo_s67 = ((0 - metadata_hi) + register_hi_1) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_8_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time00;

curr line: 	int pkt_last_time01;

curr line: 	bit pkt__br_tmp1;

curr line: 	pkt_last_time01 = pkt_arrival;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = pkt__br_tmp1;

> found out variable:  pkt__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt__br_tmp1
Constructing new SALU: id= 1  metadata_lo= pkt_arrival  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 3 0 7 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, 0, 7, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 metadata_lo 6 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_lo, 6, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 16 5 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 16, 5, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 5 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+5)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 5) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+2)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 2) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0'}
>>>>>>>>>>ALU1 outputs ['pkt__br_tmp1']
 *** found stateful dependencies between  1  and  0
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
# alus: =  2
 * gen_dependency_list: dependency between  1  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x6fdc813c
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f1064ca36d0>, <alus.SALU object at 0x7f1064cd8580>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f1064ca36d0>, 0), (<alus.SALU object at 0x7f1064cd8580>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  pkt_next_hop0
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f1064ca36d0>
 -* this SALU:  <alus.SALU object at 0x7f1064cd8580>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f1064ca36d0>
 -* this SALU:  <alus.SALU object at 0x7f1064cd8580>
salu_configs:  [[0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(1)-(6)', 'update_hi_2_value': '(24)+(21)', 'update_lo_1_value': '(ipv4.pkt_new_hop)', 'update_lo_2_value': '(26)+(29)', 'condition_hi': '(((0-ipv4.pkt_new_hop)-0)+2)==0', 'condition_lo': '((0-ipv4.pkt__br_tmp1)+alu_hi) !=0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(7)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.pkt_arrival)+(alu_hi)', 'update_lo_2_value': '(5)-(16)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+5)<0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+2)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': '0'}], [{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(1)-(6)', 'update_hi_2_value': '(24)+(21)', 'update_lo_1_value': '(ipv4.pkt_new_hop)', 'update_lo_2_value': '(26)+(29)', 'condition_hi': '(((0-ipv4.pkt_new_hop)-0)+2)==0', 'condition_lo': '((0-ipv4.pkt__br_tmp1)+alu_hi) !=0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(7)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.pkt_arrival)+(alu_hi)', 'update_lo_2_value': '(5)-(16)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+5)<0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+2)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[], []]
[[0, 1], [1, 0]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        pkt_next_hop0 : 32 (signed);   
        pkt_new_hop : 32 (signed);   
        pkt__br_tmp1 : 32 (signed);   
        pkt_arrival : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.pkt_arrival)+alu_lo)+2)==0;
    condition_hi              : (((0-ipv4.pkt_arrival)+alu_lo)+5)<0;
    update_lo_1_predicate     : true;
    update_lo_1_value         : (ipv4.pkt_arrival)+(alu_hi);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (5)-(16);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (7);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.pkt__br_tmp1)+alu_hi) !=0;
    condition_hi              : (((0-ipv4.pkt_new_hop)-0)+2)==0;
    update_lo_1_predicate     : (condition_lo);
    update_lo_1_value         : (ipv4.pkt_new_hop);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (26)+(29);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (1)-(6);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (24)+(21);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt_next_hop0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.6565017700195312 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_9. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7fb0e3e82580>, 'write': <dependencyGraph.Statement object at 0x7fb0e3e82370>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7fb0e3e825b0>, 'write': <dependencyGraph.Statement object at 0x7fb0e3e82310>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7fb0e3e82580>, 'write': <dependencyGraph.Statement object at 0x7fb0e3e82370>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7fb0e3e825b0>, 'write': <dependencyGraph.Statement object at 0x7fb0e3e82310>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb0e3e82a90>, <dependencyGraph.Codelet object at 0x7fb0e3e82040>, <dependencyGraph.Codelet object at 0x7fb0e3e828b0>, <dependencyGraph.Codelet object at 0x7fb0e3e82a30>, <dependencyGraph.Codelet object at 0x7fb0e3e828e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb0e3e82a30>, <dependencyGraph.Codelet object at 0x7fb0e3e82040>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out
Stored read, write flank variables
{'pkt_saved_hop01', 'pkt_last_time00', 'pkt_saved_hop00', 'pkt_last_time01'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt__br_tmp1']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7fb0e3e82820>]
adj_inputs []
redundant outputs ['pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_next_hop0']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop01', 'pkt_saved_hop00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop01', 'pkt_saved_hop00']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7fb0e3e82820>]
removing two old components
adj_inputs []
redundant outputs ['pkt_saved_hop01', 'pkt_saved_hop00', 'pkt_next_hop0']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop01', 'pkt_saved_hop00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_arrival', 'saved_hop', 'pkt_new_hop', 'pkt_last_time00']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_new_hop', 'pkt_last_time00']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'saved_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_arrival', 'pkt_last_time01']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_last_time01']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7fb0e3e821c0>]
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 'pkt_last_time01', 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | component b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7fb0e3e821c0>]
removing two old components
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_arrival', 'pkt_last_time01']
		* new component outputs :  ['last_time', 'pkt__br_tmp1']
		* state_pkt_fields of new component:  ['pkt_last_time00', 'pkt_last_time01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['last_time', 'pkt__br_tmp1']
 node inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'saved_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['pkt_arrival', 'last_time']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7fb0e3e827c0>]
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time00', 'pkt_last_time01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time00', 'pkt_last_time01']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7fb0e3e827c0>]
removing two old components
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00', 'pkt_last_time01']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['last_time', 'pkt__br_tmp1']
		* state_pkt_fields of new component:  ['pkt_last_time00', 'pkt_last_time01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['last_time', 'pkt__br_tmp1']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt_new_hop', 'saved_hop', 'pkt__br_tmp1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  set()
set()
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop01;

curr line: 	int pkt_saved_hop00;

curr line: 	int pkt_next_hop0;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	pkt_next_hop0 = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_next_hop0;

 > FOUND OUT LINE : 	_out[2] = pkt_next_hop0;

> found out variable:  pkt_next_hop0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_next_hop0
Constructing new SALU: id= 0  metadata_lo= pkt_new_hop  metadata_hi= pkt__br_tmp1  register_lo= saved_hop  register_hi= 0  output_dst= pkt_next_hop0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 14 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 14, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 5 26 8 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 26, 8, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)+1)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi 1 update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, 1, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  1  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi 1 update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, 1, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  1  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(1))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi 1 update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, 1, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  1  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(1)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 7 condition_hi 1 update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(7, condition_hi_s55, 1, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  1  ; opcode:  7
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) && (1))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_9_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time00;

curr line: 	int pkt_last_time01;

curr line: 	bit pkt__br_tmp1;

curr line: 	pkt_last_time01 = pkt_arrival;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = pkt__br_tmp1;

> found out variable:  pkt__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt__br_tmp1
Constructing new SALU: id= 1  metadata_lo= pkt_arrival  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 metadata_hi 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 31 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 31, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 30 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 30, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 6 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+6)!=0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 6) != 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 7 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+7)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 7) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 9 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(9, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  9
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  ~((condition_hi) && (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0'}
>>>>>>>>>>ALU1 outputs ['pkt__br_tmp1']
 *** found stateful dependencies between  1  and  0
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
# alus: =  2
 * gen_dependency_list: dependency between  1  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x6fdc813c
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7fb0e3e826d0>, <alus.SALU object at 0x7fb0e3eb7580>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7fb0e3e826d0>, 0), (<alus.SALU object at 0x7fb0e3eb7580>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  pkt_next_hop0
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
Illegal character '~'
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fb0e3e826d0>
 -* this SALU:  <alus.SALU object at 0x7fb0e3eb7580>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7fb0e3e826d0>
 -* this SALU:  <alus.SALU object at 0x7fb0e3eb7580>
salu_configs:  [[0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(ipv4.pkt_new_hop)-(14)', 'update_hi_2_value': '(alu_lo)-(ipv4.pkt_new_hop)', 'update_lo_1_value': '0', 'update_lo_2_value': '(ipv4.pkt_new_hop)+(0)', 'condition_hi': '((0-ipv4.pkt__br_tmp1)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (1))', 'update_lo_1_predicate': ' not (1)', 'update_lo_2_predicate': ' not ((condition_hi) and (1))', 'output_value': '0'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(1)-(ipv4.pkt_arrival)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.pkt_arrival)', 'update_lo_2_value': '(alu_lo)-(30)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+6) !=0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+7)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '((condition_hi) and (condition_lo))', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': '0'}], [{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '(ipv4.pkt_new_hop)-(14)', 'update_hi_2_value': '(alu_lo)-(ipv4.pkt_new_hop)', 'update_lo_1_value': '0', 'update_lo_2_value': '(ipv4.pkt_new_hop)+(0)', 'condition_hi': '((0-ipv4.pkt__br_tmp1)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (1))', 'update_lo_1_predicate': ' not (1)', 'update_lo_2_predicate': ' not ((condition_hi) and (1))', 'output_value': '0'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(1)-(ipv4.pkt_arrival)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.pkt_arrival)', 'update_lo_2_value': '(alu_lo)-(30)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+6) !=0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+7)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '((condition_hi) and (condition_lo))', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[], []]
[[0, 1], [1, 0]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        pkt_arrival : 32 (signed);   
        pkt_new_hop : 32 (signed);   
        pkt_next_hop0 : 32 (signed);   
        pkt__br_tmp1 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.pkt_arrival)+alu_lo)+7)>0;
    condition_hi              : (((0-ipv4.pkt_arrival)+alu_lo)+6) !=0;
    update_lo_1_predicate     : true;
    update_lo_1_value         : (ipv4.pkt_arrival);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo)-(30);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (1)-(ipv4.pkt_arrival);
    update_hi_2_predicate     : ((condition_hi) and (condition_lo));
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : 0;
    condition_hi              : ((0-ipv4.pkt__br_tmp1)+1)>0;
    update_lo_1_predicate     :  not (1);
    update_lo_1_value         : 0;
    update_lo_2_predicate     :  not ((condition_hi) and (1));
    update_lo_2_value         : (ipv4.pkt_new_hop)+(0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (ipv4.pkt_new_hop)-(14);
    update_hi_2_predicate     : (condition_hi) and ( not (1));
    update_hi_2_value         : (alu_lo)-(ipv4.pkt_new_hop);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt_next_hop0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.638737201690674 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets, program name: flowlets_equivalent_10. Grammar: . Continue?
------------------------------
Preprocessing done. Continuing
pkt_saved_hop00 = saved_hop;

lhs pkt_saved_hop00 rhs saved_hop
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop00 = saved_hop;

 is_read_flank: processing rhs_vars =  ['saved_hop']
read flank
pkt_last_time00 = last_time;

lhs pkt_last_time00 rhs last_time
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time00 = last_time;

 is_read_flank: processing rhs_vars =  ['last_time']
read flank
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

lhs pkt__br_tmp1 rhs pkt_arrival-pkt_last_time00>5
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

 is_read_flank: processing rhs_vars =  ['pkt_arrival', 'pkt_last_time00']
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

lhs pkt_saved_hop01 rhs pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00)
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

 is_read_flank: processing rhs_vars =  ['pkt__br_tmp1', 'pkt_new_hop', 'pkt_saved_hop00']
pkt_last_time01 = pkt_arrival;

lhs pkt_last_time01 rhs pkt_arrival
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_last_time01 = pkt_arrival;

 is_read_flank: processing rhs_vars =  ['pkt_arrival']
pkt_next_hop0 = pkt_saved_hop01;

lhs pkt_next_hop0 rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  pkt_next_hop0 = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
saved_hop = pkt_saved_hop01;

lhs saved_hop rhs pkt_saved_hop01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  saved_hop = pkt_saved_hop01;

 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
write flank
last_time = pkt_last_time01;

lhs last_time rhs pkt_last_time01
state_vars {'last_time', 'saved_hop'}
read/write flanks: processing line  last_time = pkt_last_time01;

 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
write flank
finding dependencies
RAW pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_last_time00 = last_time; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
RAW pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); pkt_next_hop0 = pkt_saved_hop01;
RAW pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
RAW pkt_last_time01 = pkt_arrival; last_time = pkt_last_time01;
read_write_flanks {'last_time': {'read': <dependencyGraph.Statement object at 0x7ffbed83c580>, 'write': <dependencyGraph.Statement object at 0x7ffbed83c370>}, 'saved_hop': {'read': <dependencyGraph.Statement object at 0x7ffbed83c5b0>, 'write': <dependencyGraph.Statement object at 0x7ffbed83c310>}}
var:  last_time
{'read': <dependencyGraph.Statement object at 0x7ffbed83c580>, 'write': <dependencyGraph.Statement object at 0x7ffbed83c370>}
state_var  last_time
read_flank pkt_last_time00 = last_time
write_flank last_time = pkt_last_time01
var:  saved_hop
{'read': <dependencyGraph.Statement object at 0x7ffbed83c5b0>, 'write': <dependencyGraph.Statement object at 0x7ffbed83c310>}
state_var  saved_hop
read_flank pkt_saved_hop00 = saved_hop
write_flank saved_hop = pkt_saved_hop01
total number of nodes created:  8
SCC 0
v pkt_next_hop0 = pkt_saved_hop01 stmts len 1
pkt_next_hop0 = pkt_saved_hop01;
SCC 1
v pkt_saved_hop00 = saved_hop stmts len 1
pkt_saved_hop00 = saved_hop;
v pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) stmts len 1
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
v saved_hop = pkt_saved_hop01 stmts len 1
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
SCC 2
v pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5 stmts len 1
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
SCC 3
v pkt_last_time00 = last_time stmts len 1
pkt_last_time00 = last_time;
v last_time = pkt_last_time01 stmts len 1
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
SCC 4
v pkt_last_time01 = pkt_arrival stmts len 1
pkt_last_time01 = pkt_arrival;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7ffbed83ca90>, <dependencyGraph.Codelet object at 0x7ffbed83c040>, <dependencyGraph.Codelet object at 0x7ffbed83c8b0>, <dependencyGraph.Codelet object at 0x7ffbed83ca30>, <dependencyGraph.Codelet object at 0x7ffbed83c8e0>]
pkt_next_hop0 = pkt_saved_hop01;
pkt_saved_hop00 = saved_hop;
pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);
saved_hop = pkt_saved_hop01;
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
stateful
pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
pkt_last_time00 = last_time;
last_time = pkt_last_time01;
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
stateful
pkt_last_time01 = pkt_arrival;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7ffbed83ca30>, <dependencyGraph.Codelet object at 0x7ffbed83c040>}
total number of nodes created:  5
state vars {'last_time', 'saved_hop'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU. No need to do anything.
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  5
total number of nodes created:  5
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out
Stored read, write flank variables
{'pkt_saved_hop00', 'pkt_last_time01', 'pkt_saved_hop01', 'pkt_last_time00'}
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
-------------------------------------- stateful codelet vars :  ['last_time'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['last_time']
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
-------------------------------------- stateful codelet vars :  ['saved_hop'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['saved_hop']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
codelet  pkt_saved_hop00 = saved_hop pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00) saved_hop = pkt_saved_hop01  is stateful
codelet  pkt_last_time00 = last_time last_time = pkt_last_time01  is stateful
number of nodes on SCC_GRAPH:  5
number of nodes in comp_graph:  5
 * recursive_merge strategy: nodes ordered  ['pkt_next_hop0 = pkt_saved_hop01;', 'pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['pkt_next_hop0']
 node inputs:  ['pkt_saved_hop01']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_next_hop0 = pkt_saved_hop01;
     |  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
adj_inputs ['pkt_saved_hop01']
redundant outputs ['pkt_saved_hop00']
state_var ['saved_hop']
redundant outputs []
     | merged inputs:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt__br_tmp1', 'pkt_new_hop']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7ffbed83c820>]
adj_inputs []
redundant outputs ['pkt_saved_hop00', 'pkt_next_hop0', 'pkt_saved_hop01']
state_var ['saved_hop']
resultant component: 
pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
new component inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
new component outputs:  ['saved_hop']
new component state_pkt_fields:  ['pkt_saved_hop00', 'pkt_saved_hop01']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 | component b:  pkt_next_hop0 = pkt_saved_hop01;
 | state_pkt_fields of component a:  ['pkt_saved_hop00', 'pkt_saved_hop01']
merge component: component is ----  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01;
 ********************** adding statements from component  pkt_next_hop0 = pkt_saved_hop01;  with *************************
[<dependencyGraph.Statement object at 0x7ffbed83c820>]
removing two old components
adj_inputs []
redundant outputs ['pkt_saved_hop00', 'pkt_next_hop0', 'pkt_saved_hop01']
state_var ['saved_hop']
		* new component :  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
		* new component inputs :  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
		* new component outputs :  ['saved_hop']
		* state_pkt_fields of new component:  ['pkt_saved_hop00', 'pkt_saved_hop01']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 node outputs:  ['saved_hop']
 node inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
     |  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['saved_hop']
     | merged inputs:  ['pkt_new_hop', 'saved_hop', 'pkt_last_time00', 'pkt_arrival']
		| merged state vars:  {'saved_hop'}
		| merged stateless vars:  ['pkt_new_hop', 'pkt_last_time00', 'pkt_arrival']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
 * recursive_merge: node ::  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['pkt__br_tmp1']
 node inputs:  ['pkt_arrival', 'pkt_last_time00']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp1', 'pkt_new_hop', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time00 = last_time; last_time = pkt_last_time01;
adj_inputs ['pkt_arrival', 'pkt_last_time00']
redundant outputs []
state_var ['last_time']
redundant outputs []
     | merged inputs:  ['pkt_arrival', 'pkt_last_time01']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival', 'pkt_last_time01']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7ffbed83c130>]
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 'pkt_last_time01', 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 | component b:  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component a:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01;
 ********************** adding statements from component  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;  with *************************
[<dependencyGraph.Statement object at 0x7ffbed83c130>]
removing two old components
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_arrival', 'pkt_last_time01']
		* new component outputs :  ['last_time', 'pkt__br_tmp1']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;', 'pkt_last_time01 = pkt_arrival;']
 * recursive_merge: node ::  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['last_time', 'pkt__br_tmp1']
 node inputs:  ['last_time', 'pkt_arrival', 'pkt_last_time01']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp1', 'pkt_new_hop', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
     |  pkt_last_time01 = pkt_arrival;
redundant outputs []
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs []
state_var ['last_time']
     | merged inputs:  ['pkt_arrival', 'last_time']
		| merged state vars:  {'last_time'}
		| merged stateless vars:  ['pkt_arrival']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  pkt_last_time01 = pkt_arrival;
 | b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7ffbed83c7c0>]
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time01', 'pkt_last_time00']
state_var ['last_time']
resultant component: 
pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
new component inputs:  ['last_time', 'pkt_arrival']
new component outputs:  ['last_time', 'pkt__br_tmp1']
new component state_pkt_fields:  ['pkt_last_time01', 'pkt_last_time00']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/try_merge_query_2_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  pkt_last_time01 = pkt_arrival;
 | component b:  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 | state_pkt_fields of component b:  ['pkt_last_time01', 'pkt_last_time00']
merge component: component is ----  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 ********************** adding statements from component  pkt_last_time01 = pkt_arrival;  with *************************
[<dependencyGraph.Statement object at 0x7ffbed83c7c0>]
removing two old components
adj_inputs ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
redundant outputs ['pkt_last_time01', 'pkt_last_time00']
state_var ['last_time']
		* new component :  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
		* new component inputs :  ['last_time', 'pkt_arrival']
		* new component outputs :  ['last_time', 'pkt__br_tmp1']
		* state_pkt_fields of new component:  ['pkt_last_time01', 'pkt_last_time00']
 * recursive_merge strategy: nodes ordered  ['pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;', 'pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;']
 * recursive_merge: node ::  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 node outputs:  ['last_time', 'pkt__br_tmp1']
 node inputs:  ['last_time', 'pkt_arrival']
 exclude_read_write_flanks: successor inputs:  {'pkt__br_tmp1', 'pkt_new_hop', 'saved_hop'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
 * recursive_merge: finished processing  pkt_next_hop0 = pkt_saved_hop01;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['saved_hop']
 is_read_flank: processing rhs_vars =  ['pkt_saved_hop01']
 is_read_flank: processing rhs_vars =  ['last_time']
 is_read_flank: processing rhs_vars =  ['pkt_last_time01']
Principal Outputs:  set()
set()
u:  pkt_last_time01 = pkt_arrival; pkt_last_time00 = last_time; last_time = pkt_last_time01; pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;
v:  pkt_saved_hop00 = saved_hop; pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00); saved_hop = pkt_saved_hop01; pkt_next_hop0 = pkt_saved_hop01;
~~~~~~~~~~set_alu_inputs:  ['saved_hop', 'pkt_new_hop', 'pkt__br_tmp1']
 ~~~| state var:  ['saved_hop']
salu_inputs {'metadata_lo': 'pkt_new_hop', 'metadata_hi': 'pkt__br_tmp1', 'register_lo': 'saved_hop', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int pkt_saved_hop00;

curr line: 	int pkt_next_hop0;

curr line: 	int pkt_saved_hop01;

curr line: 	pkt_saved_hop00 = saved_hop;

curr line: 	pkt_saved_hop01 = pkt__br_tmp1 ? (pkt_new_hop) : (pkt_saved_hop00);

curr line: 	saved_hop = pkt_saved_hop01;

curr line: 	pkt_next_hop0 = pkt_saved_hop01;

curr line: 	_out[0] = saved_hop;

 > FOUND OUT LINE : 	_out[0] = saved_hop;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt_next_hop0;

 > FOUND OUT LINE : 	_out[2] = pkt_next_hop0;

> found out variable:  pkt_next_hop0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt_next_hop0
Constructing new SALU: id= 0  metadata_lo= pkt_new_hop  metadata_hi= pkt__br_tmp1  register_lo= saved_hop  register_hi= 0  output_dst= pkt_next_hop0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 31 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 31, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 0 9 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 0, 9, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 10 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 10, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = metadata_hi == 0
process_salu_function: parsing  condition_lo ; rhs =  metadata_hi==0
    ( line =    bit condition_lo_s67 = metadata_hi == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['last_time', 'pkt_arrival']
 ~~~| state var:  ['last_time']
salu_inputs {'metadata_lo': 'pkt_arrival', 'metadata_hi': 0, 'register_lo': 'last_time', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/flowlets/flowlets_equivalent_10_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int pkt_last_time01;

curr line: 	bit pkt__br_tmp1;

curr line: 	int pkt_last_time00;

curr line: 	pkt_last_time01 = pkt_arrival;

curr line: 	pkt_last_time00 = last_time;

curr line: 	last_time = pkt_last_time01;

curr line: 	pkt__br_tmp1 = pkt_arrival-pkt_last_time00>5;

curr line: 	_out[0] = last_time;

 > FOUND OUT LINE : 	_out[0] = last_time;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = pkt__br_tmp1;

 > FOUND OUT LINE : 	_out[2] = pkt__br_tmp1;

> found out variable:  pkt__br_tmp1
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  pkt__br_tmp1
Constructing new SALU: id= 1  metadata_lo= pkt_arrival  metadata_hi= 0  register_lo= last_time  register_hi= 0  output_dst= pkt__br_tmp1
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 0 22 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 22, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 metadata_hi register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 14 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 14, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 5 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+5)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 5) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 5 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+5)!=0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 5) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  true
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0'}
>>>>>>>>>>ALU1 outputs ['pkt__br_tmp1']
 *** found stateful dependencies between  1  and  0
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
# alus: =  2
 * gen_dependency_list: dependency between  1  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x6fdc813c
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7ffbed83c6d0>, <alus.SALU object at 0x7ffbed871580>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7ffbed83c6d0>, 0), (<alus.SALU object at 0x7ffbed871580>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  pkt_next_hop0
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt_new_hop
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt__br_tmp1
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
p4_codegen: PHV var found for stateful ALU, it is  pkt_arrival
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7ffbed83c6d0>
 -* this SALU:  <alus.SALU object at 0x7ffbed871580>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7ffbed83c6d0>
 -* this SALU:  <alus.SALU object at 0x7ffbed871580>
salu_configs:  [[0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '0', 'update_hi_2_value': '(9)-(0)', 'update_lo_1_value': '(ipv4.pkt_new_hop)', 'update_lo_2_value': '(alu_hi)-(10)', 'condition_hi': '((0-ipv4.pkt_new_hop)-alu_lo)>0', 'condition_lo': 'ipv4.pkt__br_tmp1==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(0)+(22)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.pkt_arrival)', 'update_lo_2_value': '(ipv4.pkt_arrival)-(alu_lo)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+5)>0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+5) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': '0'}], [{'output_dst': 'ipv4.pkt_next_hop0', 'update_hi_1_value': '0', 'update_hi_2_value': '(9)-(0)', 'update_lo_1_value': '(ipv4.pkt_new_hop)', 'update_lo_2_value': '(alu_hi)-(10)', 'condition_hi': '((0-ipv4.pkt_new_hop)-alu_lo)>0', 'condition_lo': 'ipv4.pkt__br_tmp1==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.pkt__br_tmp1', 'update_hi_1_value': '(0)+(22)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.pkt_arrival)', 'update_lo_2_value': '(ipv4.pkt_arrival)-(alu_lo)', 'condition_hi': '(((0-ipv4.pkt_arrival)+alu_lo)+5)>0', 'condition_lo': '(((0-ipv4.pkt_arrival)+alu_lo)+5) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'true', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[], []]
[[0, 1], [1, 0]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        pkt_arrival : 32 (signed);   
        pkt_next_hop0 : 32 (signed);   
        pkt__br_tmp1 : 32 (signed);   
        pkt_new_hop : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.pkt_arrival)+alu_lo)+5) !=0;
    condition_hi              : (((0-ipv4.pkt_arrival)+alu_lo)+5)>0;
    update_lo_1_predicate     : true;
    update_lo_1_value         : (ipv4.pkt_arrival);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (ipv4.pkt_arrival)-(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)+(22);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.pkt__br_tmp1;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ipv4.pkt__br_tmp1==0;
    condition_hi              : ((0-ipv4.pkt_new_hop)-alu_lo)>0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (ipv4.pkt_new_hop);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_hi)-(10);
    update_hi_1_predicate     : false;
    update_hi_1_value         : 0;
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (9)-(0);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.pkt_next_hop0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.350637435913086 s
preprocessor time:
