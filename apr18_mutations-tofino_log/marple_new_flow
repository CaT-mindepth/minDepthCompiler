running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f2f03bdb5b0>, 'write': <dependencyGraph.Statement object at 0x7f2f03bdb6d0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2f03bdb5b0>, 'write': <dependencyGraph.Statement object at 0x7f2f03bdb6d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2f03bdb220>, <dependencyGraph.Codelet object at 0x7f2f03bdb760>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2f03bdb760>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p__br_tmp1', 'p_pkt_0']
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f2f03bdb490>]
adj_inputs []
redundant outputs ['p_pkt_00', 'p__br_tmp1', 'p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | component b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f2f03bdb490>]
removing two old components
adj_inputs []
redundant outputs ['p_pkt_00', 'p__br_tmp1', 'p_state_000', 'p_state_001']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_1_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 28 27 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 28, 27, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 6 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 6, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 21 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 21, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 30 31 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 30, 31, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( 0 - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (0-register_lo)==0
    ( line =    bit condition_hi_s55 = (0 - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+2)>0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 2) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f2f03bdba30>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f2f03bdba30>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f2f03bdba30>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(28)-(27)', 'update_hi_2_value': '(ipv4.p_pkt_0)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(21)', 'update_lo_2_value': '(31)-(30)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '((0-alu_lo)+2)>0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': ' not (condition_hi)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_lo)', 'output_value': '0'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_00 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+2)>0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (ipv4.p_pkt_0)-(21);
    update_lo_2_predicate     : (condition_lo);
    update_lo_2_value         : (31)-(30);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (28)-(27);
    update_hi_2_predicate     :  not (condition_hi);
    update_hi_2_value         : (ipv4.p_pkt_0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.4316775798797607 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f128d9165b0>, 'write': <dependencyGraph.Statement object at 0x7f128d9166d0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f128d9165b0>, 'write': <dependencyGraph.Statement object at 0x7f128d9166d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f128d916220>, <dependencyGraph.Codelet object at 0x7f128d916760>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f128d916760>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p__br_tmp1', 'p_pkt_0']
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f128d916490>]
adj_inputs []
redundant outputs ['p_pkt_00', 'p__br_tmp1', 'p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | component b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f128d916490>]
removing two old components
adj_inputs []
redundant outputs ['p_pkt_00', 'p__br_tmp1', 'p_state_000', 'p_state_001']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_2_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 27 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, 27, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 13 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 13, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 1 2 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 1, 2, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( 0 - register_lo ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (0-register_lo)<0
    ( line =    bit condition_hi_s55 = (0 - register_lo_0) < 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f128d916a30>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f128d916a30>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f128d916a30>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '1', 'update_hi_2_value': '(ipv4.p_pkt_0)', 'update_lo_1_value': '1', 'update_lo_2_value': '(2)-(1)', 'condition_hi': '(0-alu_lo)<0', 'condition_lo': '((0-ipv4.p_pkt_0)+alu_lo)==0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.p_pkt_0)+alu_lo)==0;
    condition_hi              : (0-alu_lo)<0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (2)-(1);
    update_hi_1_predicate     :  not (condition_hi);
    update_hi_1_value         : 1;
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : (ipv4.p_pkt_0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.3744008541107178 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f6f3f8f35b0>, 'write': <dependencyGraph.Statement object at 0x7f6f3f8f36d0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f6f3f8f35b0>, 'write': <dependencyGraph.Statement object at 0x7f6f3f8f36d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f6f3f8f3220>, <dependencyGraph.Codelet object at 0x7f6f3f8f3760>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f6f3f8f3760>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p__br_tmp1']
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f6f3f8f3490>]
adj_inputs []
redundant outputs ['p_pkt_00', 'p__br_tmp1', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | component b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f6f3f8f3490>]
removing two old components
adj_inputs []
redundant outputs ['p_pkt_00', 'p__br_tmp1', 'p_state_001', 'p_state_000']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_3_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 1 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 3 metadata_hi 1 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_hi, 1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = register_lo == 0
process_salu_function: parsing  condition_hi ; rhs =  register_lo==0
    ( line =    bit condition_hi_s55 = register_lo_0 == 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - 0 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-0)==0
    ( line =    bit condition_lo_s67 = (metadata_lo - 0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f6f3f8f3a30>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f6f3f8f3a30>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f6f3f8f3a30>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(1)-(alu_lo)', 'update_hi_2_value': '(ipv4.p_pkt_0)', 'update_lo_1_value': '(1)', 'update_lo_2_value': '(alu_hi)-(2)', 'condition_hi': 'alu_lo==0', 'condition_lo': '(ipv4.p_pkt_0-0)==0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (ipv4.p_pkt_0-0)==0;
    condition_hi              : alu_lo==0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : (1);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_hi)-(2);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (1)-(alu_lo);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (ipv4.p_pkt_0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.52506422996521 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f4b1679c5b0>, 'write': <dependencyGraph.Statement object at 0x7f4b1679c6d0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f4b1679c5b0>, 'write': <dependencyGraph.Statement object at 0x7f4b1679c6d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f4b1679c220>, <dependencyGraph.Codelet object at 0x7f4b1679c760>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f4b1679c760>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p__br_tmp1']
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f4b1679c490>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp1', 'p_pkt_00']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | component b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f4b1679c490>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp1', 'p_pkt_00']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_4_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp1;

curr line: 	int p_pkt_00;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 1 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 metadata_lo 4 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_lo, 4, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 31 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_hi - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_hi-register_lo)+1)>0
    ( line =    bit condition_hi_s55 = ((metadata_hi - register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_lo ) + 4 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_lo)+4)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_lo_0) + 4) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f4b1679ca30>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f4b1679ca30>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f4b1679ca30>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(1)-(alu_lo)', 'update_hi_2_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_1_value': '1', 'update_lo_2_value': '(31)+(alu_lo)', 'condition_hi': '((0-alu_lo)+1)>0', 'condition_lo': '(((0-ipv4.p_pkt_0)-alu_lo)+4)>0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': ' not (condition_hi)', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_00 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)-alu_lo)+4)>0;
    condition_hi              : ((0-alu_lo)+1)>0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (31)+(alu_lo);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (1)-(alu_lo);
    update_hi_2_predicate     :  not (condition_hi);
    update_hi_2_value         : (ipv4.p_pkt_0)-(0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.3133089542388916 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f9ea9f495b0>, 'write': <dependencyGraph.Statement object at 0x7f9ea9f496d0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f9ea9f495b0>, 'write': <dependencyGraph.Statement object at 0x7f9ea9f496d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f9ea9f49220>, <dependencyGraph.Codelet object at 0x7f9ea9f49760>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f9ea9f49760>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p__br_tmp1', 'p_pkt_0']
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f9ea9f49490>]
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp1', 'p_pkt_00', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | component b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f9ea9f49490>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp1', 'p_pkt_00', 'p_state_001']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_5_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp1;

curr line: 	int p_pkt_00;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 0 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 7 16 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, 16, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 15 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 15, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+1)>0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)>0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 7 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(7, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  7
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) && (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f9ea9f49a30>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f9ea9f49a30>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f9ea9f49a30>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(ipv4.p_pkt_0)-(0)', 'update_hi_2_value': '(0)+(1)', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_hi)-(15)', 'condition_hi': '((0-alu_lo)+1)>0', 'condition_lo': '((ipv4.p_pkt_0-alu_lo)+1)>0', 'update_hi_1_predicate': ' not ((condition_hi) and (condition_lo))', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_00 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((ipv4.p_pkt_0-alu_lo)+1)>0;
    condition_hi              : ((0-alu_lo)+1)>0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_hi)-(15);
    update_hi_1_predicate     :  not ((condition_hi) and (condition_lo));
    update_hi_1_value         : (ipv4.p_pkt_0)-(0);
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : (0)+(1);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.3408970832824707 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f322873c5b0>, 'write': <dependencyGraph.Statement object at 0x7f322873c6d0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f322873c5b0>, 'write': <dependencyGraph.Statement object at 0x7f322873c6d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f322873c220>, <dependencyGraph.Codelet object at 0x7f322873c760>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f322873c760>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p__br_tmp1', 'p_pkt_0']
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f322873c490>]
adj_inputs []
redundant outputs ['p_pkt_00', 'p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | component b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f322873c490>]
removing two old components
adj_inputs []
redundant outputs ['p_pkt_00', 'p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_6_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 17 18 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 17, 18, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 2 1 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 2, 1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 0 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 0, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 1 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+1)!=0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 1) != 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+2)>0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 2) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 9 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(9, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  9
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  ~((condition_hi) && (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f322873ca30>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f322873ca30>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
Illegal character '~'
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f322873ca30>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(18)-(17)', 'update_hi_2_value': '(ipv4.p_pkt_0)-(alu_hi)', 'update_lo_1_value': '(2)-(1)', 'update_lo_2_value': '(alu_lo)', 'condition_hi': '((0-alu_lo)+1) !=0', 'condition_lo': '((0-alu_lo)+2)>0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '((condition_hi) and (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+2)>0;
    condition_hi              : ((0-alu_lo)+1) !=0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (2)-(1);
    update_lo_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_2_value         : (alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (18)-(17);
    update_hi_2_predicate     : ((condition_hi) and (condition_lo));
    update_hi_2_value         : (ipv4.p_pkt_0)-(alu_hi);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.4749629497528076 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f3c2e71e5b0>, 'write': <dependencyGraph.Statement object at 0x7f3c2e71e6d0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f3c2e71e5b0>, 'write': <dependencyGraph.Statement object at 0x7f3c2e71e6d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3c2e71e220>, <dependencyGraph.Codelet object at 0x7f3c2e71e760>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f3c2e71e760>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p__br_tmp1']
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f3c2e71e490>]
adj_inputs []
redundant outputs ['p_pkt_00', 'p__br_tmp1', 'p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | component b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f3c2e71e490>]
removing two old components
adj_inputs []
redundant outputs ['p_pkt_00', 'p__br_tmp1', 'p_state_000', 'p_state_001']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_7_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 1 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 3 metadata_hi 1 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_hi, 1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 2 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+1)>0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 2 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+2)<0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 2) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f3c2e71ea30>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f3c2e71ea30>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f3c2e71ea30>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(1)-(0)', 'update_hi_2_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_1_value': '(1)', 'update_lo_2_value': '(alu_lo)-(2)', 'condition_hi': '((0-alu_lo)+1)>0', 'condition_lo': '((ipv4.p_pkt_0-alu_lo)+2)<0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': ' not (condition_hi)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_00 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((ipv4.p_pkt_0-alu_lo)+2)<0;
    condition_hi              : ((0-alu_lo)+1)>0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (1);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo)-(2);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (1)-(0);
    update_hi_2_predicate     :  not (condition_hi);
    update_hi_2_value         : (ipv4.p_pkt_0)-(0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.4247887134552002 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7feebaf0b5b0>, 'write': <dependencyGraph.Statement object at 0x7feebaf0b6d0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7feebaf0b5b0>, 'write': <dependencyGraph.Statement object at 0x7feebaf0b6d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7feebaf0b220>, <dependencyGraph.Codelet object at 0x7feebaf0b760>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7feebaf0b760>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p__br_tmp1', 'p_pkt_0']
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7feebaf0b490>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp1', 'p_state_000', 'p_pkt_00']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | component b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7feebaf0b490>]
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp1', 'p_state_000', 'p_pkt_00']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_8_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_000;

curr line: 	int p_pkt_00;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 24 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 24, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 0 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, 0, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 7 16 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, 16, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 15 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 15, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_hi ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_hi)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_hi) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+1)>0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7feebaf0ba30>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7feebaf0ba30>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7feebaf0ba30>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(ipv4.p_pkt_0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_hi)-(15)', 'condition_hi': '((0-0)+alu_lo)>0', 'condition_lo': '((0-ipv4.p_pkt_0)+1)>0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': ' not (condition_hi)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_00 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.p_pkt_0)+1)>0;
    condition_hi              : ((0-0)+alu_lo)>0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_hi)-(15);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (ipv4.p_pkt_0);
    update_hi_2_predicate     :  not (condition_hi);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.3206424713134766 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f30a80955b0>, 'write': <dependencyGraph.Statement object at 0x7f30a80956d0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f30a80955b0>, 'write': <dependencyGraph.Statement object at 0x7f30a80956d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f30a8095220>, <dependencyGraph.Codelet object at 0x7f30a8095760>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f30a8095760>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p__br_tmp1']
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f30a8095490>]
adj_inputs []
redundant outputs ['p_pkt_00', 'p_state_001', 'p__br_tmp1', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | component b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f30a8095490>]
removing two old components
adj_inputs []
redundant outputs ['p_pkt_00', 'p_state_001', 'p__br_tmp1', 'p_state_000']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_9_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 6 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 6, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 0 7 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 0, 7, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 7 16 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, 16, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 metadata_hi register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_hi, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( 0 - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (0-register_lo)==0
    ( line =    bit condition_hi_s55 = (0 - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi - register_lo ) + 11 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi-register_lo)+11)>0
    ( line =    bit condition_lo_s67 = ((metadata_hi - register_lo_0) + 11) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f30a8095a30>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f30a8095a30>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f30a8095a30>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(ipv4.p_pkt_0)', 'update_hi_2_value': '1', 'update_lo_1_value': '1', 'update_lo_2_value': '(alu_lo)-(0)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '((0-alu_lo)+11)>0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+11)>0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo)-(0);
    update_hi_1_predicate     :  not (condition_hi);
    update_hi_1_value         : (ipv4.p_pkt_0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.3960647583007812 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow, program name: marple_new_flow_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp1 = p_state_000==0;

lhs p__br_tmp1 rhs p_state_000==0
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_state_000==0;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000']
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp1 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp1 = p_state_000==0;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
RAW p__br_tmp1 = p_state_000==0; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
RAW p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f0dba93e5b0>, 'write': <dependencyGraph.Statement object at 0x7f0dba93e6d0>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f0dba93e5b0>, 'write': <dependencyGraph.Statement object at 0x7f0dba93e6d0>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  5
SCC 0
v p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
SCC 1
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp1 = p_state_000==0 stmts len 1
p__br_tmp1 = p_state_000==0;
v p_state_001 = p__br_tmp1 ? (1) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f0dba93e220>, <dependencyGraph.Codelet object at 0x7f0dba93e760>]
p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp1 = p_state_000==0;
p_state_001 = p__br_tmp1 ? (1) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f0dba93e760>}
total number of nodes created:  2
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp1 = p_state_000==0
2   p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp1 ? (1) : (p_state_000)
 rhs_vars:  ['p__br_tmp1', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_state_000==0
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  2
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  2
number of SCC nodes post splitting:  2
total number of nodes created:  2
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp1 = p_state_000==0 p_state_001 = p__br_tmp1 ? (1) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  2
number of nodes in comp_graph:  2
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p__br_tmp1']
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f0dba93e490>]
adj_inputs []
redundant outputs ['p_pkt_00', 'p_state_000', 'p_state_001', 'p__br_tmp1']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 | component b:  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f0dba93e490>]
removing two old components
adj_inputs []
redundant outputs ['p_pkt_00', 'p_state_000', 'p_state_001', 'p__br_tmp1']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp1 = p_state_000==0; p_state_001 = p__br_tmp1 ? (1) : (p_state_000); state_0 = p_state_001; p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_new_flow/marple_new_flow_equivalent_10_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp1;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp1 = p_state_000==0;

curr line: 	p_state_001 = p__br_tmp1 ? (1) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p_pkt_00 = p__br_tmp1 ? (1) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 1 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 1, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 7 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 7, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 7 9 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, 9, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi 1 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+1)>0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_lo)+2)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_lo_0) + 2) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

# alus: =  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 1}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 31 rows, 15 columns and 44 nonzeros
Model fingerprint: 0xfaa25d18
Model has 12 general constraints
Variable types: 0 continuous, 15 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 8 rows and 2 columns
Presolve time: 0.00s
Presolved: 23 rows, 13 columns, 56 nonzeros
Variable types: 0 continuous, 13 integer (12 binary)
Found heuristic solution: objective 10.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 10 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 0
************************************************
Obj: 0
number of stages:  1
stage:  0.0
action:  0
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f0dba93ea30>]
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
 > get_alu_stage: table  0 , alu_id =  0 :  0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f0dba93ea30>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f0dba93ea30>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(1)-(alu_lo)', 'update_hi_2_value': '(ipv4.p_pkt_0)', 'update_lo_1_value': '1', 'update_lo_2_value': '(0)+(1)', 'condition_hi': '((0-alu_lo)+1)>0', 'condition_lo': '(((0-ipv4.p_pkt_0)-alu_lo)+2)>0', 'update_hi_1_predicate': '(condition_hi) or (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}]]
[[]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)-alu_lo)+2)>0;
    condition_hi              : ((0-alu_lo)+1)>0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : (0)+(1);
    update_hi_1_predicate     : (condition_hi) or (condition_lo);
    update_hi_1_value         : (1)-(alu_lo);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (ipv4.p_pkt_0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 1.555063247680664 s
preprocessor time:
