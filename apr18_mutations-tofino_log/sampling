running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_1_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f47ce8985b0>, 'write': <dependencyGraph.Statement object at 0x7f47ce898520>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f47ce8985b0>, 'write': <dependencyGraph.Statement object at 0x7f47ce898520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f47ce898a90>, <dependencyGraph.Codelet object at 0x7f47ce8988e0>, <dependencyGraph.Codelet object at 0x7f47ce8988b0>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f47ce8988b0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp5', 'p__br_tmp4'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp5', 'p__br_tmp4'}
   - createing a node for flank  p__br_tmp4
   - createing a node for flank  p__br_tmp5
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp5', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p__br_tmp5', 'p_pkt_00']
redundant outputs ['p_state_002', 'p_state_001', 'p__br_tmp4', 'p_state_000']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f47ce898820>]
adj_inputs []
redundant outputs ['p_state_002', 'p_state_001', 'p__br_tmp4', 'p_pkt_01', 'p_state_000', 'p__br_tmp5']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
new component inputs:  ['state_0', 'p_pkt_00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_002', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f47ce898820>]
removing two old components
adj_inputs []
redundant outputs ['p_state_002', 'p_state_001', 'p__br_tmp4', 'p_pkt_01', 'p_state_000', 'p__br_tmp5']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
		* new component inputs :  ['state_0', 'p_pkt_00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_002', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p__br_tmp4']
redundant outputs ['p_state_002', 'p_state_001', 'p_state_000', 'p__br_tmp5']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f47ce8981c0>]
adj_inputs []
redundant outputs ['p_state_002', 'p_state_001', 'p_pkt_00', 'p__br_tmp4', 'p_state_000', 'p__br_tmp5']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_002', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f47ce8981c0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_002', 'p_state_001', 'p_pkt_00', 'p__br_tmp4', 'p_state_000', 'p__br_tmp5']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_002', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_002;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp4;

curr line: 	int p_pkt_01;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp5;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_01;

 > FOUND OUT LINE : 	_out[2] = p_pkt_01;

> found out variable:  p_pkt_01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_01
Constructing new SALU: id= 0  metadata_lo= p_pkt_00  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 metadata_lo register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_lo, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 1 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 1, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - 0 ) + 19 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-0)+19)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - 0) + 19) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi - register_lo ) + 29 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi-register_lo)+29)!=0
    ( line =    bit condition_lo_s67 = ((metadata_hi - register_lo_0) + 29) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_1_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_002;

curr line: 	int p_state_001;

curr line: 	int p_pkt_00;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp5;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 25 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 25, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 25 18 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 25, 18, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 0 condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, 0, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(0)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 0 condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, 0, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (0) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 0 condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, 0, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(0)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 13 0 condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(13, 0, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (0) || (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f47ce8c9e50>, <alus.SALU object at 0x7f47ce8c9af0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f47ce8c9e50>, 0), (<alus.SALU object at 0x7f47ce8c9af0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_01
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f47ce8c9e50>
 -* this SALU:  <alus.SALU object at 0x7f47ce8c9af0>
salu_configs:  [[1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_01', 'update_hi_1_value': '(ipv4.p_pkt_00)+(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(alu_hi)', 'condition_hi': '(((0-ipv4.p_pkt_00)-0)+19)==0', 'condition_lo': '((0-alu_lo)+29) !=0', 'update_hi_1_predicate': '(condition_lo)', 'update_hi_2_predicate': ' not (condition_lo)', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': ' not (condition_lo)', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(ipv4.p_pkt_0)', 'update_hi_2_value': '(18)-(25)', 'update_lo_1_value': '(0)-(0)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_lo': '((0-alu_lo)+29)==0', 'update_hi_1_predicate': '( not (0)) and (condition_lo)', 'update_hi_2_predicate': '(0) and (condition_lo)', 'update_lo_1_predicate': '( not (0)) and (condition_lo)', 'update_lo_2_predicate': '(0) or ( not (condition_lo))', 'output_value': '0'}]]
[[]]
[[1, 1]]
num pipeline stages:  1
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_00 : 32 (signed);   
        p_pkt_01 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+29) !=0;
    condition_hi              : (((0-ipv4.p_pkt_00)-0)+19)==0;
    update_lo_1_predicate     : (condition_lo);
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     :  not (condition_lo);
    update_lo_2_value         : (alu_hi);
    update_hi_1_predicate     : (condition_lo);
    update_hi_1_value         : (ipv4.p_pkt_00)+(0);
    update_hi_2_predicate     :  not (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_01;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-alu_lo)+29)==0;
    condition_hi              : 0;
    update_lo_1_predicate     : ( not (0)) and (condition_lo);
    update_lo_1_value         : (0)-(0);
    update_lo_2_predicate     : (0) or ( not (condition_lo));
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     : ( not (0)) and (condition_lo);
    update_hi_1_value         : (ipv4.p_pkt_0);
    update_hi_2_predicate     : (0) and (condition_lo);
    update_hi_2_value         : (18)-(25);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.416689872741699 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_2_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f1112b8a5b0>, 'write': <dependencyGraph.Statement object at 0x7f1112b8a520>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f1112b8a5b0>, 'write': <dependencyGraph.Statement object at 0x7f1112b8a520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f1112b8aa90>, <dependencyGraph.Codelet object at 0x7f1112b8a8e0>, <dependencyGraph.Codelet object at 0x7f1112b8a8b0>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f1112b8a8b0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp4', 'p__br_tmp5'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp4', 'p__br_tmp5'}
   - createing a node for flank  p__br_tmp5
   - createing a node for flank  p__br_tmp4
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_00', 'p__br_tmp5']
redundant outputs ['p_state_000', 'p_state_002', 'p__br_tmp4', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f1112b8a820>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_002', 'p__br_tmp4', 'p_state_001', 'p__br_tmp5', 'p_pkt_01']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
new component inputs:  ['state_0', 'p_pkt_00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_002', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f1112b8a820>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p_state_002', 'p__br_tmp4', 'p_state_001', 'p__br_tmp5', 'p_pkt_01']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
		* new component inputs :  ['state_0', 'p_pkt_00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_002', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp4', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p__br_tmp4', 'p_pkt_0']
redundant outputs ['p_state_000', 'p_state_002', 'p_state_001', 'p__br_tmp5']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f1112b8a1c0>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_002', 'p__br_tmp4', 'p_state_001', 'p__br_tmp5', 'p_pkt_00']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_002', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f1112b8a1c0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p_state_002', 'p__br_tmp4', 'p_state_001', 'p__br_tmp5', 'p_pkt_00']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_002', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp5;

curr line: 	int p_pkt_01;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_01;

 > FOUND OUT LINE : 	_out[2] = p_pkt_01;

> found out variable:  p_pkt_01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_01
Constructing new SALU: id= 0  metadata_lo= p_pkt_00  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 31 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, 31, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 31 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 31, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 0 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_hi - register_lo ) + 28 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_hi-register_lo)+28)<0
    ( line =    bit condition_hi_s55 = ((metadata_hi - register_lo_0) + 28) < 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 29 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+29)<0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 29) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_2_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp5;

curr line: 	int p_pkt_00;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 5 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 5, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 3 13 2 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 13, 2, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 5 13 15 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 13, 15, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - 0 ) + 10 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-0)+10)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - 0) + 10) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 29 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+29)!=0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 29) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f1112bbbe50>, <alus.SALU object at 0x7f1112bbbaf0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f1112bbbe50>, 0), (<alus.SALU object at 0x7f1112bbbaf0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_01
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f1112bbbe50>
 -* this SALU:  <alus.SALU object at 0x7f1112bbbaf0>
salu_configs:  [[1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_01', 'update_hi_1_value': '1', 'update_hi_2_value': '(ipv4.p_pkt_00)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(0)+(alu_hi)', 'condition_hi': '((0-alu_lo)+28)<0', 'condition_lo': '((0-alu_lo)+29)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '( not (condition_hi)) or (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) or (condition_lo)', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(ipv4.p_pkt_0)', 'update_hi_2_value': '(2)', 'update_lo_1_value': '0', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p_pkt_0)-0)+10)>0', 'condition_lo': '((0-alu_lo)+29) !=0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not (condition_lo)', 'update_lo_2_predicate': '(condition_lo)', 'output_value': '0'}]]
[[]]
[[1, 1]]
num pipeline stages:  1
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_01 : 32 (signed);   
        p_pkt_00 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+29)<0;
    condition_hi              : ((0-alu_lo)+28)<0;
    update_lo_1_predicate     : ( not (condition_hi)) or (condition_lo);
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_2_value         : (0)+(alu_hi);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : 1;
    update_hi_2_predicate     : ( not (condition_hi)) or (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_00);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_01;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-alu_lo)+29) !=0;
    condition_hi              : (((0-ipv4.p_pkt_0)-0)+10)>0;
    update_lo_1_predicate     :  not (condition_lo);
    update_lo_1_value         : 0;
    update_lo_2_predicate     : (condition_lo);
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     :  not (condition_lo);
    update_hi_1_value         : (ipv4.p_pkt_0);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (2);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.254457473754883 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_3_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp6 = !(p_state_000==29);

lhs p__br_tmp6 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp6 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp6 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0']
p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_000', 'p_state_000']
p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp7 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp7 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_pkt_00']
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp7 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp7 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp6 = !(p_state_000==29); p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
RAW p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
RAW p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
RAW p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f7c628ae5b0>, 'write': <dependencyGraph.Statement object at 0x7f7c628ae520>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f7c628ae5b0>, 'write': <dependencyGraph.Statement object at 0x7f7c628ae520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = !(p_state_000==29) stmts len 1
p__br_tmp6 = !(p_state_000==29);
v p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
v p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp7 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7c628aea90>, <dependencyGraph.Codelet object at 0x7f7c628ae8e0>, <dependencyGraph.Codelet object at 0x7f7c628ae8b0>]
p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp6 = !(p_state_000==29);
p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);
p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp7 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f7c628ae8b0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp6', 'p__br_tmp7'}
elements in v_outputs:  {'p__br_tmp6', 'p__br_tmp7'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp6', 'p__br_tmp7'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp6 = !(p_state_000==29)
2   p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp7 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp7 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp7  not in state vars
 statement:  p__br_tmp7 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp6', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp7 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp7', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp6', 'p__br_tmp7'}
   - createing a node for flank  p__br_tmp7
   - createing a node for flank  p__br_tmp6
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_state_000==29) p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000) p__br_tmp7 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp7 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;', 'p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp7', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
     |  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p__br_tmp7', 'p_pkt_00']
redundant outputs ['p__br_tmp6', 'p_state_000', 'p_state_001', 'p_state_002']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f7c628ae820>]
adj_inputs []
redundant outputs ['p__br_tmp6', 'p_pkt_01', 'p_state_000', 'p__br_tmp7', 'p_state_001', 'p_state_002']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
new component inputs:  ['state_0', 'p_pkt_00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_002', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f7c628ae820>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp6', 'p_pkt_01', 'p_state_000', 'p__br_tmp7', 'p_state_001', 'p_state_002']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
		* new component inputs :  ['state_0', 'p_pkt_00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_002', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);', 'p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp6', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p__br_tmp6', 'p_pkt_0']
redundant outputs ['p_state_000', 'p__br_tmp7', 'p_state_001', 'p_state_002']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f7c628ae1c0>]
adj_inputs []
redundant outputs ['p_pkt_00', 'p__br_tmp6', 'p_state_000', 'p__br_tmp7', 'p_state_001', 'p_state_002']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_002', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f7c628ae1c0>]
removing two old components
adj_inputs []
redundant outputs ['p_pkt_00', 'p__br_tmp6', 'p_state_000', 'p__br_tmp7', 'p_state_001', 'p_state_002']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_002', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp6 = !(p_state_000==29); p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000); p__br_tmp7 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp7 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp6;

curr line: 	int p_pkt_01;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp7;

curr line: 	int p_state_001;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp6 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp7 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_01 = p__br_tmp7 ? (1) : (p_pkt_00);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_01;

 > FOUND OUT LINE : 	_out[2] = p_pkt_01;

> found out variable:  p_pkt_01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_01
Constructing new SALU: id= 0  metadata_lo= p_pkt_00  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 31 30 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 31, 30, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 11 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 11, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+29)==0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 29) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+1)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_3_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	bit p__br_tmp6;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp7;

curr line: 	int p_state_001;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp6 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp6 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp7 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp7 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_00 = p__br_tmp6 ? (0) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 1 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 11 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 11, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 5 5 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(5, 5, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+29)==0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 29) == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 27 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+27)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 27) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f7c628e0e50>, <alus.SALU object at 0x7f7c628e0af0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f7c628e0e50>, 0), (<alus.SALU object at 0x7f7c628e0af0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_01
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f7c628e0e50>
 -* this SALU:  <alus.SALU object at 0x7f7c628e0af0>
salu_configs:  [[1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_01', 'update_hi_1_value': '(31)-(30)', 'update_hi_2_value': '(ipv4.p_pkt_00)', 'update_lo_1_value': '(0)+(0)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '((0-alu_lo)+29)==0', 'condition_lo': '(((0-ipv4.p_pkt_00)+alu_lo)+1)==0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': ' not (condition_hi)', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(1)+(1)', 'update_hi_2_value': '(ipv4.p_pkt_0)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '0', 'condition_hi': '((0-alu_lo)+29)==0', 'condition_lo': '((ipv4.p_pkt_0-alu_lo)+27)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}]]
[[]]
[[1, 1]]
num pipeline stages:  1
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_01 : 32 (signed);   
        p_pkt_00 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_00)+alu_lo)+1)==0;
    condition_hi              : ((0-alu_lo)+29)==0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : (0)+(0);
    update_lo_2_predicate     :  not (condition_hi);
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (31)-(30);
    update_hi_2_predicate     :  not (condition_hi);
    update_hi_2_value         : (ipv4.p_pkt_00);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_01;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((ipv4.p_pkt_0-alu_lo)+27)==0;
    condition_hi              : ((0-alu_lo)+29)==0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : 0;
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (1)+(1);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (ipv4.p_pkt_0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.878188133239746 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_4_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f32578735b0>, 'write': <dependencyGraph.Statement object at 0x7f3257873520>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f32578735b0>, 'write': <dependencyGraph.Statement object at 0x7f3257873520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3257873a90>, <dependencyGraph.Codelet object at 0x7f32578738e0>, <dependencyGraph.Codelet object at 0x7f32578738b0>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f32578738b0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp4', 'p__br_tmp5'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp4', 'p__br_tmp5'}
   - createing a node for flank  p__br_tmp5
   - createing a node for flank  p__br_tmp4
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_00', 'p__br_tmp5']
redundant outputs ['p_state_001', 'p__br_tmp4', 'p_state_000', 'p_state_002']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f3257873820>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp4', 'p__br_tmp5', 'p_state_000', 'p_state_002', 'p_pkt_01']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
new component inputs:  ['state_0', 'p_pkt_00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_002']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f3257873820>]
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp4', 'p__br_tmp5', 'p_state_000', 'p_state_002', 'p_pkt_01']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
		* new component inputs :  ['state_0', 'p_pkt_00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_002']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp4', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p__br_tmp4', 'p_pkt_0']
redundant outputs ['p_state_001', 'p__br_tmp5', 'p_state_000', 'p_state_002']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f32578731c0>]
adj_inputs []
redundant outputs ['p_state_001', 'p_pkt_00', 'p__br_tmp4', 'p__br_tmp5', 'p_state_000', 'p_state_002']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_002']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f32578731c0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p_pkt_00', 'p__br_tmp4', 'p__br_tmp5', 'p_state_000', 'p_state_002']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_002']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp4;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_000;

curr line: 	int p_state_002;

curr line: 	int p_pkt_01;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_01;

 > FOUND OUT LINE : 	_out[2] = p_pkt_01;

> found out variable:  p_pkt_01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_01
Constructing new SALU: id= 0  metadata_lo= p_pkt_00  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 1 3 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, 1, 3, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 27 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 27, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 29 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+29)!=0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 29) != 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_hi ) + 1 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_hi)+1)!=0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_hi_1) + 1) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 7 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(7, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  7
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) && (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_4_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_pkt_00;

curr line: 	bit p__br_tmp4;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_000;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 25 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 25, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 25 18 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 25, 18, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 0 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 0 condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, 0, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(0)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 0 condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, 0, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (0) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 0 condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, 0, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 0 condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, 0, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  0  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((0) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f32578a6e50>, <alus.SALU object at 0x7f32578a6af0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f32578a6e50>, 0), (<alus.SALU object at 0x7f32578a6af0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_01
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f32578a6e50>
 -* this SALU:  <alus.SALU object at 0x7f32578a6af0>
salu_configs:  [[1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_01', 'update_hi_1_value': '(ipv4.p_pkt_00)-(0)', 'update_hi_2_value': '(1)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(alu_hi)', 'condition_hi': '((0-alu_lo)+29) !=0', 'condition_lo': '(((0-ipv4.p_pkt_00)-alu_hi)+1) !=0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) and (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(ipv4.p_pkt_0)', 'update_hi_2_value': '(18)-(25)', 'update_lo_1_value': '(0)-(0)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_lo': '((0-alu_lo)+29)==0', 'update_hi_1_predicate': '( not (0)) and (condition_lo)', 'update_hi_2_predicate': '(0) and (condition_lo)', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': ' not ((0) or (condition_lo))', 'output_value': '0'}]]
[[]]
[[1, 1]]
num pipeline stages:  1
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_00 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p_pkt_01 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_00)-alu_hi)+1) !=0;
    condition_hi              : ((0-alu_lo)+29) !=0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     :  not (condition_hi);
    update_lo_2_value         : (alu_hi);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (ipv4.p_pkt_00)-(0);
    update_hi_2_predicate     :  not ((condition_hi) and (condition_lo));
    update_hi_2_value         : (1);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_01;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-alu_lo)+29)==0;
    condition_hi              : 0;
    update_lo_1_predicate     : (condition_lo);
    update_lo_1_value         : (0)-(0);
    update_lo_2_predicate     :  not ((0) or (condition_lo));
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     : ( not (0)) and (condition_lo);
    update_hi_1_value         : (ipv4.p_pkt_0);
    update_hi_2_predicate     : (0) and (condition_lo);
    update_hi_2_value         : (18)-(25);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.9785068035125732 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_5_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f7fe9ef25b0>, 'write': <dependencyGraph.Statement object at 0x7f7fe9ef2520>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f7fe9ef25b0>, 'write': <dependencyGraph.Statement object at 0x7f7fe9ef2520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7fe9ef2a90>, <dependencyGraph.Codelet object at 0x7f7fe9ef28e0>, <dependencyGraph.Codelet object at 0x7f7fe9ef28b0>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f7fe9ef28b0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp5', 'p__br_tmp4'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp5', 'p__br_tmp4'}
   - createing a node for flank  p__br_tmp4
   - createing a node for flank  p__br_tmp5
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_00', 'p__br_tmp5']
redundant outputs ['p__br_tmp4', 'p_state_000', 'p_state_001', 'p_state_002']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f7fe9ef2820>]
adj_inputs []
redundant outputs ['p__br_tmp4', 'p_pkt_01', 'p__br_tmp5', 'p_state_000', 'p_state_001', 'p_state_002']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
new component inputs:  ['state_0', 'p_pkt_00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_002']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f7fe9ef2820>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp4', 'p_pkt_01', 'p__br_tmp5', 'p_state_000', 'p_state_001', 'p_state_002']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
		* new component inputs :  ['state_0', 'p_pkt_00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_002']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p__br_tmp4']
redundant outputs ['p__br_tmp5', 'p_state_000', 'p_state_001', 'p_state_002']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f7fe9ef21c0>]
adj_inputs []
redundant outputs ['p_pkt_00', 'p__br_tmp4', 'p__br_tmp5', 'p_state_000', 'p_state_001', 'p_state_002']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_002']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f7fe9ef21c0>]
removing two old components
adj_inputs []
redundant outputs ['p_pkt_00', 'p__br_tmp4', 'p__br_tmp5', 'p_state_000', 'p_state_001', 'p_state_002']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_002']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp4;

curr line: 	int p_pkt_01;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_01;

 > FOUND OUT LINE : 	_out[2] = p_pkt_01;

> found out variable:  p_pkt_01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_01
Constructing new SALU: id= 0  metadata_lo= p_pkt_00  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 29 31 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 29, 31, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+29)==0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 29) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_5_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_00;

curr line: 	bit p__br_tmp4;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 6 31 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 31, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 31 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 31, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 31 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+31)<0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 31) < 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f7fe9f22e50>, <alus.SALU object at 0x7f7fe9f22af0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f7fe9f22e50>, 0), (<alus.SALU object at 0x7f7fe9f22af0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_01
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f7fe9f22e50>
 -* this SALU:  <alus.SALU object at 0x7f7fe9f22af0>
salu_configs:  [[1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_01', 'update_hi_1_value': '(ipv4.p_pkt_00)', 'update_hi_2_value': '1', 'update_lo_1_value': '(0)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '((0-alu_lo)+29)==0', 'condition_lo': '((0-ipv4.p_pkt_00)-alu_lo)>0', 'update_hi_1_predicate': '( not (condition_hi)) or (condition_lo)', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) or (condition_lo)', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '1', 'update_hi_2_value': '(ipv4.p_pkt_0)', 'update_lo_1_value': '(0)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '((0-alu_lo)+31)<0', 'condition_lo': '((0-alu_lo)+29)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi) or (condition_lo)', 'update_lo_2_predicate': ' not (condition_lo)', 'output_value': '0'}]]
[[]]
[[1, 1]]
num pipeline stages:  1
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_01 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p_pkt_00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.p_pkt_00)-alu_lo)>0;
    condition_hi              : ((0-alu_lo)+29)==0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (0);
    update_lo_2_predicate     : ( not (condition_hi)) or (condition_lo);
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     : ( not (condition_hi)) or (condition_lo);
    update_hi_1_value         : (ipv4.p_pkt_00);
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_01;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-alu_lo)+29)==0;
    condition_hi              : ((0-alu_lo)+31)<0;
    update_lo_1_predicate     : (condition_hi) or (condition_lo);
    update_lo_1_value         : (0);
    update_lo_2_predicate     :  not (condition_lo);
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : 1;
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.440416097640991 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_6_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp8 = !(p_state_000==29);

lhs p__br_tmp8 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp8 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp8 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_0']
p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp8 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_state_000', 'p_state_000']
p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp9 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp9 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_pkt_00']
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp9 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp9 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp8 = !(p_state_000==29); p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
RAW p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
RAW p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
RAW p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f538f50c5b0>, 'write': <dependencyGraph.Statement object at 0x7f538f50c520>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f538f50c5b0>, 'write': <dependencyGraph.Statement object at 0x7f538f50c520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp8 = !(p_state_000==29) stmts len 1
p__br_tmp8 = !(p_state_000==29);
v p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
v p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp9 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f538f50ca90>, <dependencyGraph.Codelet object at 0x7f538f50c8e0>, <dependencyGraph.Codelet object at 0x7f538f50c8b0>]
p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp8 = !(p_state_000==29);
p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);
p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp9 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f538f50c8b0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp9', 'p__br_tmp8'}
elements in v_outputs:  {'p__br_tmp9', 'p__br_tmp8'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp9', 'p__br_tmp8'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp8 = !(p_state_000==29)
2   p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp9 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp9 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp8', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp9  not in state vars
 statement:  p__br_tmp9 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp9 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp9', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp9', 'p__br_tmp8'}
   - createing a node for flank  p__br_tmp8
   - createing a node for flank  p__br_tmp9
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_state_000==29) p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000) p__br_tmp9 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp9 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;', 'p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp9', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
     |  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p__br_tmp9', 'p_pkt_00']
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp8', 'p_state_002']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f538f50c820>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p_pkt_01', 'p__br_tmp8', 'p__br_tmp9', 'p_state_002']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
new component inputs:  ['state_0', 'p_pkt_00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_002']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f538f50c820>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p_pkt_01', 'p__br_tmp8', 'p__br_tmp9', 'p_state_002']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
		* new component inputs :  ['state_0', 'p_pkt_00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_002']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);', 'p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp8']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p__br_tmp8']
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp9', 'p_state_002']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f538f50c1c0>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp8', 'p_pkt_00', 'p__br_tmp9', 'p_state_002']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_002']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f538f50c1c0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp8', 'p_pkt_00', 'p__br_tmp9', 'p_state_002']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_002']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp8 = !(p_state_000==29); p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000); p__br_tmp9 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp9 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	int p_pkt_01;

curr line: 	bit p__br_tmp8;

curr line: 	bit p__br_tmp9;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp8 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp9 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_01 = p__br_tmp9 ? (1) : (p_pkt_00);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_01;

 > FOUND OUT LINE : 	_out[2] = p_pkt_01;

> found out variable:  p_pkt_01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_01
Constructing new SALU: id= 0  metadata_lo= p_pkt_00  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 29 28 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 29, 28, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 3 1 register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, 1, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 29 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+29)!=0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 29) != 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi - register_hi ) + 4 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi-register_hi)+4)!=0
    ( line =    bit condition_lo_s67 = ((metadata_hi - register_hi_1) + 4) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 7 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(7, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  7
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) && (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_6_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp8;

curr line: 	int p_pkt_00;

curr line: 	bit p__br_tmp9;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp8 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp8 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp9 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp9 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_00 = p__br_tmp8 ? (0) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 23 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 23, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 2 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 2, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 17 17 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 17, 17, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 29 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+29)!=0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 29) != 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_lo ) + 4 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_lo)+4)!=0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_lo_0) + 4) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f538f53fe50>, <alus.SALU object at 0x7f538f53faf0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f538f53fe50>, 0), (<alus.SALU object at 0x7f538f53faf0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_01
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f538f53fe50>
 -* this SALU:  <alus.SALU object at 0x7f538f53faf0>
salu_configs:  [[1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_01', 'update_hi_1_value': '(29)-(28)', 'update_hi_2_value': '(ipv4.p_pkt_00)', 'update_lo_1_value': '(alu_hi)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '((0-alu_lo)+29) !=0', 'condition_lo': '((0-alu_hi)+4) !=0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not ((condition_hi) and (condition_lo))', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(23)-(3)', 'update_hi_2_value': '(ipv4.p_pkt_0)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(17)-(17)', 'condition_hi': '((0-alu_lo)+29) !=0', 'condition_lo': '(((0-ipv4.p_pkt_0)-alu_lo)+4) !=0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}]]
[[]]
[[1, 1]]
num pipeline stages:  1
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_01 : 32 (signed);   
        p_pkt_00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_hi)+4) !=0;
    condition_hi              : ((0-alu_lo)+29) !=0;
    update_lo_1_predicate     :  not ((condition_hi) and (condition_lo));
    update_lo_1_value         : (alu_hi);
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_1_value         : (29)-(28);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_00);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_01;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-ipv4.p_pkt_0)-alu_lo)+4) !=0;
    condition_hi              : ((0-alu_lo)+29) !=0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (17)-(17);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (23)-(3);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.968862295150757 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_7_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp5 = p_state_000==29;

lhs p__br_tmp5 rhs p_state_000==29
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = p_state_000==29;

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp5 ? (1) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_0']
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp5 ? (0) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp5 ? (0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_000']
p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));

lhs p__br_tmp6 rhs (!(p_state_000==29))&&(!(p_state_001==29))
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp6 ? (0) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_00']
p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);

lhs p_state_002 rhs p__br_tmp6 ? (1+p_state_001) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_state_001', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp5 = p_state_000==29;
RAW p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
RAW p__br_tmp5 = p_state_000==29; p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
RAW p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
RAW p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0); p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
RAW p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
RAW p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
RAW p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
RAW p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
RAW p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f76758605b0>, 'write': <dependencyGraph.Statement object at 0x7f7675860370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f76758605b0>, 'write': <dependencyGraph.Statement object at 0x7f7675860370>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp5 = p_state_000==29 stmts len 1
p__br_tmp5 = p_state_000==29;
v p_state_001 = p__br_tmp5 ? (0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
v p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) stmts len 1
p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
v p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f7675860a90>, <dependencyGraph.Codelet object at 0x7f76758608e0>, <dependencyGraph.Codelet object at 0x7f76758608b0>]
p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp5 = p_state_000==29;
p_state_001 = p__br_tmp5 ? (0) : (p_state_000);
p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));
p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f76758608b0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp6', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp6', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp6', 'p__br_tmp5'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp5 = p_state_000==29
2   p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
3   p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29))
4   p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001)
5   state_0 = p_state_002
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp5 ? (0) : (p_state_000)
 rhs_vars:  ['p__br_tmp5', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = p_state_000==29
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29))
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001)
 rhs_vars:  ['p__br_tmp6', 'p_state_001', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp6', 'p__br_tmp5'}
   - createing a node for flank  p__br_tmp5
   - createing a node for flank  p__br_tmp6
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_002', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp5 = p_state_000==29 p_state_001 = p__br_tmp5 ? (0) : (p_state_000) p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)) p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;', 'p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp6', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
     |  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p__br_tmp6', 'p_pkt_00']
redundant outputs ['p_state_001', 'p__br_tmp5', 'p_state_002', 'p_state_000']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f76758601c0>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp5', 'p__br_tmp6', 'p_pkt_01', 'p_state_002', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
new component inputs:  ['state_0', 'p_pkt_00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_002', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f76758601c0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp5', 'p__br_tmp6', 'p_pkt_01', 'p_state_002', 'p_state_000']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
		* new component inputs :  ['state_0', 'p_pkt_00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_002', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);', 'p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp5', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p__br_tmp5', 'p_pkt_0']
redundant outputs ['p_state_001', 'p__br_tmp6', 'p_state_002', 'p_state_000']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f7675860520>]
adj_inputs []
redundant outputs ['p_state_001', 'p_pkt_00', 'p__br_tmp5', 'p__br_tmp6', 'p_state_002', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_002', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_002', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f7675860520>]
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p_pkt_00', 'p__br_tmp5', 'p__br_tmp6', 'p_state_002', 'p_state_000']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_002', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp5 = p_state_000==29; p_state_001 = p__br_tmp5 ? (0) : (p_state_000); p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29)); p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp5;

curr line: 	bit p__br_tmp6;

curr line: 	int p_pkt_01;

curr line: 	int p_state_002;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp5 = p_state_000==29;

curr line: 	p_state_001 = p__br_tmp5 ? (0) : (p_state_000);

curr line: 	p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));

curr line: 	p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_01 = p__br_tmp6 ? (0) : (p_pkt_00);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_01;

 > FOUND OUT LINE : 	_out[2] = p_pkt_01;

> found out variable:  p_pkt_01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_01
Constructing new SALU: id= 0  metadata_lo= p_pkt_00  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 3 11 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 11, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 5 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 5, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_hi ) - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_hi)-register_lo)+29)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_hi) - register_lo_0) + 29) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_lo ) + 3 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_lo)+3)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_lo_0) + 3) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_7_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_pkt_00;

curr line: 	bit p__br_tmp5;

curr line: 	bit p__br_tmp6;

curr line: 	int p_state_002;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp5 = p_state_000==29;

curr line: 	p_state_001 = p__br_tmp5 ? (0) : (p_state_000);

curr line: 	p__br_tmp6 = (!(p_state_000==29))&&(!(p_state_001==29));

curr line: 	p_state_002 = p__br_tmp6 ? (1+p_state_001) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_00 = p__br_tmp5 ? (1) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 2 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 2, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 4 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 4, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 29 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+29)!=0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 29) != 0;
  )
demangled line:  bit condition_lo = ( metadata_lo + register_lo ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo+register_lo)!=0
    ( line =    bit condition_lo_s67 = (metadata_lo + register_lo_0) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f7675860310>, <alus.SALU object at 0x7f7675894460>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f7675860310>, 0), (<alus.SALU object at 0x7f7675894460>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_01
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f7675860310>
 -* this SALU:  <alus.SALU object at 0x7f7675894460>
salu_configs:  [[1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_01', 'update_hi_1_value': '(ipv4.p_pkt_00)', 'update_hi_2_value': '(3)-(11)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(alu_hi)', 'condition_hi': '(((0-0)-alu_lo)+29)==0', 'condition_lo': '(((0-ipv4.p_pkt_00)-alu_lo)+3)==0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) or (condition_lo)', 'update_lo_2_predicate': '(condition_hi) and ( not (condition_lo))', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(ipv4.p_pkt_0)', 'update_hi_2_value': '1', 'update_lo_1_value': '(0)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '((0-alu_lo)+29) !=0', 'condition_lo': '(ipv4.p_pkt_0+alu_lo) !=0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': '(condition_hi) or ( not (condition_lo))', 'output_value': '0'}]]
[[]]
[[1, 1]]
num pipeline stages:  1
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_00 : 32 (signed);   
        p_pkt_01 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_00)-alu_lo)+3)==0;
    condition_hi              : (((0-0)-alu_lo)+29)==0;
    update_lo_1_predicate     : ( not (condition_hi)) or (condition_lo);
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_2_value         : (alu_hi);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (ipv4.p_pkt_00);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (3)-(11);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_01;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (ipv4.p_pkt_0+alu_lo) !=0;
    condition_hi              : ((0-alu_lo)+29) !=0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (0);
    update_lo_2_predicate     : (condition_hi) or ( not (condition_lo));
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (ipv4.p_pkt_0);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.916480779647827 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_8_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fd3ace9e5b0>, 'write': <dependencyGraph.Statement object at 0x7fd3ace9e520>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fd3ace9e5b0>, 'write': <dependencyGraph.Statement object at 0x7fd3ace9e520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fd3ace9ea90>, <dependencyGraph.Codelet object at 0x7fd3ace9e8e0>, <dependencyGraph.Codelet object at 0x7fd3ace9e8b0>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fd3ace9e8b0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
elements in v_outputs:  {'p__br_tmp5', 'p__br_tmp4'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp5', 'p__br_tmp4'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp5', 'p__br_tmp4'}
   - createing a node for flank  p__br_tmp4
   - createing a node for flank  p__br_tmp5
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp5', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p__br_tmp5', 'p_pkt_00']
redundant outputs ['p_state_000', 'p_state_001', 'p_state_002', 'p__br_tmp4']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7fd3ace9e820>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp5', 'p_state_002', 'p__br_tmp4', 'p_pkt_01']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
new component inputs:  ['state_0', 'p_pkt_00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_002']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7fd3ace9e820>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp5', 'p_state_002', 'p__br_tmp4', 'p_pkt_01']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
		* new component inputs :  ['state_0', 'p_pkt_00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_002']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p_pkt_0', 'p__br_tmp4']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_0', 'p__br_tmp4']
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp5', 'p_state_002']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7fd3ace9e1c0>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp5', 'p_state_002', 'p__br_tmp4', 'p_pkt_00']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_002']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7fd3ace9e1c0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp5', 'p_state_002', 'p__br_tmp4', 'p_pkt_00']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_002']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp4;

curr line: 	int p_pkt_01;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_01;

 > FOUND OUT LINE : 	_out[2] = p_pkt_01;

> found out variable:  p_pkt_01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_01
Constructing new SALU: id= 0  metadata_lo= p_pkt_00  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 31 31 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, 31, 31, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 5 metadata_lo 5 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(5, metadata_lo, 5, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 27 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+27)>0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 27) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_8_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_002;

curr line: 	bit p__br_tmp4;

curr line: 	int p_pkt_00;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 29 31 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 29, 31, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 5 8 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 8, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = register_lo == 0
process_salu_function: parsing  condition_hi ; rhs =  register_lo==0
    ( line =    bit condition_hi_s55 = register_lo_0 == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_hi ) - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_hi)-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_hi) - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fd3aced1e50>, <alus.SALU object at 0x7fd3aced1af0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7fd3aced1e50>, 0), (<alus.SALU object at 0x7fd3aced1af0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_01
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fd3aced1e50>
 -* this SALU:  <alus.SALU object at 0x7fd3aced1af0>
salu_configs:  [[1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_01', 'update_hi_1_value': '1', 'update_hi_2_value': '(ipv4.p_pkt_00)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '0', 'condition_hi': '((0-alu_lo)+27)>0', 'condition_lo': '((0-alu_lo)+29)==0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': ' not (condition_lo)', 'update_lo_1_predicate': ' not (condition_lo)', 'update_lo_2_predicate': '(condition_lo)', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(ipv4.p_pkt_0)', 'update_hi_2_value': '(29)+(31)', 'update_lo_1_value': '0', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': 'alu_lo==0', 'condition_lo': '(((0-0)-alu_lo)+29)==0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': '(condition_hi) or ( not (condition_lo))', 'output_value': '0'}]]
[[]]
[[1, 1]]
num pipeline stages:  1
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_01 : 32 (signed);   
        p_pkt_00 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+29)==0;
    condition_hi              : ((0-alu_lo)+27)>0;
    update_lo_1_predicate     :  not (condition_lo);
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     : (condition_lo);
    update_lo_2_value         : 0;
    update_hi_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_1_value         : 1;
    update_hi_2_predicate     :  not (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_00);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_01;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (((0-0)-alu_lo)+29)==0;
    condition_hi              : alu_lo==0;
    update_lo_1_predicate     : (condition_lo);
    update_lo_1_value         : 0;
    update_lo_2_predicate     : (condition_hi) or ( not (condition_lo));
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_1_value         : (ipv4.p_pkt_0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (29)+(31);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.7812108993530273 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_9_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp2 = !(p_state_000==29);

lhs p__br_tmp2 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp2 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp2 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0']
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_state_000', 'p_state_000']
p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp3 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp3 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_pkt_00']
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp3 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp3 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp2 = !(p_state_000==29); p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
RAW p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
RAW p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
RAW p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f10e441a5b0>, 'write': <dependencyGraph.Statement object at 0x7f10e441a520>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f10e441a5b0>, 'write': <dependencyGraph.Statement object at 0x7f10e441a520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = !(p_state_000==29) stmts len 1
p__br_tmp2 = !(p_state_000==29);
v p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
v p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp3 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f10e441aa90>, <dependencyGraph.Codelet object at 0x7f10e441a8e0>, <dependencyGraph.Codelet object at 0x7f10e441a8b0>]
p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp2 = !(p_state_000==29);
p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);
p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp3 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f10e441a8b0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp2', 'p__br_tmp3'}
elements in v_outputs:  {'p__br_tmp2', 'p__br_tmp3'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp2', 'p__br_tmp3'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp2 = !(p_state_000==29)
2   p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp3 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp3 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp3  not in state vars
 statement:  p__br_tmp3 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp3 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp3', 'p_state_001']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp2', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp2', 'p__br_tmp3'}
   - createing a node for flank  p__br_tmp3
   - createing a node for flank  p__br_tmp2
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_state_000==29) p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000) p__br_tmp3 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp3 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;', 'p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p_pkt_00', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
     |  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p_pkt_00', 'p__br_tmp3']
redundant outputs ['p_state_002', 'p_state_000', 'p__br_tmp2', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f10e441a820>]
adj_inputs []
redundant outputs ['p__br_tmp3', 'p_state_002', 'p_pkt_01', 'p_state_000', 'p__br_tmp2', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
new component inputs:  ['state_0', 'p_pkt_00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_002']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f10e441a820>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp3', 'p_state_002', 'p_pkt_01', 'p_state_000', 'p__br_tmp2', 'p_state_001']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
		* new component inputs :  ['state_0', 'p_pkt_00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_002']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);', 'p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp2', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p__br_tmp2', 'p_pkt_0']
redundant outputs ['p__br_tmp3', 'p_state_002', 'p_state_000', 'p_state_001']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f10e441a1c0>]
adj_inputs []
redundant outputs ['p__br_tmp3', 'p_state_002', 'p_state_000', 'p__br_tmp2', 'p_state_001', 'p_pkt_00']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_002']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f10e441a1c0>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp3', 'p_state_002', 'p_state_000', 'p__br_tmp2', 'p_state_001', 'p_pkt_00']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_002']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp2 = !(p_state_000==29); p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000); p__br_tmp3 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp3 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp3;

curr line: 	int p_state_002;

curr line: 	int p_pkt_01;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp3 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_01 = p__br_tmp3 ? (1) : (p_pkt_00);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_01;

 > FOUND OUT LINE : 	_out[2] = p_pkt_01;

> found out variable:  p_pkt_01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_01
Constructing new SALU: id= 0  metadata_lo= p_pkt_00  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 16 30 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 16, 30, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 14 14 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 14, 14, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - 0 ) + 31 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-0)+31)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - 0) + 31) < 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 29 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+29)==0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 29) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_9_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp3;

curr line: 	int p_state_002;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_001;

curr line: 	int p_pkt_00;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp2 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp3 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp3 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_00 = p__br_tmp2 ? (0) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 20 31 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, 20, 31, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 5 14 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 14, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_hi ) - register_lo ) + 29 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_hi)-register_lo)+29)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_hi) - register_lo_0) + 29) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi - register_lo ) + 29 ) != 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi-register_lo)+29)!=0
    ( line =    bit condition_lo_s67 = ((metadata_hi - register_lo_0) + 29) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f10e444de50>, <alus.SALU object at 0x7f10e444daf0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f10e444de50>, 0), (<alus.SALU object at 0x7f10e444daf0>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_01
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f10e444de50>
 -* this SALU:  <alus.SALU object at 0x7f10e444daf0>
salu_configs:  [[1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_01', 'update_hi_1_value': '(ipv4.p_pkt_00)-(0)', 'update_hi_2_value': '1', 'update_lo_1_value': '(14)-(14)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '(((0-ipv4.p_pkt_00)-0)+31)<0', 'condition_lo': '((0-alu_lo)+29)==0', 'update_hi_1_predicate': '(condition_hi) or ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) or (condition_lo)', 'update_lo_1_predicate': '(condition_hi) or (condition_lo)', 'update_lo_2_predicate': '(condition_hi) or ( not (condition_lo))', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(ipv4.p_pkt_0)-(alu_hi)', 'update_hi_2_value': '(20)', 'update_lo_1_value': '0', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '(((0-0)-alu_lo)+29)>0', 'condition_lo': '((0-alu_lo)+29) !=0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': '(condition_lo)', 'output_value': '0'}]]
[[]]
[[1, 1]]
num pipeline stages:  1
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_00 : 32 (signed);   
        p_pkt_01 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+29)==0;
    condition_hi              : (((0-ipv4.p_pkt_00)-0)+31)<0;
    update_lo_1_predicate     : (condition_hi) or (condition_lo);
    update_lo_1_value         : (14)-(14);
    update_lo_2_predicate     : (condition_hi) or ( not (condition_lo));
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) or ( not (condition_lo));
    update_hi_1_value         : (ipv4.p_pkt_00)-(0);
    update_hi_2_predicate     : (condition_hi) or (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_01;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-alu_lo)+29) !=0;
    condition_hi              : (((0-0)-alu_lo)+29)>0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : 0;
    update_lo_2_predicate     : (condition_lo);
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (ipv4.p_pkt_0)-(alu_hi);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (20);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.9770348072052 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling, program name: sampling_equivalent_10_canonicalizer. Grammar: if_else_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p__br_tmp4 = !(p_state_000==29);

lhs p__br_tmp4 rhs !(p_state_000==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_state_000==29);

 is_read_flank: processing rhs_vars =  ['p_state_000']
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

lhs p_pkt_00 rhs p__br_tmp4 ? (0) : (p_pkt_0)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0']
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_state_000', 'p_state_000']
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

lhs p__br_tmp5 rhs (p_state_000==29)&&(p_state_001==29)
state_vars {'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

 is_read_flank: processing rhs_vars =  ['p_state_000', 'p_state_001']
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

lhs p_pkt_01 rhs p__br_tmp5 ? (1) : (p_pkt_00)
state_vars {'state_0'}
read/write flanks: processing line  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_pkt_00']
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

lhs p_state_002 rhs p__br_tmp5 ? (0) : (p_state_001)
state_vars {'state_0'}
read/write flanks: processing line  p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_001']
state_0 = p_state_002;

lhs state_0 rhs p_state_002
state_vars {'state_0'}
read/write flanks: processing line  state_0 = p_state_002;

 is_read_flank: processing rhs_vars =  ['p_state_002']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p__br_tmp4 = !(p_state_000==29); p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
RAW p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
RAW p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
RAW p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
RAW p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
RAW p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f563158a5b0>, 'write': <dependencyGraph.Statement object at 0x7f563158a520>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f563158a5b0>, 'write': <dependencyGraph.Statement object at 0x7f563158a520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_002
total number of nodes created:  8
SCC 0
v p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00) stmts len 1
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
SCC 1
v p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0) stmts len 1
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_state_000==29) stmts len 1
p__br_tmp4 = !(p_state_000==29);
v p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
v p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) stmts len 1
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
v p_state_002 = p__br_tmp5 ? (0) : (p_state_001) stmts len 1
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
v state_0 = p_state_002 stmts len 1
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f563158aa90>, <dependencyGraph.Codelet object at 0x7f563158a8e0>, <dependencyGraph.Codelet object at 0x7f563158a8b0>]
p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
p_state_000 = state_0;
p__br_tmp4 = !(p_state_000==29);
p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);
p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);
p_state_002 = p__br_tmp5 ? (0) : (p_state_001);
state_0 = p_state_002;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f563158a8b0>}
total number of nodes created:  3
state vars {'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
elements in v_outputs:  {'p__br_tmp4', 'p__br_tmp5'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp4', 'p__br_tmp5'}
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_state_000==29)
2   p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
3   p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
4   p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
5   state_0 = p_state_002
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_state_000==29)
 rhs_vars:  ['p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_state_000', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp5  not in state vars
 statement:  p__br_tmp5 = (p_state_000==29)&&(p_state_001==29)
 rhs_vars:  ['p_state_000', 'p_state_001']
 state vars:  ['state_0']
p_state_002  not in state vars
 statement:  p_state_002 = p__br_tmp5 ? (0) : (p_state_001)
 rhs_vars:  ['p__br_tmp5', 'p_state_001']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
flanks:  {'p__br_tmp4', 'p__br_tmp5'}
   - createing a node for flank  p__br_tmp5
   - createing a node for flank  p__br_tmp4
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_002'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_state_000==29) p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000) p__br_tmp5 = (p_state_000==29)&&(p_state_001==29) p_state_002 = p__br_tmp5 ? (0) : (p_state_001) state_0 = p_state_002  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['p_pkt_01']
 node inputs:  ['p__br_tmp5', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
redundant outputs []
redundant outputs []
    ~ merge_candidate: both components are stateless.
     | not a merge candidate.
  - recursive_merge: looking at preds of  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p__br_tmp5', 'p_pkt_00']
redundant outputs ['p__br_tmp4', 'p_state_001', 'p_state_000', 'p_state_002']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_00']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_00']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f563158a820>]
adj_inputs []
redundant outputs ['p__br_tmp4', 'p_state_001', 'p_state_000', 'p_pkt_01', 'p__br_tmp5', 'p_state_002']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
new component inputs:  ['state_0', 'p_pkt_00']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_002']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);  with *************************
[<dependencyGraph.Statement object at 0x7f563158a820>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp4', 'p_state_001', 'p_state_000', 'p_pkt_01', 'p__br_tmp5', 'p_state_002']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
		* new component inputs :  ['state_0', 'p_pkt_00']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_002']
 * recursive_merge strategy: nodes ordered  ['p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;']
 * recursive_merge: node ::  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['p_pkt_00']
 node inputs:  ['p__br_tmp4', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
adj_inputs ['p__br_tmp4', 'p_pkt_0']
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp5', 'p_state_002']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | b:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f563158a1c0>]
adj_inputs []
redundant outputs ['p__br_tmp4', 'p_state_001', 'p_pkt_00', 'p_state_000', 'p__br_tmp5', 'p_state_002']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_002']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 | component b:  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_002']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002;
 ********************** adding statements from component  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);  with *************************
[<dependencyGraph.Statement object at 0x7f563158a1c0>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp4', 'p_state_001', 'p_pkt_00', 'p_state_000', 'p__br_tmp5', 'p_state_002']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_002']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);', 'p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 node outputs:  ['state_0']
 node inputs:  ['state_0', 'p_pkt_00']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_state_000==29); p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000); p__br_tmp5 = (p_state_000==29)&&(p_state_001==29); p_state_002 = p__br_tmp5 ? (0) : (p_state_001); state_0 = p_state_002; p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 * recursive_merge: finished processing  p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);
 * recursive_merge: finished processing  p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_002']
Principal Outputs:  set()
set()
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_00']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_00', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	int p_pkt_01;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_01 = p__br_tmp5 ? (1) : (p_pkt_00);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_01;

 > FOUND OUT LINE : 	_out[2] = p_pkt_01;

> found out variable:  p_pkt_01
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_01
Constructing new SALU: id= 0  metadata_lo= p_pkt_00  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_01
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 3 1 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, 1, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 6 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 6, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 5 26 21 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(5, 26, 21, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 29 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+29)!=0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 29) != 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_lo ) + 25 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_lo)+25)==0
    ( line =    bit condition_lo_s67 = ((0 - register_lo_0) + 25) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/sampling/sampling_equivalent_10_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	int p_pkt_00;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_002;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_state_000==29);

curr line: 	p_state_001 = p__br_tmp4 ? (1+p_state_000) : (p_state_000);

curr line: 	p__br_tmp5 = (p_state_000==29)&&(p_state_001==29);

curr line: 	p_state_002 = p__br_tmp5 ? (0) : (p_state_001);

curr line: 	state_0 = p_state_002;

curr line: 	p_pkt_00 = p__br_tmp4 ? (0) : (p_pkt_0);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_pkt_00;

 > FOUND OUT LINE : 	_out[2] = p_pkt_00;

> found out variable:  p_pkt_00
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_pkt_00
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_pkt_00
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 24 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 24, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 29 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+29)!=0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 29) != 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f563158a4f0>, <alus.SALU object at 0x7f56315bd460>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7f563158a4f0>, 0), (<alus.SALU object at 0x7f56315bd460>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_01
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_00
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f563158a4f0>
 -* this SALU:  <alus.SALU object at 0x7f56315bd460>
salu_configs:  [[1, 1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_pkt_01', 'update_hi_1_value': '(1)', 'update_hi_2_value': '(ipv4.p_pkt_00)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '0', 'condition_hi': '((0-alu_lo)+29) !=0', 'condition_lo': '((0-alu_lo)+25)==0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi) or (condition_lo)', 'update_lo_1_predicate': '(condition_hi) or (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}, {'output_dst': 'ipv4.p_pkt_00', 'update_hi_1_value': '(ipv4.p_pkt_0)', 'update_hi_2_value': '(ipv4.p_pkt_0)-(24)', 'update_lo_1_value': '(0)+(0)', 'update_lo_2_value': '(1)+(alu_lo)', 'condition_hi': '((0-alu_lo)+29) !=0', 'condition_lo': '((0-ipv4.p_pkt_0)-alu_lo)>0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '( not (condition_hi)) or (condition_lo)', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}]]
[[]]
[[1, 1]]
num pipeline stages:  1
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_00 : 32 (signed);   
        p_pkt_01 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_lo)+25)==0;
    condition_hi              : ((0-alu_lo)+29) !=0;
    update_lo_1_predicate     : (condition_hi) or (condition_lo);
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : 0;
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (1);
    update_hi_2_predicate     : (condition_hi) or (condition_lo);
    update_hi_2_value         : (ipv4.p_pkt_00);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_01;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-ipv4.p_pkt_0)-alu_lo)>0;
    condition_hi              : ((0-alu_lo)+29) !=0;
    update_lo_1_predicate     : ( not (condition_hi)) or (condition_lo);
    update_lo_1_value         : (0)+(0);
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : (1)+(alu_lo);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (ipv4.p_pkt_0);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (ipv4.p_pkt_0)-(24);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_pkt_00;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  



  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.001971960067749 s
preprocessor time:
