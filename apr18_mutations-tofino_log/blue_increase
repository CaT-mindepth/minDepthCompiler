running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f22f2f7d580>, 'write': <dependencyGraph.Statement object at 0x7f22f2f7d370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f22f2f7d5b0>, 'write': <dependencyGraph.Statement object at 0x7f22f2f7d520>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f22f2f7d580>, 'write': <dependencyGraph.Statement object at 0x7f22f2f7d370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f22f2f7d5b0>, 'write': <dependencyGraph.Statement object at 0x7f22f2f7d520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f22f2f7d9d0>, <dependencyGraph.Codelet object at 0x7f22f2f7d970>, <dependencyGraph.Codelet object at 0x7f22f2f7da30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f22f2f7d9d0>, <dependencyGraph.Codelet object at 0x7f22f2f7d970>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_100', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_0', 'state_0', 'p_pkt_10']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f22f2f7d5b0>, <dependencyGraph.Statement object at 0x7f22f2f7d6d0>, <dependencyGraph.Statement object at 0x7f22f2f7d520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_100', 'p_state_000', 'p__br_tmp1', 'p_state_101']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f22f2f7d5b0>, <dependencyGraph.Statement object at 0x7f22f2f7d6d0>, <dependencyGraph.Statement object at 0x7f22f2f7d520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p_state_100', 'p_state_000', 'p__br_tmp1', 'p_state_101']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['state_1', 'state_0', 'p_pkt_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f22f2f7d1c0>]
adj_inputs []
redundant outputs ['p_state_001', 'p_state_100', 'p_state_000', 'p__br_tmp1', 'p_pkt_10', 'p_state_101']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f22f2f7d1c0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p_state_100', 'p_state_000', 'p__br_tmp1', 'p_pkt_10', 'p_state_101']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_100;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp1;

curr line: 	int p_pkt_10;

curr line: 	int p_state_101;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 3 metadata_hi 13 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_hi, 13, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 2 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 2, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_hi ) + 1 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_hi)+1)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_hi_1) + 1) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+10)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 10) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f22f2f7d310>, <alus.ALU object at 0x7f22f2fb6dc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f22f2fb6dc0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f22f2f7d310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f22f2f7d310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(1)+(alu_hi)', 'update_hi_2_value': '(13)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(0)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_hi)+1)<0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+10)<0', 'update_hi_1_predicate': '(condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+10)<0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_hi)+1)<0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0)-(0);
    update_hi_1_predicate     : (condition_lo);
    update_hi_1_value         : (1)+(alu_hi);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (13);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.7229573726654053 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f93fabcc5b0>, 'write': <dependencyGraph.Statement object at 0x7f93fabcc520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f93fabcc580>, 'write': <dependencyGraph.Statement object at 0x7f93fabcc370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f93fabcc5b0>, 'write': <dependencyGraph.Statement object at 0x7f93fabcc520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f93fabcc580>, 'write': <dependencyGraph.Statement object at 0x7f93fabcc370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f93fabcc9d0>, <dependencyGraph.Codelet object at 0x7f93fabcc970>, <dependencyGraph.Codelet object at 0x7f93fabcca30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f93fabcc9d0>, <dependencyGraph.Codelet object at 0x7f93fabcc970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_100', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_0', 'state_0', 'p_pkt_10']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f93fabcc5b0>, <dependencyGraph.Statement object at 0x7f93fabcc6d0>, <dependencyGraph.Statement object at 0x7f93fabcc520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f93fabcc5b0>, <dependencyGraph.Statement object at 0x7f93fabcc6d0>, <dependencyGraph.Statement object at 0x7f93fabcc520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['p_pkt_0', 'state_0', 'state_1']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f93fabcc130>]
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_pkt_10', 'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f93fabcc130>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_pkt_10', 'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	int p_pkt_10;

curr line: 	int p_state_101;

curr line: 	int p_state_001;

curr line: 	int p_state_100;

curr line: 	int p_state_000;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi 1 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) != 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+10)!=0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 10) != 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+10)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 10) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f93fabcc310>, <alus.ALU object at 0x7f93fac04dc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f93fac04dc0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f93fabcc310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f93fabcc310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(1)+(alu_hi)', 'update_hi_2_value': '(0)-(ipv4.p_pkt_0)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(0)', 'update_lo_2_value': '(0)-(1)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+10) !=0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+10)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+10)<0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_lo)+10) !=0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0)+(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (0)-(1);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (1)+(alu_hi);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (0)-(ipv4.p_pkt_0);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.837785482406616 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fe166bda580>, 'write': <dependencyGraph.Statement object at 0x7fe166bda370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fe166bda5b0>, 'write': <dependencyGraph.Statement object at 0x7fe166bda520>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe166bda580>, 'write': <dependencyGraph.Statement object at 0x7fe166bda370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe166bda5b0>, 'write': <dependencyGraph.Statement object at 0x7fe166bda520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe166bda9d0>, <dependencyGraph.Codelet object at 0x7fe166bda970>, <dependencyGraph.Codelet object at 0x7fe166bdaa30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe166bda9d0>, <dependencyGraph.Codelet object at 0x7fe166bda970>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_100', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'p_pkt_0', 'state_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fe166bda5b0>, <dependencyGraph.Statement object at 0x7fe166bda6d0>, <dependencyGraph.Statement object at 0x7fe166bda520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_101', 'p_state_001', 'p_state_000', 'p_state_100', 'p__br_tmp1']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fe166bda5b0>, <dependencyGraph.Statement object at 0x7fe166bda6d0>, <dependencyGraph.Statement object at 0x7fe166bda520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_101', 'p_state_001', 'p_state_000', 'p_state_100', 'p__br_tmp1']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['state_1', 'p_pkt_0', 'state_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fe166bda130>]
adj_inputs []
redundant outputs ['p_state_101', 'p_state_001', 'p_pkt_10', 'p_state_000', 'p_state_100', 'p__br_tmp1']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fe166bda130>]
removing two old components
adj_inputs []
redundant outputs ['p_state_101', 'p_state_001', 'p_pkt_10', 'p_state_000', 'p_state_100', 'p__br_tmp1']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_001;

curr line: 	int p_pkt_10;

curr line: 	int p_state_000;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp1;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 14 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 14, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo 28 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 28, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_hi ) - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_hi)-register_lo)+1)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_hi) - register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+10)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 10) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fe166bda310>, <alus.ALU object at 0x7fe166c12dc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fe166c12dc0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7fe166bda310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fe166bda310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(14)-(ipv4.p_pkt_0)', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_2_value': '(28)-(ipv4.p_pkt_0)', 'condition_hi': '(((0-0)-alu_lo)+1)>0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+10)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_lo)', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+10)<0;
    condition_hi              : (((0-0)-alu_lo)+1)>0;
    update_lo_1_predicate     : (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0)-(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (28)-(ipv4.p_pkt_0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (14)-(ipv4.p_pkt_0);
    update_hi_2_predicate     : (condition_lo);
    update_hi_2_value         : (1)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.877284526824951 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7feaae6765b0>, 'write': <dependencyGraph.Statement object at 0x7feaae676520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7feaae676580>, 'write': <dependencyGraph.Statement object at 0x7feaae676370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7feaae6765b0>, 'write': <dependencyGraph.Statement object at 0x7feaae676520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7feaae676580>, 'write': <dependencyGraph.Statement object at 0x7feaae676370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7feaae6769d0>, <dependencyGraph.Codelet object at 0x7feaae676970>, <dependencyGraph.Codelet object at 0x7feaae676a30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7feaae6769d0>, <dependencyGraph.Codelet object at 0x7feaae676970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_0', 'state_0', 'p_pkt_10']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7feaae6765b0>, <dependencyGraph.Statement object at 0x7feaae6766d0>, <dependencyGraph.Statement object at 0x7feaae676520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_001', 'p_state_101', 'p_state_000', 'p_state_100']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7feaae6765b0>, <dependencyGraph.Statement object at 0x7feaae6766d0>, <dependencyGraph.Statement object at 0x7feaae676520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_001', 'p_state_101', 'p_state_000', 'p_state_100']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['state_0', 'p_pkt_0', 'state_1']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7feaae676130>]
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_001', 'p_state_101', 'p_state_000', 'p_state_100', 'p_pkt_10']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7feaae676130>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_001', 'p_state_101', 'p_state_000', 'p_state_100', 'p_pkt_10']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_001;

curr line: 	int p_state_101;

curr line: 	int p_state_000;

curr line: 	int p_state_100;

curr line: 	int p_pkt_10;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 7 6 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(7, 6, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 24 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 24, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 2 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 2, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+10)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 10) < 0;
  )
demangled line:  bit condition_lo = register_lo > 0
process_salu_function: parsing  condition_lo ; rhs =  register_lo>0
    ( line =    bit condition_lo_s67 = register_lo_0 > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7feaae676310>, <alus.ALU object at 0x7feaae6ae970>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7feaae6ae970>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7feaae676310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7feaae676310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(1)+(alu_hi)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+10)<0', 'condition_lo': 'alu_lo>0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '(condition_hi) and (condition_lo)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : alu_lo>0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_lo)+10)<0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : (condition_hi) and (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (1)+(alu_hi);
    update_hi_2_predicate     : false;
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.830916404724121 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f82effe75b0>, 'write': <dependencyGraph.Statement object at 0x7f82effe7520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f82effe7580>, 'write': <dependencyGraph.Statement object at 0x7f82effe7370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f82effe75b0>, 'write': <dependencyGraph.Statement object at 0x7f82effe7520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f82effe7580>, 'write': <dependencyGraph.Statement object at 0x7f82effe7370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f82effe79d0>, <dependencyGraph.Codelet object at 0x7f82effe7970>, <dependencyGraph.Codelet object at 0x7f82effe7a30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f82effe79d0>, <dependencyGraph.Codelet object at 0x7f82effe7970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_pkt_0', 'p_pkt_10']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f82effe75b0>, <dependencyGraph.Statement object at 0x7f82effe76d0>, <dependencyGraph.Statement object at 0x7f82effe7520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_101', 'p_state_000', 'p_state_100', 'p_state_001', 'p__br_tmp1']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f82effe75b0>, <dependencyGraph.Statement object at 0x7f82effe76d0>, <dependencyGraph.Statement object at 0x7f82effe7520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_101', 'p_state_000', 'p_state_100', 'p_state_001', 'p__br_tmp1']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['state_1', 'p_pkt_0', 'state_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f82effe7130>]
adj_inputs []
redundant outputs ['p_state_101', 'p_state_000', 'p_state_100', 'p_pkt_10', 'p_state_001', 'p__br_tmp1']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f82effe7130>]
removing two old components
adj_inputs []
redundant outputs ['p_state_101', 'p_state_000', 'p_state_100', 'p_pkt_10', 'p_state_001', 'p__br_tmp1']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_000;

curr line: 	int p_state_100;

curr line: 	int p_pkt_10;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp1;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 metadata_hi 9 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 9, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 20 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 20, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+10)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 10) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 14 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+14)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 14) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 13 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(13, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  13
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) || (!(condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f82effe7310>, <alus.ALU object at 0x7f82f001fdc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f82f001fdc0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f82effe7310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f82effe7310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '1', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(0)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(0)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+10)<0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+14)>0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) or ( not (condition_lo))', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+14)>0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_lo)+10)<0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (0);
    update_lo_2_predicate     : (condition_hi) or ( not (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_0)+(0);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : 1;
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : (1)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.9375274181365967 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fc0d8ead5b0>, 'write': <dependencyGraph.Statement object at 0x7fc0d8ead520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fc0d8ead580>, 'write': <dependencyGraph.Statement object at 0x7fc0d8ead370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fc0d8ead5b0>, 'write': <dependencyGraph.Statement object at 0x7fc0d8ead520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fc0d8ead580>, 'write': <dependencyGraph.Statement object at 0x7fc0d8ead370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc0d8ead9d0>, <dependencyGraph.Codelet object at 0x7fc0d8ead970>, <dependencyGraph.Codelet object at 0x7fc0d8eada30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc0d8ead9d0>, <dependencyGraph.Codelet object at 0x7fc0d8ead970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_000', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'p_pkt_0', 'state_0']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fc0d8ead5b0>, <dependencyGraph.Statement object at 0x7fc0d8ead6d0>, <dependencyGraph.Statement object at 0x7fc0d8ead520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_101', 'p__br_tmp1', 'p_state_000', 'p_state_100', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fc0d8ead5b0>, <dependencyGraph.Statement object at 0x7fc0d8ead6d0>, <dependencyGraph.Statement object at 0x7fc0d8ead520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_101', 'p__br_tmp1', 'p_state_000', 'p_state_100', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['state_0', 'state_1', 'p_pkt_0']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fc0d8ead130>]
adj_inputs []
redundant outputs ['p_state_101', 'p_pkt_10', 'p__br_tmp1', 'p_state_000', 'p_state_100', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fc0d8ead130>]
removing two old components
adj_inputs []
redundant outputs ['p_state_101', 'p_pkt_10', 'p__br_tmp1', 'p_state_000', 'p_state_100', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_pkt_10;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_000;

curr line: 	int p_state_100;

curr line: 	int p_state_001;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 13 23 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 13, 23, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+10)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 10) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi 0 update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, 0, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  0  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (0)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi 0 update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, 0, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  0  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(0))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi 0 update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, 0, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  0  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(0))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi 0 update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, 0, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  0  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (0)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fc0d8ead310>, <alus.ALU object at 0x7fc0d8ee5c40>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fc0d8ee5c40>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7fc0d8ead310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fc0d8ead310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(13)', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(0)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+10)<0', 'update_hi_1_predicate': '(condition_hi) and (0)', 'update_hi_2_predicate': '(condition_hi) and ( not (0))', 'update_lo_1_predicate': '(condition_hi) and ( not (0))', 'update_lo_2_predicate': '(condition_hi) and (0)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : 0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_lo)+10)<0;
    update_lo_1_predicate     : (condition_hi) and ( not (0));
    update_lo_1_value         : (ipv4.p_pkt_0)+(0);
    update_lo_2_predicate     : (condition_hi) and (0);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     : (condition_hi) and (0);
    update_hi_1_value         : (13);
    update_hi_2_predicate     : (condition_hi) and ( not (0));
    update_hi_2_value         : (1)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.691769599914551 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f559a60a580>, 'write': <dependencyGraph.Statement object at 0x7f559a60a370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f559a60a5b0>, 'write': <dependencyGraph.Statement object at 0x7f559a60a520>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f559a60a580>, 'write': <dependencyGraph.Statement object at 0x7f559a60a370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f559a60a5b0>, 'write': <dependencyGraph.Statement object at 0x7f559a60a520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f559a60a9d0>, <dependencyGraph.Codelet object at 0x7f559a60a970>, <dependencyGraph.Codelet object at 0x7f559a60aa30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f559a60a9d0>, <dependencyGraph.Codelet object at 0x7f559a60a970>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f559a60a5b0>, <dependencyGraph.Statement object at 0x7f559a60a6d0>, <dependencyGraph.Statement object at 0x7f559a60a520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_101', 'p_state_001', 'p_state_000', 'p__br_tmp1', 'p_state_100']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f559a60a5b0>, <dependencyGraph.Statement object at 0x7f559a60a6d0>, <dependencyGraph.Statement object at 0x7f559a60a520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_101', 'p_state_001', 'p_state_000', 'p__br_tmp1', 'p_state_100']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['p_pkt_0', 'state_1', 'state_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f559a60a130>]
adj_inputs []
redundant outputs ['p_state_101', 'p_pkt_10', 'p_state_001', 'p_state_000', 'p__br_tmp1', 'p_state_100']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f559a60a130>]
removing two old components
adj_inputs []
redundant outputs ['p_state_101', 'p_pkt_10', 'p_state_001', 'p_state_000', 'p__br_tmp1', 'p_state_100']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_pkt_10;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_100;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 3 20 12 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, 20, 12, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 11 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+11)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 11) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - 0 ) + 11 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-0)+11)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - 0) + 11) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f559a60a310>, <alus.ALU object at 0x7f559a642dc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f559a642dc0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f559a60a310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f559a60a310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(1)+(alu_hi)', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(12)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+11)>0', 'condition_lo': '(((0-ipv4.p_pkt_0)-0)+11)==0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)-0)+11)==0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_lo)+11)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (12);
    update_lo_2_predicate     :  not (condition_hi);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (1)+(alu_hi);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (1)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.928212881088257 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f8868aaa5b0>, 'write': <dependencyGraph.Statement object at 0x7f8868aaa520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f8868aaa580>, 'write': <dependencyGraph.Statement object at 0x7f8868aaa370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f8868aaa5b0>, 'write': <dependencyGraph.Statement object at 0x7f8868aaa520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f8868aaa580>, 'write': <dependencyGraph.Statement object at 0x7f8868aaa370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f8868aaa9d0>, <dependencyGraph.Codelet object at 0x7f8868aaa970>, <dependencyGraph.Codelet object at 0x7f8868aaaa30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f8868aaa9d0>, <dependencyGraph.Codelet object at 0x7f8868aaa970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_0', 'p_pkt_10', 'state_0']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f8868aaa5b0>, <dependencyGraph.Statement object at 0x7f8868aaa6d0>, <dependencyGraph.Statement object at 0x7f8868aaa520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_100', 'p__br_tmp1', 'p_state_101', 'p_state_000']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f8868aaa5b0>, <dependencyGraph.Statement object at 0x7f8868aaa6d0>, <dependencyGraph.Statement object at 0x7f8868aaa520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p_state_100', 'p__br_tmp1', 'p_state_101', 'p_state_000']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['state_0', 'p_pkt_0', 'state_1']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f8868aaa1c0>]
adj_inputs []
redundant outputs ['p_state_001', 'p_state_100', 'p_state_000', 'p__br_tmp1', 'p_pkt_10', 'p_state_101']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f8868aaa1c0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p_state_100', 'p_state_000', 'p__br_tmp1', 'p_pkt_10', 'p_state_101']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_100;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp1;

curr line: 	int p_pkt_10;

curr line: 	int p_state_101;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 12 9 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 12, 9, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 30 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 30, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 31 8 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, 8, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+10)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 10) < 0;
  )
demangled line:  bit condition_lo = ( ( 0 - register_hi ) + 2 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-register_hi)+2)==0
    ( line =    bit condition_lo_s67 = ((0 - register_hi_1) + 2) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f8868aaa310>, <alus.ALU object at 0x7f8868ae2dc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f8868ae2dc0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f8868aaa310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f8868aaa310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(12)-(9)', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(31)+(8)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+10)<0', 'condition_lo': '((0-alu_hi)+2)==0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-alu_hi)+2)==0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_lo)+10)<0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (31)+(8);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (12)-(9);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (1)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 4.500856637954712 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f872a0865b0>, 'write': <dependencyGraph.Statement object at 0x7f872a086520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f872a086580>, 'write': <dependencyGraph.Statement object at 0x7f872a086370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f872a0865b0>, 'write': <dependencyGraph.Statement object at 0x7f872a086520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f872a086580>, 'write': <dependencyGraph.Statement object at 0x7f872a086370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f872a0869d0>, <dependencyGraph.Codelet object at 0x7f872a086970>, <dependencyGraph.Codelet object at 0x7f872a086a30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f872a0869d0>, <dependencyGraph.Codelet object at 0x7f872a086970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'state_0', 'p_pkt_0']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f872a0865b0>, <dependencyGraph.Statement object at 0x7f872a0866d0>, <dependencyGraph.Statement object at 0x7f872a086520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101', 'p__br_tmp1', 'p_state_000', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f872a0865b0>, <dependencyGraph.Statement object at 0x7f872a0866d0>, <dependencyGraph.Statement object at 0x7f872a086520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101', 'p__br_tmp1', 'p_state_000', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['state_0', 'state_1', 'p_pkt_0']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f872a086130>]
adj_inputs []
redundant outputs ['p_pkt_10', 'p_state_100', 'p_state_101', 'p__br_tmp1', 'p_state_000', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f872a086130>]
removing two old components
adj_inputs []
redundant outputs ['p_pkt_10', 'p_state_100', 'p_state_101', 'p__br_tmp1', 'p_state_000', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_10;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 25 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 25, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 metadata_hi 27 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_hi, 27, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( 0 - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (0-register_lo)==0
    ( line =    bit condition_hi_s55 = (0 - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+10)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 10) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f872a086310>, <alus.ALU object at 0x7f872a0bec40>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f872a0bec40>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f872a086310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f872a086310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(29)-(ipv4.p_pkt_0)', 'update_hi_2_value': '(1)+(alu_hi)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(27)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+10)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_lo)', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+10)<0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (27);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (29)-(ipv4.p_pkt_0);
    update_hi_2_predicate     : (condition_lo);
    update_hi_2_value         : (1)+(alu_hi);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.7254579067230225 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase, program name: blue_increase_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fb92ef265b0>, 'write': <dependencyGraph.Statement object at 0x7fb92ef26520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fb92ef26580>, 'write': <dependencyGraph.Statement object at 0x7fb92ef26370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb92ef265b0>, 'write': <dependencyGraph.Statement object at 0x7fb92ef26520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fb92ef26580>, 'write': <dependencyGraph.Statement object at 0x7fb92ef26370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb92ef269d0>, <dependencyGraph.Codelet object at 0x7fb92ef26970>, <dependencyGraph.Codelet object at 0x7fb92ef26a30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb92ef269d0>, <dependencyGraph.Codelet object at 0x7fb92ef26970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'p_pkt_0', 'state_0']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fb92ef265b0>, <dependencyGraph.Statement object at 0x7fb92ef266d0>, <dependencyGraph.Statement object at 0x7fb92ef26520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fb92ef265b0>, <dependencyGraph.Statement object at 0x7fb92ef266d0>, <dependencyGraph.Statement object at 0x7fb92ef26520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['state_0', 'state_1', 'p_pkt_0']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fb92ef26130>]
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_101', 'p_state_100', 'p_state_000', 'p_pkt_10', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fb92ef26130>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_101', 'p_state_100', 'p_state_000', 'p_pkt_10', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	int p_state_000;

curr line: 	int p_pkt_10;

curr line: 	int p_state_001;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 1 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 1 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 1, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 21 7 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 21, 7, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 11 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+11)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 11) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 14 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+14)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 14) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 9 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(9, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  9
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  ~((condition_hi) && (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_increase/blue_increase_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fb92ef26310>, <alus.ALU object at 0x7fb92ef5edc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fb92ef5edc0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7fb92ef26310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
Illegal character '~'
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fb92ef26310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(1)+(alu_hi)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)+(0)', 'update_lo_2_value': '(21)-(7)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+11)>0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+14)>0', 'update_hi_1_predicate': '((condition_hi) and (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+14)>0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_lo)+11)>0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (ipv4.p_pkt_0)+(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (21)-(7);
    update_hi_1_predicate     : ((condition_hi) and (condition_lo));
    update_hi_1_value         : (1)+(alu_hi);
    update_hi_2_predicate     : false;
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.8600218296051025 s
preprocessor time:
