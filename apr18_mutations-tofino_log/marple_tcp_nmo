running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_1_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f44c282f6d0>, 'write': <dependencyGraph.Statement object at 0x7f44c282fa60>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f44c282f490>, 'write': <dependencyGraph.Statement object at 0x7f44c282fa00>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f44c282f6d0>, 'write': <dependencyGraph.Statement object at 0x7f44c282fa60>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f44c282f490>, 'write': <dependencyGraph.Statement object at 0x7f44c282fa00>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f44c2500df0>, <dependencyGraph.Codelet object at 0x7f44c282fc40>, <dependencyGraph.Codelet object at 0x7f44c37922e0>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f44c37922e0>, <dependencyGraph.Codelet object at 0x7f44c2500df0>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_001', 'p_state_100', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100', 'p_state_101']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['p_pkt_0', 'state_1', 'p_state_001', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_state_001', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_000', 'p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_001']
redundant outputs ['p__br_tmp4']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f44c282f700>]
adj_inputs ['state_1', 'p__br_tmp5']
redundant outputs ['p_state_001', 'p__br_tmp4', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['p__br_tmp5', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | component b:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f44c282f700>]
removing two old components
adj_inputs ['state_1', 'p__br_tmp5']
redundant outputs ['p_state_001', 'p__br_tmp4', 'p_state_000']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['p__br_tmp5', 'state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'p_state_001', 'p__br_tmp4', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp4;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_001;

 > FOUND OUT LINE : 	_out[2] = p_state_001;

> found out variable:  p_state_001
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_001
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_001
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 17 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 17, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 15 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 15, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+1)>0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)>0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 18 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 18, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_hi ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_hi)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_hi_1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_1_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp5;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 3 26 28 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, 26, 28, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 25 31 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 25, 31, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_hi 12 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_hi, 12, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 2 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 2, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)==0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_1 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_2', 2: 'comp_1'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp5']
 *** found stateful dependencies between  2  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 64 rows, 41 columns and 126 nonzeros
Model fingerprint: 0x3ec89603
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 69 rows, 38 columns, 166 nonzeros
Variable types: 0 continuous, 38 integer (34 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f44c282f7f0>, <alus.SALU object at 0x7f44c28613a0>, <alus.SALU object at 0x7f44c28615e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f44c282f7f0>, 0), (<alus.SALU object at 0x7f44c28613a0>, 1), (<alus.SALU object at 0x7f44c28615e0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_state_001
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f44c282f7f0>
 -* this SALU:  <alus.SALU object at 0x7f44c28613a0>
 -* this SALU:  <alus.SALU object at 0x7f44c28615e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f44c282f7f0>
 -* this SALU:  <alus.SALU object at 0x7f44c28613a0>
 -* this SALU:  <alus.SALU object at 0x7f44c28615e0>
salu_configs:  [[1, 0, 1], [0, 1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_state_001', 'update_hi_1_value': '(0)+(0)', 'update_hi_2_value': '(17)-(0)', 'update_lo_1_value': '(0)-(alu_lo)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '((0-alu_lo)+1)>0', 'condition_lo': '((ipv4.p_pkt_0-alu_lo)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '(condition_lo)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(29)-(ipv4.p__br_tmp5)', 'update_hi_2_value': '(alu_hi)-(1)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(ipv4.p__br_tmp5)+(18)', 'condition_hi': '((0-ipv4.p__br_tmp5)-alu_lo)>0', 'condition_lo': '((0-ipv4.p__br_tmp5)+alu_hi)==0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(28)', 'update_hi_2_value': '1', 'update_lo_1_value': '(0)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(ipv4.p_pkt_0-alu_lo)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}], [{'output_dst': 'ipv4.p_state_001', 'update_hi_1_value': '(0)+(0)', 'update_hi_2_value': '(17)-(0)', 'update_lo_1_value': '(0)-(alu_lo)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '((0-alu_lo)+1)>0', 'condition_lo': '((ipv4.p_pkt_0-alu_lo)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '(condition_lo)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(29)-(ipv4.p__br_tmp5)', 'update_hi_2_value': '(alu_hi)-(1)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(ipv4.p__br_tmp5)+(18)', 'condition_hi': '((0-ipv4.p__br_tmp5)-alu_lo)>0', 'condition_lo': '((0-ipv4.p__br_tmp5)+alu_hi)==0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(28)', 'update_hi_2_value': '1', 'update_lo_1_value': '(0)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(ipv4.p_pkt_0-alu_lo)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}]]
[[], []]
[[1, 0, 1], [0, 1, 0]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_state_001 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p__br_tmp5 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((ipv4.p_pkt_0-alu_lo)+1)>0;
    condition_hi              : ((0-alu_lo)+1)>0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (0)-(alu_lo);
    update_lo_2_predicate     : (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)+(0);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (17)-(0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_state_001;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (ipv4.p_pkt_0-alu_lo)==0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (0);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (28);
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp5;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-ipv4.p__br_tmp5)+alu_hi)==0;
    condition_hi              : ((0-ipv4.p__br_tmp5)-alu_lo)>0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (ipv4.p__br_tmp5)+(18);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (29)-(ipv4.p__br_tmp5);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (alu_hi)-(1);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.566948890686035 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_2_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f64fa1fb580>, 'write': <dependencyGraph.Statement object at 0x7f64fa1fb370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f64fa1fb5b0>, 'write': <dependencyGraph.Statement object at 0x7f64fa1fb310>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f64fa1fb580>, 'write': <dependencyGraph.Statement object at 0x7f64fa1fb370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f64fa1fb5b0>, 'write': <dependencyGraph.Statement object at 0x7f64fa1fb310>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f64fa1fb0a0>, <dependencyGraph.Codelet object at 0x7f64fa1fb100>, <dependencyGraph.Codelet object at 0x7f64fa1fb970>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f64fa1fb0a0>, <dependencyGraph.Codelet object at 0x7f64fa1fb970>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'p_state_101', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['p_pkt_0', 'p_state_000', 'state_1', 'p_state_001']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_state_000', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_000', 'p_state_001', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_state_001', 'p_pkt_0']
redundant outputs ['p__br_tmp4']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f64fa1fb7c0>]
adj_inputs ['state_1', 'p__br_tmp5']
redundant outputs ['p__br_tmp4', 'p_state_000', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['p__br_tmp5', 'state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | component b:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f64fa1fb7c0>]
removing two old components
adj_inputs ['state_1', 'p__br_tmp5']
redundant outputs ['p__br_tmp4', 'p_state_000', 'p_state_001']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['p__br_tmp5', 'state_0']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0', 'p__br_tmp4', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_001;

 > FOUND OUT LINE : 	_out[2] = p_state_001;

> found out variable:  p_state_001
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_001
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_001
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 7 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 7, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 31 25 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, 25, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_hi ) + 2 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_hi)+2)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_hi_1) + 2) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+1)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 18 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 18, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_hi ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_hi)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_hi_1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_2_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp4;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 metadata_hi 8 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, metadata_hi, 8, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 20 31 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 20, 31, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = register_lo == 0
process_salu_function: parsing  condition_hi ; rhs =  register_lo==0
    ( line =    bit condition_hi_s55 = register_lo_0 == 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)>0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp5']
 *** found stateful dependencies between  2  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 64 rows, 41 columns and 126 nonzeros
Model fingerprint: 0x3ec89603
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 69 rows, 38 columns, 166 nonzeros
Variable types: 0 continuous, 38 integer (34 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f64fa1fb490>, <alus.SALU object at 0x7f64fa2314f0>, <alus.SALU object at 0x7f64fa2315e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f64fa1fb490>, 0), (<alus.SALU object at 0x7f64fa2314f0>, 1), (<alus.SALU object at 0x7f64fa2315e0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_state_001
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f64fa1fb490>
 -* this SALU:  <alus.SALU object at 0x7f64fa2314f0>
 -* this SALU:  <alus.SALU object at 0x7f64fa2315e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f64fa1fb490>
 -* this SALU:  <alus.SALU object at 0x7f64fa2314f0>
 -* this SALU:  <alus.SALU object at 0x7f64fa2315e0>
salu_configs:  [[1, 0, 1], [0, 1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_state_001', 'update_hi_1_value': '(7)', 'update_hi_2_value': '(31)+(25)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(alu_lo)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(0)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_hi)+2)>0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(29)-(ipv4.p__br_tmp5)', 'update_hi_2_value': '(alu_hi)-(1)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(ipv4.p__br_tmp5)+(18)', 'condition_hi': '((0-ipv4.p__br_tmp5)-alu_lo)>0', 'condition_lo': '((0-ipv4.p__br_tmp5)+alu_hi)==0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '1', 'update_hi_2_value': '(1)-(ipv4.p_pkt_0)', 'update_lo_1_value': '(20)-(31)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(alu_hi)', 'condition_hi': 'alu_lo==0', 'condition_lo': '((ipv4.p_pkt_0-alu_lo)+1)>0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) or (condition_lo)', 'output_value': '0'}], [{'output_dst': 'ipv4.p_state_001', 'update_hi_1_value': '(7)', 'update_hi_2_value': '(31)+(25)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(alu_lo)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(0)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_hi)+2)>0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(29)-(ipv4.p__br_tmp5)', 'update_hi_2_value': '(alu_hi)-(1)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(ipv4.p__br_tmp5)+(18)', 'condition_hi': '((0-ipv4.p__br_tmp5)-alu_lo)>0', 'condition_lo': '((0-ipv4.p__br_tmp5)+alu_hi)==0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '1', 'update_hi_2_value': '(1)-(ipv4.p_pkt_0)', 'update_lo_1_value': '(20)-(31)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(alu_hi)', 'condition_hi': 'alu_lo==0', 'condition_lo': '((ipv4.p_pkt_0-alu_lo)+1)>0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_hi) or (condition_lo)', 'output_value': '0'}]]
[[], []]
[[1, 0, 1], [0, 1, 0]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp5 : 32 (signed);   
        p_state_001 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+1)>0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_hi)+2)>0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_0)+(0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (7);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (31)+(25);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_state_001;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((ipv4.p_pkt_0-alu_lo)+1)>0;
    condition_hi              : alu_lo==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (20)-(31);
    update_lo_2_predicate     : (condition_hi) or (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0)-(alu_hi);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : 1;
    update_hi_2_predicate     : false;
    update_hi_2_value         : (1)-(ipv4.p_pkt_0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp5;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-ipv4.p__br_tmp5)+alu_hi)==0;
    condition_hi              : ((0-ipv4.p__br_tmp5)-alu_lo)>0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (ipv4.p__br_tmp5)+(18);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (29)-(ipv4.p__br_tmp5);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (alu_hi)-(1);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.721331834793091 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_3_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp6 = !(p_pkt_0<p_state_000);

lhs p__br_tmp6 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp6 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0', 'p_state_000']
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp7 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp7 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp7', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f677cf1a5b0>, 'write': <dependencyGraph.Statement object at 0x7f677cf1a310>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f677cf1a580>, 'write': <dependencyGraph.Statement object at 0x7f677cf1a370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f677cf1a5b0>, 'write': <dependencyGraph.Statement object at 0x7f677cf1a310>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f677cf1a580>, 'write': <dependencyGraph.Statement object at 0x7f677cf1a370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp6 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp6 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f677cf1a070>, <dependencyGraph.Codelet object at 0x7f677cf1a0d0>, <dependencyGraph.Codelet object at 0x7f677cf1a970>]
p_state_100 = state_1;
p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp6 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f677cf1a970>, <dependencyGraph.Codelet object at 0x7f677cf1a070>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp6 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp6  not in state vars
 statement:  p__br_tmp6 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp6', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp6 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp7']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['p_state_000', 'p_pkt_0', 'state_1', 'p_state_001']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p_pkt_0', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp7']
 node inputs:  ['p_pkt_0', 'p_state_000', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp7', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000', 'p_state_001']
redundant outputs ['p__br_tmp6']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f677cf1a7c0>]
adj_inputs ['state_1', 'p__br_tmp7']
redundant outputs ['p_state_000', 'p__br_tmp6', 'p_state_001']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp7']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | component b:  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f677cf1a7c0>]
removing two old components
adj_inputs ['state_1', 'p__br_tmp7']
redundant outputs ['p_state_000', 'p__br_tmp6', 'p_state_001']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0', 'p__br_tmp7']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['state_0', 'p__br_tmp7']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp7', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000', 'p__br_tmp6', 'p_state_001']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
u:  p_state_000 = state_0; p__br_tmp6 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp6;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp6 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_001;

 > FOUND OUT LINE : 	_out[2] = p_state_001;

> found out variable:  p_state_001
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_001
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_001
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 18 29 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 18, 29, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 5 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 5, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 19 22 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 19, 22, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+2)>0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 2) > 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp7']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp7', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp7 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp7  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 9 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 9, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 3 5 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 5, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 16 8 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 16, 8, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi - register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi-register_lo)+1)==0
    ( line =    bit condition_lo_s67 = ((metadata_hi - register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_3_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp6;

curr line: 	bit p__br_tmp7;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp6 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp6 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p__br_tmp7 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp7;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp7;

> found out variable:  p__br_tmp7
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp7
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp7
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 6 1 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 1, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 4 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 4, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+2)>0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 2) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_2', 2: 'comp_0'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp7']
 *** found stateful dependencies between  2  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 64 rows, 41 columns and 126 nonzeros
Model fingerprint: 0x3ec89603
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 69 rows, 38 columns, 166 nonzeros
Variable types: 0 continuous, 38 integer (34 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f677cf1a490>, <alus.SALU object at 0x7f677cf4f3a0>, <alus.SALU object at 0x7f677cf4f5e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f677cf1a490>, 0), (<alus.SALU object at 0x7f677cf4f3a0>, 1), (<alus.SALU object at 0x7f677cf4f5e0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_state_001
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp7
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp7
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp7
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f677cf1a490>
 -* this SALU:  <alus.SALU object at 0x7f677cf4f3a0>
 -* this SALU:  <alus.SALU object at 0x7f677cf4f5e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f677cf1a490>
 -* this SALU:  <alus.SALU object at 0x7f677cf4f3a0>
 -* this SALU:  <alus.SALU object at 0x7f677cf4f5e0>
salu_configs:  [[1, 0, 1], [0, 1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_state_001', 'update_hi_1_value': '(18)-(29)', 'update_hi_2_value': '(5)-(0)', 'update_lo_1_value': '(22)-(19)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '((0-alu_lo)+2)>0', 'condition_lo': '(ipv4.p_pkt_0-alu_lo)>0', 'update_hi_1_predicate': '(condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_lo)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp7)+(alu_lo)', 'update_lo_2_value': '(8)-(16)', 'condition_hi': '((0-ipv4.p__br_tmp7)-alu_lo)>0', 'condition_lo': '((0-alu_lo)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp7', 'update_hi_1_value': '1', 'update_hi_2_value': '(alu_lo)-(ipv4.p_pkt_0)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(0)', 'condition_hi': '((ipv4.p_pkt_0-alu_lo)+2)>0', 'condition_lo': '((0-ipv4.p_pkt_0)+alu_lo)<0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}], [{'output_dst': 'ipv4.p_state_001', 'update_hi_1_value': '(18)-(29)', 'update_hi_2_value': '(5)-(0)', 'update_lo_1_value': '(22)-(19)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '((0-alu_lo)+2)>0', 'condition_lo': '(ipv4.p_pkt_0-alu_lo)>0', 'update_hi_1_predicate': '(condition_lo)', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_lo)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp7)+(alu_lo)', 'update_lo_2_value': '(8)-(16)', 'condition_hi': '((0-ipv4.p__br_tmp7)-alu_lo)>0', 'condition_lo': '((0-alu_lo)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp7', 'update_hi_1_value': '1', 'update_hi_2_value': '(alu_lo)-(ipv4.p_pkt_0)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(0)', 'condition_hi': '((ipv4.p_pkt_0-alu_lo)+2)>0', 'condition_lo': '((0-ipv4.p_pkt_0)+alu_lo)<0', 'update_hi_1_predicate': ' not (condition_hi)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[], []]
[[1, 0, 1], [0, 1, 0]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p__br_tmp7 : 32 (signed);   
        p_state_001 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (ipv4.p_pkt_0-alu_lo)>0;
    condition_hi              : ((0-alu_lo)+2)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (22)-(19);
    update_lo_2_predicate     : (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     : (condition_lo);
    update_hi_1_value         : (18)-(29);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (5)-(0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_state_001;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-ipv4.p_pkt_0)+alu_lo)<0;
    condition_hi              : ((ipv4.p_pkt_0-alu_lo)+2)>0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (ipv4.p_pkt_0)-(0);
    update_hi_1_predicate     :  not (condition_hi);
    update_hi_1_value         : 1;
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (alu_lo)-(ipv4.p_pkt_0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp7;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-alu_lo)+1)==0;
    condition_hi              : ((0-ipv4.p__br_tmp7)-alu_lo)>0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (ipv4.p__br_tmp7)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (8)-(16);
    update_hi_1_predicate     : false;
    update_hi_1_value         : 0;
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (3)-(5);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.7292709350585938 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_4_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fb518d97580>, 'write': <dependencyGraph.Statement object at 0x7fb518d97370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fb518d975b0>, 'write': <dependencyGraph.Statement object at 0x7fb518d97310>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fb518d97580>, 'write': <dependencyGraph.Statement object at 0x7fb518d97370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb518d975b0>, 'write': <dependencyGraph.Statement object at 0x7fb518d97310>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb518d970a0>, <dependencyGraph.Codelet object at 0x7fb518d97100>, <dependencyGraph.Codelet object at 0x7fb518d97970>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb518d970a0>, <dependencyGraph.Codelet object at 0x7fb518d97970>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_101', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_101', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['p_pkt_0', 'state_1', 'p_state_001', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_state_001', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_000', 'p_pkt_0', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_000', 'p_pkt_0', 'p_state_001']
redundant outputs ['p__br_tmp4']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7fb518d977c0>]
adj_inputs ['state_1', 'p__br_tmp5']
redundant outputs ['p__br_tmp4', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp5']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | component b:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7fb518d977c0>]
removing two old components
adj_inputs ['state_1', 'p__br_tmp5']
redundant outputs ['p__br_tmp4', 'p_state_001', 'p_state_000']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0', 'p__br_tmp5']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['state_0', 'p__br_tmp5']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'p_state_001', 'p__br_tmp4', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp4;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_001;

 > FOUND OUT LINE : 	_out[2] = p_state_001;

> found out variable:  p_state_001
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_001
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_001
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 6 30 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 30, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 6 20 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, 20, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_hi ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_hi)+1)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_hi_1) + 1) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 2 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 2, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 6 30 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 30, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 17 20 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 17, 20, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 3 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+3)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 3) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) - register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)-register_lo)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) - register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_4_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp5;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 30 31 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 30, 31, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 20 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 20, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_hi ) != 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_hi)!=0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_hi_1) != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp5']
 *** found stateful dependencies between  2  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 64 rows, 41 columns and 126 nonzeros
Model fingerprint: 0x3ec89603
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 69 rows, 38 columns, 166 nonzeros
Variable types: 0 continuous, 38 integer (34 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7fb518d97490>, <alus.SALU object at 0x7fb518dcd3a0>, <alus.SALU object at 0x7fb518dcd5e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7fb518d97490>, 0), (<alus.SALU object at 0x7fb518dcd3a0>, 1), (<alus.SALU object at 0x7fb518dcd5e0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_state_001
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fb518d97490>
 -* this SALU:  <alus.SALU object at 0x7fb518dcd3a0>
 -* this SALU:  <alus.SALU object at 0x7fb518dcd5e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7fb518d97490>
 -* this SALU:  <alus.SALU object at 0x7fb518dcd3a0>
 -* this SALU:  <alus.SALU object at 0x7fb518dcd5e0>
salu_configs:  [[1, 0, 1], [0, 1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_state_001', 'update_hi_1_value': '(0)+(0)', 'update_hi_2_value': '(6)-(30)', 'update_lo_1_value': '1', 'update_lo_2_value': '(ipv4.p_pkt_0)+(0)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_hi)+1)==0', 'condition_lo': '((0-ipv4.p_pkt_0)+alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': '0', 'update_hi_1_value': '(2)+(2)', 'update_hi_2_value': '(6)-(30)', 'update_lo_1_value': '(ipv4.p__br_tmp5)+(alu_lo)', 'update_lo_2_value': '(20)-(17)', 'condition_hi': '(((0-ipv4.p__br_tmp5)-alu_lo)+3)==0', 'condition_lo': '((0-ipv4.p__br_tmp5)-alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': '(condition_hi)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(ipv4.p_pkt_0)+(3)', 'update_hi_2_value': '(31)-(30)', 'update_lo_1_value': '(0)-(20)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(alu_hi)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(ipv4.p_pkt_0-alu_hi) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}], [{'output_dst': 'ipv4.p_state_001', 'update_hi_1_value': '(0)+(0)', 'update_hi_2_value': '(6)-(30)', 'update_lo_1_value': '1', 'update_lo_2_value': '(ipv4.p_pkt_0)+(0)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_hi)+1)==0', 'condition_lo': '((0-ipv4.p_pkt_0)+alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': '0', 'update_hi_1_value': '(2)+(2)', 'update_hi_2_value': '(6)-(30)', 'update_lo_1_value': '(ipv4.p__br_tmp5)+(alu_lo)', 'update_lo_2_value': '(20)-(17)', 'condition_hi': '(((0-ipv4.p__br_tmp5)-alu_lo)+3)==0', 'condition_lo': '((0-ipv4.p__br_tmp5)-alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': '(condition_hi)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(ipv4.p_pkt_0)+(3)', 'update_hi_2_value': '(31)-(30)', 'update_lo_1_value': '(0)-(20)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(alu_hi)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(ipv4.p_pkt_0-alu_hi) !=0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}]]
[[], []]
[[1, 0, 1], [0, 1, 0]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_state_001 : 32 (signed);   
        p__br_tmp5 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.p_pkt_0)+alu_lo)<0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_hi)+1)==0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : 1;
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0)+(0);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (0)+(0);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (6)-(30);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : ipv4.p_state_001;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (ipv4.p_pkt_0-alu_hi) !=0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (0)-(20);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0)-(alu_hi);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (ipv4.p_pkt_0)+(3);
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : (31)-(30);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp5;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-ipv4.p__br_tmp5)-alu_lo)<0;
    condition_hi              : (((0-ipv4.p__br_tmp5)-alu_lo)+3)==0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (ipv4.p__br_tmp5)+(alu_lo);
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : (20)-(17);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (2)+(2);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (6)-(30);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.7442986965179443 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_5_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f2dfdab25b0>, 'write': <dependencyGraph.Statement object at 0x7f2dfdab2310>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f2dfdab2580>, 'write': <dependencyGraph.Statement object at 0x7f2dfdab2370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2dfdab25b0>, 'write': <dependencyGraph.Statement object at 0x7f2dfdab2310>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f2dfdab2580>, 'write': <dependencyGraph.Statement object at 0x7f2dfdab2370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2dfdab20a0>, <dependencyGraph.Codelet object at 0x7f2dfdab2100>, <dependencyGraph.Codelet object at 0x7f2dfdab2970>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2dfdab20a0>, <dependencyGraph.Codelet object at 0x7f2dfdab2970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p_state_000'}
p_state_001  is write flank
p_state_000  is read flank
elements in v_outputs:  {'p_state_001', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_000', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'state_1', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['state_1', 'p_state_000', 'p_state_001', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_000', 'p_state_001', 'p_pkt_0']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_001', 'p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_000']
redundant outputs ['p__br_tmp4']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f2dfdab27c0>]
adj_inputs ['state_1', 'p__br_tmp5']
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp4']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['p__br_tmp5', 'state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | component b:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f2dfdab27c0>]
removing two old components
adj_inputs ['state_1', 'p__br_tmp5']
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp4']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['p__br_tmp5', 'state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0', 'p_state_000', 'p__br_tmp4']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp4;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_000;

 > FOUND OUT LINE : 	_out[2] = p_state_000;

> found out variable:  p_state_000
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_000
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_000
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 7 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 7, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 31 25 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, 25, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 6 metadata_lo 25 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_lo, 25, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - 0 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-0)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - 0) < 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)>0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 5 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 5, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 20 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 20, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 20 11 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 20, 11, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_hi ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_hi)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_hi_1) < 0;
  )
demangled line:  bit condition_lo = ( register_hi + 15 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (register_hi+15)<0
    ( line =    bit condition_lo_s67 = (register_hi_1 + 15) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_5_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp5;

curr line: 	bit p__br_tmp4;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 3 26 28 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, 26, 28, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 25 31 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 25, 31, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 12 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 12, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 8 register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 8, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( 0 - register_lo ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (0-register_lo)<0
    ( line =    bit condition_hi_s55 = (0 - register_lo_0) < 0;
  )
demangled line:  bit condition_lo = ( metadata_lo - register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_lo-register_lo)<0
    ( line =    bit condition_lo_s67 = (metadata_lo - register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp5']
 *** found stateful dependencies between  2  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 64 rows, 41 columns and 126 nonzeros
Model fingerprint: 0x3ec89603
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 69 rows, 38 columns, 166 nonzeros
Variable types: 0 continuous, 38 integer (34 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f2dfdab2490>, <alus.SALU object at 0x7f2dfdae83a0>, <alus.SALU object at 0x7f2dfdae85e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f2dfdab2490>, 0), (<alus.SALU object at 0x7f2dfdae83a0>, 1), (<alus.SALU object at 0x7f2dfdae85e0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_state_000
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f2dfdab2490>
 -* this SALU:  <alus.SALU object at 0x7f2dfdae83a0>
 -* this SALU:  <alus.SALU object at 0x7f2dfdae85e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f2dfdab2490>
 -* this SALU:  <alus.SALU object at 0x7f2dfdae83a0>
 -* this SALU:  <alus.SALU object at 0x7f2dfdae85e0>
salu_configs:  [[1, 0, 1], [0, 1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_state_000', 'update_hi_1_value': '(7)', 'update_hi_2_value': '(31)+(25)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '1', 'condition_hi': '((0-ipv4.p_pkt_0)-0)<0', 'condition_lo': '((ipv4.p_pkt_0-alu_lo)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(5)-(1)', 'update_hi_2_value': '(20)+(alu_lo)', 'update_lo_1_value': '(ipv4.p__br_tmp5)+(alu_lo)', 'update_lo_2_value': '(20)-(11)', 'condition_hi': '((0-ipv4.p__br_tmp5)+alu_hi)<0', 'condition_lo': '(alu_hi+15)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not (condition_hi)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(28)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(alu_lo)-(8)', 'condition_hi': '(0-alu_lo)<0', 'condition_lo': '(ipv4.p_pkt_0-alu_lo)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}], [{'output_dst': 'ipv4.p_state_000', 'update_hi_1_value': '(7)', 'update_hi_2_value': '(31)+(25)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '1', 'condition_hi': '((0-ipv4.p_pkt_0)-0)<0', 'condition_lo': '((ipv4.p_pkt_0-alu_lo)+1)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(5)-(1)', 'update_hi_2_value': '(20)+(alu_lo)', 'update_lo_1_value': '(ipv4.p__br_tmp5)+(alu_lo)', 'update_lo_2_value': '(20)-(11)', 'condition_hi': '((0-ipv4.p__br_tmp5)+alu_hi)<0', 'condition_lo': '(alu_hi+15)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not (condition_hi)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(28)', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(alu_lo)-(8)', 'condition_hi': '(0-alu_lo)<0', 'condition_lo': '(ipv4.p_pkt_0-alu_lo)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[], []]
[[1, 0, 1], [0, 1, 0]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp5 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p_state_000 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((ipv4.p_pkt_0-alu_lo)+1)>0;
    condition_hi              : ((0-ipv4.p_pkt_0)-0)<0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : 1;
    update_hi_1_predicate     : false;
    update_hi_1_value         : (7);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (31)+(25);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_state_000;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (ipv4.p_pkt_0-alu_lo)<0;
    condition_hi              : (0-alu_lo)<0;
    update_lo_1_predicate     :  not (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_lo)-(8);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (28);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp5;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : (alu_hi+15)<0;
    condition_hi              : ((0-ipv4.p__br_tmp5)+alu_hi)<0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p__br_tmp5)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (20)-(11);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (5)-(1);
    update_hi_2_predicate     :  not (condition_hi);
    update_hi_2_value         : (20)+(alu_lo);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.772174119949341 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_6_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp8 = !(p_pkt_0<p_state_000);

lhs p__br_tmp8 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp8 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp8 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp8', 'p_pkt_0', 'p_state_000']
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp9 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp9 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp9', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f2af1d2d5b0>, 'write': <dependencyGraph.Statement object at 0x7f2af1d2d310>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f2af1d2d580>, 'write': <dependencyGraph.Statement object at 0x7f2af1d2d370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f2af1d2d5b0>, 'write': <dependencyGraph.Statement object at 0x7f2af1d2d310>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f2af1d2d580>, 'write': <dependencyGraph.Statement object at 0x7f2af1d2d370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp8 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp8 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f2af1d2d0a0>, <dependencyGraph.Codelet object at 0x7f2af1d2d100>, <dependencyGraph.Codelet object at 0x7f2af1d2d970>]
p_state_100 = state_1;
p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp8 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f2af1d2d0a0>, <dependencyGraph.Codelet object at 0x7f2af1d2d970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p_state_000'}
p_state_001  is write flank
p_state_000  is read flank
elements in v_outputs:  {'p_state_001', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp8 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp8', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp8  not in state vars
 statement:  p__br_tmp8 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_101', 'p_state_000', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp8 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_101', 'p_state_100']
 node inputs:  ['state_1', 'p__br_tmp9']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['p_state_001', 'p_state_000', 'state_1', 'p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_001', 'p_state_000', 'p_pkt_0']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp9']
 node inputs:  ['p_state_001', 'p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp9', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_000']
redundant outputs ['p__br_tmp8']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f2af1d2d7c0>]
adj_inputs ['state_1', 'p__br_tmp9']
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp8']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp9']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | component b:  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f2af1d2d7c0>]
removing two old components
adj_inputs ['state_1', 'p__br_tmp9']
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp8']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0', 'p__br_tmp9']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['state_0', 'p__br_tmp9']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp9', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'state_0', 'p__br_tmp8', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
u:  p_state_000 = state_0; p__br_tmp8 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp8;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp8 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_000;

 > FOUND OUT LINE : 	_out[2] = p_state_000;

> found out variable:  p_state_000
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_000
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_000
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 7 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 7, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 31 25 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, 25, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_hi 19 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 19, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 25 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 25, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit condition_lo = ( metadata_hi + 1 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (metadata_hi+1)<0
    ( line =    bit condition_lo_s67 = (metadata_hi + 1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp9']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp9', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp9 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp9  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 14 10 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 14, 10, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_hi 30 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_hi, 30, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-register_lo)+1)==0
    ( line =    bit condition_hi_s55 = ((0 - register_lo_0) + 1) == 0;
  )
demangled line:  bit condition_lo = register_hi != 0
process_salu_function: parsing  condition_lo ; rhs =  register_hi!=0
    ( line =    bit condition_lo_s67 = register_hi_1 != 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 11 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(11, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  11
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) || (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_6_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp9;

curr line: 	bit p__br_tmp8;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp8 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp8 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p__br_tmp9 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp9;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp9;

> found out variable:  p__br_tmp9
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp9
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp9
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 metadata_lo register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 metadata_hi 1 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 10 8 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 10, 8, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 1 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 1 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+1)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 1) < 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp9']
 *** found stateful dependencies between  2  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 64 rows, 41 columns and 126 nonzeros
Model fingerprint: 0x3ec89603
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 69 rows, 38 columns, 166 nonzeros
Variable types: 0 continuous, 38 integer (34 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f2af1d2d490>, <alus.SALU object at 0x7f2af1d633a0>, <alus.SALU object at 0x7f2af1d635e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f2af1d2d490>, 0), (<alus.SALU object at 0x7f2af1d633a0>, 1), (<alus.SALU object at 0x7f2af1d635e0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_state_000
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp9
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp9
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp9
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f2af1d2d490>
 -* this SALU:  <alus.SALU object at 0x7f2af1d633a0>
 -* this SALU:  <alus.SALU object at 0x7f2af1d635e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f2af1d2d490>
 -* this SALU:  <alus.SALU object at 0x7f2af1d633a0>
 -* this SALU:  <alus.SALU object at 0x7f2af1d635e0>
salu_configs:  [[1, 0, 1], [0, 1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_state_000', 'update_hi_1_value': '(7)', 'update_hi_2_value': '(31)+(25)', 'update_lo_1_value': '(0)-(19)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)<0', 'condition_lo': '(0+1)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(10)-(14)', 'update_hi_2_value': '(0)-(30)', 'update_lo_1_value': '(ipv4.p__br_tmp9)+(alu_lo)', 'update_lo_2_value': '(ipv4.p__br_tmp9)+(alu_lo)', 'condition_hi': '((0-alu_lo)+1)==0', 'condition_lo': 'alu_hi !=0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) or (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp9', 'update_hi_1_value': '(alu_lo)-(ipv4.p_pkt_0)', 'update_hi_2_value': '(0)+(1)', 'update_lo_1_value': '(10)-(8)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_0)-alu_lo)+1)<0', 'condition_lo': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not (condition_lo)', 'output_value': '0'}], [{'output_dst': 'ipv4.p_state_000', 'update_hi_1_value': '(7)', 'update_hi_2_value': '(31)+(25)', 'update_lo_1_value': '(0)-(19)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)<0', 'condition_lo': '(0+1)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': '(condition_lo)', 'update_lo_2_predicate': '(condition_hi)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(10)-(14)', 'update_hi_2_value': '(0)-(30)', 'update_lo_1_value': '(ipv4.p__br_tmp9)+(alu_lo)', 'update_lo_2_value': '(ipv4.p__br_tmp9)+(alu_lo)', 'condition_hi': '((0-alu_lo)+1)==0', 'condition_lo': 'alu_hi !=0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': '( not (condition_hi)) or (condition_lo)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp9', 'update_hi_1_value': '(alu_lo)-(ipv4.p_pkt_0)', 'update_hi_2_value': '(0)+(1)', 'update_lo_1_value': '(10)-(8)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_0)-alu_lo)+1)<0', 'condition_lo': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not (condition_lo)', 'output_value': '0'}]]
[[], []]
[[1, 0, 1], [0, 1, 0]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p__br_tmp9 : 32 (signed);   
        p_state_000 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (0+1)<0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)<0;
    update_lo_1_predicate     : (condition_lo);
    update_lo_1_value         : (0)-(19);
    update_lo_2_predicate     : (condition_hi);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (7);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (31)+(25);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_state_000;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    condition_hi              : (((0-ipv4.p_pkt_0)-alu_lo)+1)<0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (10)-(8);
    update_lo_2_predicate     :  not (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_1_value         : (alu_lo)-(ipv4.p_pkt_0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (0)+(1);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp9;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : alu_hi !=0;
    condition_hi              : ((0-alu_lo)+1)==0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p__br_tmp9)+(alu_lo);
    update_lo_2_predicate     : ( not (condition_hi)) or (condition_lo);
    update_lo_2_value         : (ipv4.p__br_tmp9)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (10)-(14);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (0)-(30);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.762848138809204 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_7_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp5 = p_pkt_0<p_state_100;

lhs p__br_tmp5 rhs p_pkt_0<p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = p_pkt_0<p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);

lhs p_state_001 rhs p__br_tmp5 ? (1+p_state_000) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_000', 'p_state_000']
p__br_tmp6 = !(p_pkt_0<p_state_100);

lhs p__br_tmp6 rhs !(p_pkt_0<p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp6 = !(p_pkt_0<p_state_100);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_100']
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp6 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp6', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp5 = p_pkt_0<p_state_100;
RAW p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
RAW p__br_tmp5 = p_pkt_0<p_state_100; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
RAW p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
RAW p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fa517f9d5b0>, 'write': <dependencyGraph.Statement object at 0x7fa517f9d520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fa517f9d580>, 'write': <dependencyGraph.Statement object at 0x7fa517f9d370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fa517f9d5b0>, 'write': <dependencyGraph.Statement object at 0x7fa517f9d520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fa517f9d580>, 'write': <dependencyGraph.Statement object at 0x7fa517f9d370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p__br_tmp5 = p_pkt_0<p_state_100 stmts len 1
p__br_tmp5 = p_pkt_0<p_state_100;
SCC 2
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp6 = !(p_pkt_0<p_state_100) stmts len 1
p__br_tmp6 = !(p_pkt_0<p_state_100);
v p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fa517f9d9d0>, <dependencyGraph.Codelet object at 0x7fa517f9da30>, <dependencyGraph.Codelet object at 0x7fa517f9d130>]
p_state_000 = state_0;
p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p__br_tmp5 = p_pkt_0<p_state_100;
p_state_100 = state_1;
p__br_tmp6 = !(p_pkt_0<p_state_100);
p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fa517f9d130>, <dependencyGraph.Codelet object at 0x7fa517f9d9d0>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_100'}
p_state_100  is read flank
everything fits within a stateful ALU. No need to do anything.
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_001', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp6 = !(p_pkt_0<p_state_100) p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp6 = !(p_pkt_0<p_state_100) p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p__br_tmp5 = p_pkt_0<p_state_100;', 'p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_000', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
     |  p__br_tmp5 = p_pkt_0<p_state_100;
redundant outputs []
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['p_state_100', 'p_pkt_0', 'state_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_state_100', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p__br_tmp5 = p_pkt_0<p_state_100;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = p_pkt_0<p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7fa517f9d1c0>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp5']
state_var ['state_0']
resultant component: 
p__br_tmp5 = p_pkt_0<p_state_100; p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_0', 'p_state_100', 'p_pkt_0']
new component outputs:  ['state_0']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_state_100', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_state_100', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 1
failed
---------- Merge failure. ---------
   | synthesis query failed. Not merging.
   | number of nodes in comp_graph:  3
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: node ::  p__br_tmp5 = p_pkt_0<p_state_100;
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_100', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_0', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = p_pkt_0<p_state_100;
     |  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['p_state_100', 'p_pkt_0']
redundant outputs ['p__br_tmp6', 'p_state_101']
state_var ['state_1']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p__br_tmp5 = p_pkt_0<p_state_100;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp5 = p_pkt_0<p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7fa517f9d1c0>]
adj_inputs ['state_0', 'p__br_tmp5']
redundant outputs ['p_state_100', 'p__br_tmp6', 'p_state_101']
state_var ['state_1']
resultant component: 
p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp5 = p_pkt_0<p_state_100;
new component inputs:  ['state_1', 'p_pkt_0']
new component outputs:  ['state_1', 'p__br_tmp5']
new component state_pkt_fields:  ['p_state_100', 'p_state_101']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p__br_tmp5 = p_pkt_0<p_state_100;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
merge component: component is ----  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p__br_tmp5 = p_pkt_0<p_state_100;  with *************************
[<dependencyGraph.Statement object at 0x7fa517f9d1c0>]
removing two old components
adj_inputs ['state_0', 'p__br_tmp5']
redundant outputs ['p_state_100', 'p__br_tmp6', 'p_state_101']
state_var ['state_1']
		* new component :  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp5 = p_pkt_0<p_state_100;
		* new component inputs :  ['state_1', 'p_pkt_0']
		* new component outputs :  ['state_1', 'p__br_tmp5']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101']
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp5 = p_pkt_0<p_state_100;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp5 = p_pkt_0<p_state_100;
 node outputs:  ['state_1', 'p__br_tmp5']
 node inputs:  ['state_1', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_0', 'p__br_tmp5'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp5 = p_pkt_0<p_state_100;
 * recursive_merge: finished processing  p__br_tmp5 = p_pkt_0<p_state_100;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  set()
set()
u:  p_state_100 = state_1; p__br_tmp6 = !(p_pkt_0<p_state_100); p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p__br_tmp5 = p_pkt_0<p_state_100;
v:  p_state_000 = state_0; p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000); state_0 = p_state_001;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p__br_tmp5']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp5 ? (1+p_state_000) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 28 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 28, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 1 register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 1, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 26 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+26)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 26) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+1)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_hi)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p_pkt_0']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_7_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp6;

curr line: 	int p_state_101;

curr line: 	bit p__br_tmp5;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp6 = !(p_pkt_0<p_state_100);

curr line: 	p_state_101 = p__br_tmp6 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p__br_tmp5 = p_pkt_0<p_state_100;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 1  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 7 7 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(7, 7, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 metadata_lo register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, metadata_lo, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 2 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+2)>0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 2) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_lo - register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_lo-register_lo)+1)==0
    ( line =    bit condition_lo_s67 = ((metadata_lo - register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_0_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_0_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_0 : self.alu_compnames is  {0: 'comp_1', 1: 'comp_0'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp5']
 *** found stateful dependencies between  1  and  0
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 
0,
# alus: =  2
 * gen_dependency_list: dependency between  1  and  0
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': [(1, 0)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 48 rows, 28 columns and 86 nonzeros
Model fingerprint: 0x6fdc813c
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve removed 3 rows and 3 columns
Presolve time: 0.00s
Presolved: 45 rows, 25 columns, 108 nonzeros
Variable types: 0 continuous, 25 integer (22 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 1
T0_A_1 -0
************************************************
Obj: 1
number of stages:  2
stage:  1.0
action:  0
num stages:  2
stage:  -0.0
action:  1
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7fa517f9d310>, <alus.SALU object at 0x7fa517fd5220>]
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
 > get_alu_stage: table  0 , alu_id =  0 :  1.0
alu  0  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  2  ;  [(<alus.SALU object at 0x7fa517f9d310>, 0), (<alus.SALU object at 0x7fa517fd5220>, 1)]
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fa517f9d310>
 -* this SALU:  <alus.SALU object at 0x7fa517fd5220>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7fa517f9d310>
 -* this SALU:  <alus.SALU object at 0x7fa517fd5220>
salu_configs:  [[0, 1], [1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(3)-(28)', 'update_hi_2_value': '(alu_hi)-(1)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(ipv4.p__br_tmp5)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp5)-alu_lo)+26)>0', 'condition_lo': '((0-ipv4.p__br_tmp5)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '1', 'update_hi_2_value': '(alu_lo)-(ipv4.p_pkt_0)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(alu_lo)', 'condition_hi': '((ipv4.p_pkt_0-alu_lo)+2)>0', 'condition_lo': '((ipv4.p_pkt_0-alu_lo)+1)==0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}], [{'output_dst': '0', 'update_hi_1_value': '(3)-(28)', 'update_hi_2_value': '(alu_hi)-(1)', 'update_lo_1_value': '(1)+(alu_lo)', 'update_lo_2_value': '(ipv4.p__br_tmp5)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp5)-alu_lo)+26)>0', 'condition_lo': '((0-ipv4.p__br_tmp5)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': ' not (condition_hi)', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '1', 'update_hi_2_value': '(alu_lo)-(ipv4.p_pkt_0)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(alu_lo)', 'condition_hi': '((ipv4.p_pkt_0-alu_lo)+2)>0', 'condition_lo': '((ipv4.p_pkt_0-alu_lo)+1)==0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[], []]
[[0, 1], [1, 0]]
num pipeline stages:  2
num_state_groups:  2
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p__br_tmp5 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((ipv4.p_pkt_0-alu_lo)+1)==0;
    condition_hi              : ((ipv4.p_pkt_0-alu_lo)+2)>0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (ipv4.p_pkt_0)+(alu_lo);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : 1;
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (alu_lo)-(ipv4.p_pkt_0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp5;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_1_action () {
    test_stateful_alu_0_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 0
table test_stateful_alu_0_1_table {
    actions {
        test_stateful_alu_0_1_action;
    }
    default_action: test_stateful_alu_0_1_action;
}

  

  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.p__br_tmp5)+1)==0;
    condition_hi              : (((0-ipv4.p__br_tmp5)-alu_lo)+26)>0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (1)+(alu_lo);
    update_lo_2_predicate     :  not (condition_hi);
    update_lo_2_value         : (ipv4.p__br_tmp5)+(alu_lo);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (3)-(28);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (alu_hi)-(1);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_0_action () {
    test_stateful_alu_1_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 1
table test_stateful_alu_1_0_table {
    actions {
        test_stateful_alu_1_0_action;
    }
    default_action: test_stateful_alu_1_0_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
      
        
          apply(test_stateful_alu_0_1_table);
        
      
    
      
      
        
          apply(test_stateful_alu_1_0_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.832294225692749 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_8_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f6eaa9c55b0>, 'write': <dependencyGraph.Statement object at 0x7f6eaa9c5310>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f6eaa9c5580>, 'write': <dependencyGraph.Statement object at 0x7f6eaa9c5370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f6eaa9c55b0>, 'write': <dependencyGraph.Statement object at 0x7f6eaa9c5310>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f6eaa9c5580>, 'write': <dependencyGraph.Statement object at 0x7f6eaa9c5370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f6eaa9c50a0>, <dependencyGraph.Codelet object at 0x7f6eaa9c5100>, <dependencyGraph.Codelet object at 0x7f6eaa9c5970>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f6eaa9c50a0>, <dependencyGraph.Codelet object at 0x7f6eaa9c5970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_000', 'p_state_001'}
p_state_000  is read flank
p_state_001  is write flank
elements in v_outputs:  {'p_state_000', 'p_state_001'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
flanks:  {'p_state_000', 'p_state_001'}
   - createing a node for flank  p_state_001
   - createing a node for flank  p_state_000
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_100', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_101', 'p_state_100', 'state_1']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
     | merged inputs:  ['p_pkt_0', 'p_state_000', 'state_1', 'p_state_001']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_state_000', 'p_state_001']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_pkt_0', 'p_state_000', 'p_state_001']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_000', 'p_state_001']
redundant outputs ['p__br_tmp4']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f6eaa9c57c0>]
adj_inputs ['state_1', 'p__br_tmp5']
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp4']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['state_0', 'p__br_tmp5']
new component state_pkt_fields:  ['p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | component b:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f6eaa9c57c0>]
removing two old components
adj_inputs ['state_1', 'p__br_tmp5']
redundant outputs ['p_state_000', 'p_state_001', 'p__br_tmp4']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['state_0', 'p__br_tmp5']
		* state_pkt_fields of new component:  ['p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['state_0', 'p__br_tmp5']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0', 'p__br_tmp4']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp4;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_001;

 > FOUND OUT LINE : 	_out[2] = p_state_001;

> found out variable:  p_state_001
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_001
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_001
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 metadata_hi 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_hi, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 17 0 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 17, 0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 2 15 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, 2, 15, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( metadata_lo - register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((metadata_lo-register_lo)+1)>0
    ( line =    bit condition_hi_s55 = ((metadata_lo - register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+1)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 3 1 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 3, 1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 26 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 26, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 31 3 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, 3, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) - register_hi ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)-register_hi)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) - register_hi_1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_8_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp5;

curr line: 	bit p__br_tmp4;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 28 11 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 28, 11, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 14 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, 14, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 31 21 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 31, 21, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)<0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) < 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp5']
 *** found stateful dependencies between  2  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 64 rows, 41 columns and 126 nonzeros
Model fingerprint: 0x3ec89603
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 69 rows, 38 columns, 166 nonzeros
Variable types: 0 continuous, 38 integer (34 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f6eaa9c5490>, <alus.SALU object at 0x7f6eaa9fb3a0>, <alus.SALU object at 0x7f6eaa9fb5e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f6eaa9c5490>, 0), (<alus.SALU object at 0x7f6eaa9fb3a0>, 1), (<alus.SALU object at 0x7f6eaa9fb5e0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_state_001
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f6eaa9c5490>
 -* this SALU:  <alus.SALU object at 0x7f6eaa9fb3a0>
 -* this SALU:  <alus.SALU object at 0x7f6eaa9fb5e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f6eaa9c5490>
 -* this SALU:  <alus.SALU object at 0x7f6eaa9fb3a0>
 -* this SALU:  <alus.SALU object at 0x7f6eaa9fb5e0>
salu_configs:  [[1, 0, 1], [0, 1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_state_001', 'update_hi_1_value': '(0)+(0)', 'update_hi_2_value': '(17)+(0)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_2_value': '(2)', 'condition_hi': '((ipv4.p_pkt_0-alu_lo)+1)>0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(1)-(3)', 'update_hi_2_value': '(ipv4.p__br_tmp5)-(26)', 'update_lo_1_value': '(ipv4.p__br_tmp5)+(alu_lo)', 'update_lo_2_value': '(31)+(3)', 'condition_hi': '((0-ipv4.p__br_tmp5)-alu_lo)>0', 'condition_lo': '((0-ipv4.p__br_tmp5)-alu_hi)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(11)-(28)', 'update_hi_2_value': '1', 'update_lo_1_value': '(31)-(21)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(0)', 'condition_hi': '(ipv4.p_pkt_0-alu_lo)<0', 'condition_lo': '((0-ipv4.p_pkt_0)+alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}], [{'output_dst': 'ipv4.p_state_001', 'update_hi_1_value': '(0)+(0)', 'update_hi_2_value': '(17)+(0)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_2_value': '(2)', 'condition_hi': '((ipv4.p_pkt_0-alu_lo)+1)>0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(1)-(3)', 'update_hi_2_value': '(ipv4.p__br_tmp5)-(26)', 'update_lo_1_value': '(ipv4.p__br_tmp5)+(alu_lo)', 'update_lo_2_value': '(31)+(3)', 'condition_hi': '((0-ipv4.p__br_tmp5)-alu_lo)>0', 'condition_lo': '((0-ipv4.p__br_tmp5)-alu_hi)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(11)-(28)', 'update_hi_2_value': '1', 'update_lo_1_value': '(31)-(21)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(0)', 'condition_hi': '(ipv4.p_pkt_0-alu_lo)<0', 'condition_lo': '((0-ipv4.p_pkt_0)+alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': '0'}]]
[[], []]
[[1, 0, 1], [0, 1, 0]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p__br_tmp5 : 32 (signed);   
        p_state_001 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+1)==0;
    condition_hi              : ((ipv4.p_pkt_0-alu_lo)+1)>0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : (ipv4.p_pkt_0)-(0);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (2);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (0)+(0);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (17)+(0);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_state_001;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-ipv4.p_pkt_0)+alu_lo)<0;
    condition_hi              : (ipv4.p_pkt_0-alu_lo)<0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (31)-(21);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0)+(0);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (11)-(28);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp5;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-ipv4.p__br_tmp5)-alu_hi)==0;
    condition_hi              : ((0-ipv4.p__br_tmp5)-alu_lo)>0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (ipv4.p__br_tmp5)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (31)+(3);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (1)-(3);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (ipv4.p__br_tmp5)-(26);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.6398119926452637 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_9_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp2 = !(p_pkt_0<p_state_000);

lhs p__br_tmp2 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp2 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp2 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp2', 'p_pkt_0', 'p_state_000']
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp3 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp3 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp3', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f3f225a8580>, 'write': <dependencyGraph.Statement object at 0x7f3f225a8370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f3f225a85b0>, 'write': <dependencyGraph.Statement object at 0x7f3f225a8310>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f3f225a8580>, 'write': <dependencyGraph.Statement object at 0x7f3f225a8370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f3f225a85b0>, 'write': <dependencyGraph.Statement object at 0x7f3f225a8310>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp2 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp2 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f3f225a8130>, <dependencyGraph.Codelet object at 0x7f3f225a8070>, <dependencyGraph.Codelet object at 0x7f3f225a8970>]
p_state_100 = state_1;
p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp2 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f3f225a8130>, <dependencyGraph.Codelet object at 0x7f3f225a8970>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p_state_000'}
p_state_001  is write flank
p_state_000  is read flank
elements in v_outputs:  {'p_state_001', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp2 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp2', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp2  not in state vars
 statement:  p__br_tmp2 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_100', 'p_state_101', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp2 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['state_1', 'p_state_100', 'p_state_101']
 node inputs:  ['state_1', 'p__br_tmp3']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['state_1', 'p_pkt_0', 'p_state_001', 'p_state_000']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_state_001', 'p_state_000']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp3']
 node inputs:  ['p_pkt_0', 'p_state_001', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_pkt_0', 'p_state_001', 'p_state_000']
redundant outputs ['p__br_tmp2']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f3f225a87c0>]
adj_inputs ['state_1', 'p__br_tmp3']
redundant outputs ['p__br_tmp2', 'p_state_001', 'p_state_000']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['p__br_tmp3', 'state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | component b:  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f3f225a87c0>]
removing two old components
adj_inputs ['state_1', 'p__br_tmp3']
redundant outputs ['p__br_tmp2', 'p_state_001', 'p_state_000']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['p__br_tmp3', 'state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp3', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'state_1', 'p__br_tmp3'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p__br_tmp2', 'state_0', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
u:  p_state_000 = state_0; p__br_tmp2 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_000;

 > FOUND OUT LINE : 	_out[2] = p_state_000;

> found out variable:  p_state_000
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_000
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_000
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 7 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 7, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 31 25 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, 25, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 1 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+1)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 1) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + 2 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+2)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + 2) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp3']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp3', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp3 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp3  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 0 0 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, 0, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 6 27 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 27, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 25 27 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 25, 27, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 2 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+2)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 2) == 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + register_lo ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+register_lo)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + register_lo_0) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 15 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(15, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  15
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  true
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_9_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp3;

curr line: 	bit p__br_tmp2;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp2 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp2 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p__br_tmp3 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp3;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp3;

> found out variable:  p__br_tmp3
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp3
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp3
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 6 metadata_lo 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_lo, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 6 metadata_hi 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(6, metadata_hi, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 4 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 4, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 31 3 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 31, 3, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_lo ) + 5 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_lo)+5)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_lo_0) + 5) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp3']
 *** found stateful dependencies between  2  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 64 rows, 41 columns and 126 nonzeros
Model fingerprint: 0x3ec89603
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 69 rows, 38 columns, 166 nonzeros
Variable types: 0 continuous, 38 integer (34 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f3f225a8490>, <alus.SALU object at 0x7f3f225de3a0>, <alus.SALU object at 0x7f3f225de5e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f3f225a8490>, 0), (<alus.SALU object at 0x7f3f225de3a0>, 1), (<alus.SALU object at 0x7f3f225de5e0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_state_000
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp3
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp3
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp3
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp3
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f3f225a8490>
 -* this SALU:  <alus.SALU object at 0x7f3f225de3a0>
 -* this SALU:  <alus.SALU object at 0x7f3f225de5e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f3f225a8490>
 -* this SALU:  <alus.SALU object at 0x7f3f225de3a0>
 -* this SALU:  <alus.SALU object at 0x7f3f225de5e0>
salu_configs:  [[1, 0, 1], [0, 1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_state_000', 'update_hi_1_value': '(7)', 'update_hi_2_value': '(31)+(25)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(alu_hi)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(0)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+1)>0', 'condition_lo': '((0-ipv4.p_pkt_0)+2)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(0)+(0)', 'update_hi_2_value': '(6)-(27)', 'update_lo_1_value': '(27)-(25)', 'update_lo_2_value': '(ipv4.p__br_tmp3)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp3)-alu_lo)+2)==0', 'condition_lo': '((0-ipv4.p__br_tmp3)+alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp3', 'update_hi_1_value': '1', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(3)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(((0-ipv4.p_pkt_0)-alu_lo)+5)>0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}], [{'output_dst': 'ipv4.p_state_000', 'update_hi_1_value': '(7)', 'update_hi_2_value': '(31)+(25)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(alu_hi)', 'update_lo_2_value': '(ipv4.p_pkt_0)-(0)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+1)>0', 'condition_lo': '((0-ipv4.p_pkt_0)+2)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': ' not ((condition_hi) or (condition_lo))', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '(0)+(0)', 'update_hi_2_value': '(6)-(27)', 'update_lo_1_value': '(27)-(25)', 'update_lo_2_value': '(ipv4.p__br_tmp3)+(alu_lo)', 'condition_hi': '(((0-ipv4.p__br_tmp3)-alu_lo)+2)==0', 'condition_lo': '((0-ipv4.p__br_tmp3)+alu_lo)<0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': 'true', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp3', 'update_hi_1_value': '1', 'update_hi_2_value': '1', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(3)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '(((0-ipv4.p_pkt_0)-alu_lo)+5)>0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[], []]
[[1, 0, 1], [0, 1, 0]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p__br_tmp3 : 32 (signed);   
        p_state_000 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.p_pkt_0)+2)<0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_lo)+1)>0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0)-(alu_hi);
    update_lo_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_2_value         : (ipv4.p_pkt_0)-(0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (7);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (31)+(25);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_state_000;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : (((0-ipv4.p_pkt_0)-alu_lo)+5)>0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (3);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : 1;
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : 1;
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp3;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-ipv4.p__br_tmp3)+alu_lo)<0;
    condition_hi              : (((0-ipv4.p__br_tmp3)-alu_lo)+2)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (27)-(25);
    update_lo_2_predicate     : true;
    update_lo_2_value         : (ipv4.p__br_tmp3)+(alu_lo);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (0)+(0);
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (6)-(27);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.856091022491455 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo, program name: marple_tcp_nmo_equivalent_10_canonicalizer. Grammar: pred_raw. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p__br_tmp4 = !(p_pkt_0<p_state_000);

lhs p__br_tmp4 rhs !(p_pkt_0<p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp4 = !(p_pkt_0<p_state_000);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000']
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

lhs p_state_001 rhs p__br_tmp4 ? (p_pkt_0) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

lhs p__br_tmp5 rhs (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

 is_read_flank: processing rhs_vars =  ['p_pkt_0', 'p_state_000', 'p_pkt_0', 'p_state_001']
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

lhs p_state_101 rhs p__br_tmp5 ? (1+p_state_100) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp5', 'p_state_100', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000);
RAW p_state_000 = state_0; p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_000 = state_0; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
RAW p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
RAW p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001); p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
RAW p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f491ec92580>, 'write': <dependencyGraph.Statement object at 0x7f491ec92370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f491ec925b0>, 'write': <dependencyGraph.Statement object at 0x7f491ec92310>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f491ec92580>, 'write': <dependencyGraph.Statement object at 0x7f491ec92370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f491ec925b0>, 'write': <dependencyGraph.Statement object at 0x7f491ec92310>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 1
v p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001) stmts len 1
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
SCC 2
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p__br_tmp4 = !(p_pkt_0<p_state_000) stmts len 1
p__br_tmp4 = !(p_pkt_0<p_state_000);
v p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f491ec920a0>, <dependencyGraph.Codelet object at 0x7f491ec92100>, <dependencyGraph.Codelet object at 0x7f491ec92970>]
p_state_100 = state_1;
p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
p_state_000 = state_0;
p__br_tmp4 = !(p_pkt_0<p_state_000);
p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f491ec920a0>, <dependencyGraph.Codelet object at 0x7f491ec92970>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
 -------------- v_outputs:  set()
everything fits within a stateful ALU (no outputs). No need to do anything.
 -------------- v_outputs:  {'p_state_001', 'p_state_000'}
p_state_001  is write flank
p_state_000  is read flank
elements in v_outputs:  {'p_state_001', 'p_state_000'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_0']
Case 2(a) triggered. 
all fills found. they are:  set()
codelet statements in order: 
0   p_state_000 = state_0
1   p__br_tmp4 = !(p_pkt_0<p_state_000)
2   p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
3   state_0 = p_state_001
p_state_001  not in state vars
 statement:  p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000)
 rhs_vars:  ['p__br_tmp4', 'p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p__br_tmp4  not in state vars
 statement:  p__br_tmp4 = !(p_pkt_0<p_state_000)
 rhs_vars:  ['p_pkt_0', 'p_state_000']
 state vars:  ['state_0']
p_state_000  not in state vars
 statement:  p_state_000 = state_0
 rhs_vars:  ['state_0']
 state vars:  ['state_0']
size of SCC graph pre-duplicate:  3
output  p_state_001    read_flanks:  []   write_flanks:  ['p_state_001']
output  p_state_000    read_flanks:  ['p_state_000']   write_flanks:  []
flanks:  {'p_state_001', 'p_state_000'}
   - createing a node for flank  p_state_000
   - createing a node for flank  p_state_001
size of SCC graph post-duplicate:  4
number of SCC nodes post splitting:  4
total number of nodes created:  4
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_2 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
codelet  p_state_000 = state_0 p__br_tmp4 = !(p_pkt_0<p_state_000) p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000) state_0 = p_state_001  is stateful
number of nodes on SCC_GRAPH:  4
number of nodes in comp_graph:  4
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 node outputs:  ['p_state_100', 'state_1', 'p_state_101']
 node inputs:  ['state_1', 'p__br_tmp5']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
     |  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
redundant outputs []
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
     | merged inputs:  ['p_state_001', 'p_state_000', 'p_pkt_0', 'state_1']
		| merged state vars:  {'state_1'}
		| merged stateless vars:  ['p_state_001', 'p_state_000', 'p_pkt_0']
 	| cannot merge: too many inputs.
     | not a merge candidate.
 * recursive_merge: finished processing  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
 * recursive_merge: node ::  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5']
 node inputs:  ['p_state_001', 'p_pkt_0', 'p_state_000']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
     |  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
adj_inputs ['p_state_001', 'p_pkt_0', 'p_state_000']
redundant outputs ['p__br_tmp4']
state_var ['state_0']
redundant outputs []
     | merged inputs:  ['p_pkt_0']
		| merged state vars:  {'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | b:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f491ec927c0>]
adj_inputs ['state_1', 'p__br_tmp5']
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp4']
state_var ['state_0']
resultant component: 
p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
new component inputs:  ['state_0', 'p_pkt_0']
new component outputs:  ['p__br_tmp5', 'state_0']
new component state_pkt_fields:  ['p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 | component b:  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 | state_pkt_fields of component a:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);  with *************************
[<dependencyGraph.Statement object at 0x7f491ec927c0>]
removing two old components
adj_inputs ['state_1', 'p__br_tmp5']
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp4']
state_var ['state_0']
		* new component :  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
		* new component inputs :  ['state_0', 'p_pkt_0']
		* new component outputs :  ['p__br_tmp5', 'state_0']
		* state_pkt_fields of new component:  ['p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);', 'p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 node outputs:  ['p__br_tmp5', 'state_0']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  {'p__br_tmp5', 'state_1'}
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 * recursive_merge: node ::  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001', 'p__br_tmp4', 'p_state_000']
 node inputs:  ['state_0', 'p_pkt_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
Principal Outputs:  set()
set()
u:  p_state_000 = state_0; p__br_tmp4 = !(p_pkt_0<p_state_000); p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000); state_0 = p_state_001; p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);
v:  p_state_100 = state_1; p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100); state_1 = p_state_101;
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_0_stateful.sk
find_output_dst: trying to find `void comp_0`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp4;

curr line: 	int p_state_000;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p_state_000;

 > FOUND OUT LINE : 	_out[2] = p_state_000;

> found out variable:  p_state_000
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p_state_000
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p_state_000
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 7 3 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 7, 3, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 31 25 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 31, 25, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 19 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 19, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 1 0 31 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 0, 31, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_lo)>0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + 1 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+1)<0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + 1) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_0_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_0_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_lo
demangled line:  return
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_0 , type?  STATEFUL
filename_to_compname: filename =  comp_0_stateful.sk.out
['comp_0']
~~~~~~~~~~set_alu_inputs:  ['state_1', 'p__br_tmp5']
 ~~~| state var:  ['state_1']
salu_inputs {'metadata_lo': 'p__br_tmp5', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	p_state_100 = state_1;

curr line: 	p_state_101 = p__br_tmp5 ? (1+p_state_100) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 1  metadata_lo= p__br_tmp5  metadata_hi= 0  register_lo= state_1  register_hi= 0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 9 0 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, 9, 0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 1 3 5 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(1, 3, 5, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 30 22 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 30, 22, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) - register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)-register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) - register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( metadata_hi - 0 ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((metadata_hi-0)+1)==0
    ( line =    bit condition_lo_s67 = ((metadata_hi - 0) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
~~~~~~~~~~set_alu_inputs:  ['state_0', 'p_pkt_0']
 ~~~| state var:  ['state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_0', 'register_hi': 0}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/marple_tcp_nmo/marple_tcp_nmo_equivalent_10_canonicalizer_out/comp_2_stateful.sk
find_output_dst: trying to find `void comp_2`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp5;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp4;

curr line: 	p_state_000 = state_0;

curr line: 	p__br_tmp4 = !(p_pkt_0<p_state_000);

curr line: 	p_state_001 = p__br_tmp4 ? (p_pkt_0) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	p__br_tmp5 = (p_pkt_0<p_state_000)&&(p_pkt_0<p_state_001);

curr line: 	_out[0] = state_0;

 > FOUND OUT LINE : 	_out[0] = state_0;

curr line: 	_out[1] = 0;

 > FOUND OUT LINE : 	_out[1] = 0;

curr line: 	_out[2] = p__br_tmp5;

 > FOUND OUT LINE : 	_out[2] = p__br_tmp5;

> found out variable:  p__br_tmp5
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  p__br_tmp5
Constructing new SALU: id= 2  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_0  register_hi= 0  output_dst= p__br_tmp5
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 4 1 register_lo update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, 1, register_lo_0, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 3 31 register_lo update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 31, register_lo_0, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 metadata_lo 7 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 7, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + register_lo ) > 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+register_lo)>0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + register_lo_0) > 0;
  )
demangled line:  bit condition_lo = ( ( 0 - metadata_lo ) + 1 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  ((0-metadata_lo)+1)==0
    ( line =    bit condition_lo_s67 = ((0 - metadata_lo) + 1) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 3 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(3, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  3
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_hi)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_2_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_2_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_2_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_2_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = 0
output_value found, is  0
demangled line:  _out0 [ 2 ] = register_hi
demangled line:  return
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
>>>>>>>>>> add_new_alu: adding ALU with id  2  and component  comp_2 , type?  STATEFUL
filename_to_compname: filename =  comp_2_stateful.sk.out
['comp_2']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
type of component in graph:  <class 'synthesis.StatefulComponent'>
||| alus_in_a_component  comp_2 : self.alu_compnames is  {0: 'comp_0', 1: 'comp_1', 2: 'comp_2'}
>>>>>>>>>>ALU1 outputs ['p__br_tmp5']
 *** found stateful dependencies between  2  and  1
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

+---> dependencies of ALU  2 : 
1,
# alus: =  3
 * gen_dependency_list: dependency between  2  and  1
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 3}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: Adding var  T0_A_2
ILP_Gurobi: alu_dep_dic:  {'T0': [(2, 1)]}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 64 rows, 41 columns and 126 nonzeros
Model fingerprint: 0x3ec89603
Model has 36 general constraints
Variable types: 0 continuous, 41 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 5 rows and 0 columns
Presolve removed 0 rows and 3 columns
Presolve time: 0.00s
Presolved: 69 rows, 38 columns, 166 nonzeros
Variable types: 0 continuous, 38 integer (34 binary)
Found heuristic solution: objective 11.0000000
Found heuristic solution: objective 1.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 1 11 

Optimal solution found (tolerance 1.00e-04)
Best objective 1.000000000000e+00, best bound 1.000000000000e+00, gap 0.0000%
Optimal objective: 1
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 1
T0_A_2 -0
************************************************
Obj: 1
number of stages:  2
stage:  -0.0
action:  0
num stages:  2
stage:  1.0
action:  1
num stages:  2
stage:  -0.0
action:  2
num stages:  2
================P4Codegen
[<alus.SALU object at 0x7f491ec92490>, <alus.SALU object at 0x7f491ecc83a0>, <alus.SALU object at 0x7f491ecc85e0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
 > get_alu_stage: table  0 , alu_id =  1 :  1.0
alu  1  is of type  STATEFUL ; scheduled to stage  1
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
 > get_alu_stage: table  0 , alu_id =  2 :  -0.0
alu  2  is of type  STATEFUL ; scheduled to stage  0
Codegen processed ALUs:  0  ;  []
Codegen processed SALUs:  3  ;  [(<alus.SALU object at 0x7f491ec92490>, 0), (<alus.SALU object at 0x7f491ecc83a0>, 1), (<alus.SALU object at 0x7f491ecc85e0>, 2)]
p4_codegen: PHV var found for stateful ALU, it is  p_state_000
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p__br_tmp5
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  []
generate_stateless_alu_matrix: stage  1 , with ALUs  []
* generating stateful ALU matrix. num pipeline stages:  2
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f491ec92490>
 -* this SALU:  <alus.SALU object at 0x7f491ecc83a0>
 -* this SALU:  <alus.SALU object at 0x7f491ecc85e0>
 - curr_stage:  1
 -* this SALU:  <alus.SALU object at 0x7f491ec92490>
 -* this SALU:  <alus.SALU object at 0x7f491ecc83a0>
 -* this SALU:  <alus.SALU object at 0x7f491ecc85e0>
salu_configs:  [[1, 0, 1], [0, 1, 0]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': 'ipv4.p_state_000', 'update_hi_1_value': '(7)', 'update_hi_2_value': '(31)+(25)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(0)-(31)', 'condition_hi': '(ipv4.p_pkt_0-alu_lo)>0', 'condition_lo': '((0-ipv4.p_pkt_0)+1)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp5)+(alu_lo)', 'update_lo_2_value': '(30)+(22)', 'condition_hi': '((0-ipv4.p__br_tmp5)-alu_lo)>0', 'condition_lo': '((0-0)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(1)', 'update_hi_2_value': '(alu_lo)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(alu_hi)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(7)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '((0-ipv4.p_pkt_0)+1)==0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}], [{'output_dst': 'ipv4.p_state_000', 'update_hi_1_value': '(7)', 'update_hi_2_value': '(31)+(25)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(0)-(31)', 'condition_hi': '(ipv4.p_pkt_0-alu_lo)>0', 'condition_lo': '((0-ipv4.p_pkt_0)+1)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': '(condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}, {'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(3)-(5)', 'update_lo_1_value': '(ipv4.p__br_tmp5)+(alu_lo)', 'update_lo_2_value': '(30)+(22)', 'condition_hi': '((0-ipv4.p__br_tmp5)-alu_lo)>0', 'condition_lo': '((0-0)+1)==0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_hi) and (condition_lo)', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}, {'output_dst': 'ipv4.p__br_tmp5', 'update_hi_1_value': '(1)', 'update_hi_2_value': '(alu_lo)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(alu_hi)', 'update_lo_2_value': '(ipv4.p_pkt_0)+(7)', 'condition_hi': '((0-ipv4.p_pkt_0)+alu_lo)>0', 'condition_lo': '((0-ipv4.p_pkt_0)+1)==0', 'update_hi_1_predicate': '(condition_hi)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not (condition_hi)', 'update_lo_2_predicate': 'false', 'output_value': '0'}]]
[[], []]
[[1, 0, 1], [0, 1, 0]]
num pipeline stages:  2
num_state_groups:  3
num alus per stage:  0
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p__br_tmp5 : 32 (signed);   
        p_pkt_0 : 32 (signed);   
        p_state_000 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_1 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}

register reg_2 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : ((0-ipv4.p_pkt_0)+1)<0;
    condition_hi              : (ipv4.p_pkt_0-alu_lo)>0;
    update_lo_1_predicate     : (condition_hi);
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (0)-(31);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (7);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (31)+(25);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p_state_000;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_2_blackbox {
    
    
    reg                       : reg_2;
    condition_lo              : ((0-ipv4.p_pkt_0)+1)==0;
    condition_hi              : ((0-ipv4.p_pkt_0)+alu_lo)>0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (ipv4.p_pkt_0)+(alu_hi);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (ipv4.p_pkt_0)+(7);
    update_hi_1_predicate     : (condition_hi);
    update_hi_1_value         : (1);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (alu_lo);
    output_predicate          : 1;
    output_value              : 0;
    output_dst                : ipv4.p__br_tmp5;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_2_action () {
    test_stateful_alu_0_2_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_2_table
@pragma stage 0
table test_stateful_alu_0_2_table {
    actions {
        test_stateful_alu_0_2_action;
    }
    default_action: test_stateful_alu_0_2_action;
}

  

  
    
  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_1_1_blackbox {
    
    
    reg                       : reg_1;
    condition_lo              : ((0-0)+1)==0;
    condition_hi              : ((0-ipv4.p__br_tmp5)-alu_lo)>0;
    update_lo_1_predicate     :  not (condition_hi);
    update_lo_1_value         : (ipv4.p__br_tmp5)+(alu_lo);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (30)+(22);
    update_hi_1_predicate     : false;
    update_hi_1_value         : 0;
    update_hi_2_predicate     : (condition_hi) and (condition_lo);
    update_hi_2_value         : (3)-(5);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_1_1_action () {
    test_stateful_alu_1_1_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_1_1_table
@pragma stage 1
table test_stateful_alu_1_1_table {
    actions {
        test_stateful_alu_1_1_action;
    }
    default_action: test_stateful_alu_1_1_action;
}

  
    
  



  

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
        
      
        
          apply(test_stateful_alu_0_2_table);
        
      
    
      
      
        
      
        
          apply(test_stateful_alu_1_1_table);
        
      
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.954390048980713 s
preprocessor time:
