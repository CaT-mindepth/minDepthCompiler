running mutation 1
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_1_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f712a1435b0>, 'write': <dependencyGraph.Statement object at 0x7f712a143520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f712a143580>, 'write': <dependencyGraph.Statement object at 0x7f712a143370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f712a1435b0>, 'write': <dependencyGraph.Statement object at 0x7f712a143520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f712a143580>, 'write': <dependencyGraph.Statement object at 0x7f712a143370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f712a1439d0>, <dependencyGraph.Codelet object at 0x7f712a143970>, <dependencyGraph.Codelet object at 0x7f712a143a30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f712a1439d0>, <dependencyGraph.Codelet object at 0x7f712a143970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_0', 'state_0', 'p_pkt_10']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f712a1435b0>, <dependencyGraph.Statement object at 0x7f712a1436d0>, <dependencyGraph.Statement object at 0x7f712a143520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101', 'p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f712a1435b0>, <dependencyGraph.Statement object at 0x7f712a1436d0>, <dependencyGraph.Statement object at 0x7f712a143520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101', 'p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['state_0', 'p_pkt_0', 'state_1']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f712a1431c0>]
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101', 'p_state_000', 'p__br_tmp1', 'p_state_001', 'p_pkt_10']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f712a1431c0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_100', 'p_state_101', 'p_state_000', 'p__br_tmp1', 'p_state_001', 'p_pkt_10']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_001;

curr line: 	int p_pkt_10;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 5 metadata_hi 2 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(5, metadata_hi, 2, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 14 register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 14, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 24 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 24, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( 0 - register_lo ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (0-register_lo)==0
    ( line =    bit condition_hi_s55 = (0 - register_lo_0) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+10)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 10) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_1_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f712a143310>, <alus.ALU object at 0x7f712a17bc40>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f712a17bc40>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f712a143310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f712a143310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '0', 'update_hi_2_value': '(alu_hi)-(2)', 'update_lo_1_value': '(14)-(alu_hi)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(0-alu_lo)==0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+10)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_lo)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+10)<0;
    condition_hi              : (0-alu_lo)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (14)-(alu_hi);
    update_lo_2_predicate     : (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : 0;
    update_hi_2_predicate     : (condition_lo);
    update_hi_2_value         : (alu_hi)-(2);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.7586424350738525 s
preprocessor time:
running mutation 2
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_2_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fe4111635b0>, 'write': <dependencyGraph.Statement object at 0x7fe411163520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fe411163580>, 'write': <dependencyGraph.Statement object at 0x7fe411163370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe4111635b0>, 'write': <dependencyGraph.Statement object at 0x7fe411163520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe411163580>, 'write': <dependencyGraph.Statement object at 0x7fe411163370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe4111639d0>, <dependencyGraph.Codelet object at 0x7fe411163970>, <dependencyGraph.Codelet object at 0x7fe411163a30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe4111639d0>, <dependencyGraph.Codelet object at 0x7fe411163970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_000', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fe4111635b0>, <dependencyGraph.Statement object at 0x7fe4111636d0>, <dependencyGraph.Statement object at 0x7fe411163520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp1', 'p_state_100', 'p_state_101', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fe4111635b0>, <dependencyGraph.Statement object at 0x7fe4111636d0>, <dependencyGraph.Statement object at 0x7fe411163520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp1', 'p_state_100', 'p_state_101', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['state_0', 'p_pkt_0', 'state_1']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fe411163130>]
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp1', 'p_pkt_10', 'p_state_100', 'p_state_101', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fe411163130>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p__br_tmp1', 'p_pkt_10', 'p_state_100', 'p_state_101', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp1;

curr line: 	int p_pkt_10;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	int p_state_001;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 15 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 15, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 13 4 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 13, 4, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( register_lo + 4 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (register_lo+4)==0
    ( line =    bit condition_hi_s55 = (register_lo_0 + 4) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 11 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+11)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 11) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_2_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fe411163310>, <alus.ALU object at 0x7fe41119bc40>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fe41119bc40>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7fe411163310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fe411163310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(ipv4.p_pkt_0)-(15)', 'update_hi_2_value': '(alu_hi)-(2)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(0)', 'update_lo_2_value': '(4)-(13)', 'condition_hi': '(alu_lo+4)==0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+11)>0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+11)>0;
    condition_hi              : (alu_lo+4)==0;
    update_lo_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0)+(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (4)-(13);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (ipv4.p_pkt_0)-(15);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (alu_hi)-(2);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.8432223796844482 s
preprocessor time:
running mutation 3
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_3_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fe75cd8b5b0>, 'write': <dependencyGraph.Statement object at 0x7fe75cd8b520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fe75cd8b580>, 'write': <dependencyGraph.Statement object at 0x7fe75cd8b370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fe75cd8b5b0>, 'write': <dependencyGraph.Statement object at 0x7fe75cd8b520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fe75cd8b580>, 'write': <dependencyGraph.Statement object at 0x7fe75cd8b370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fe75cd8b9d0>, <dependencyGraph.Codelet object at 0x7fe75cd8b970>, <dependencyGraph.Codelet object at 0x7fe75cd8ba30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fe75cd8b9d0>, <dependencyGraph.Codelet object at 0x7fe75cd8b970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_001', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'p_state_001', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fe75cd8b5b0>, <dependencyGraph.Statement object at 0x7fe75cd8b6d0>, <dependencyGraph.Statement object at 0x7fe75cd8b520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp1', 'p_state_101', 'p_state_100']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fe75cd8b5b0>, <dependencyGraph.Statement object at 0x7fe75cd8b6d0>, <dependencyGraph.Statement object at 0x7fe75cd8b520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp1', 'p_state_101', 'p_state_100']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['state_1', 'p_pkt_0', 'state_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fe75cd8b130>]
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp1', 'p_state_101', 'p_pkt_10', 'p_state_100']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fe75cd8b130>]
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000', 'p__br_tmp1', 'p_state_101', 'p_pkt_10', 'p_state_100']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_101;

curr line: 	int p_pkt_10;

curr line: 	int p_state_100;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 3 19 10 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, 19, 10, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 3 metadata_hi register_hi update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(3, metadata_hi, register_hi_1, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 26 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 26, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( metadata_lo - register_hi ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (metadata_lo-register_hi)==0
    ( line =    bit condition_hi_s55 = (metadata_lo - register_hi_1) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+10)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 10) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_3_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fe75cd8b310>, <alus.ALU object at 0x7fe75cdc3c40>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fe75cdc3c40>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7fe75cd8b310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fe75cd8b310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(10)', 'update_hi_2_value': '(alu_hi)-(2)', 'update_lo_1_value': '(alu_hi)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(ipv4.p_pkt_0-alu_hi)==0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+10)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_lo)', 'update_lo_1_predicate': '(condition_hi) and (condition_lo)', 'update_lo_2_predicate': '( not (condition_hi)) and (condition_lo)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+10)<0;
    condition_hi              : (ipv4.p_pkt_0-alu_hi)==0;
    update_lo_1_predicate     : (condition_hi) and (condition_lo);
    update_lo_1_value         : (alu_hi);
    update_lo_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (10);
    update_hi_2_predicate     : (condition_lo);
    update_hi_2_value         : (alu_hi)-(2);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.9536490440368652 s
preprocessor time:
running mutation 4
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_4_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f62d3f34580>, 'write': <dependencyGraph.Statement object at 0x7f62d3f34370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f62d3f345b0>, 'write': <dependencyGraph.Statement object at 0x7f62d3f34520>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f62d3f34580>, 'write': <dependencyGraph.Statement object at 0x7f62d3f34370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f62d3f345b0>, 'write': <dependencyGraph.Statement object at 0x7f62d3f34520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f62d3f349d0>, <dependencyGraph.Codelet object at 0x7f62d3f34970>, <dependencyGraph.Codelet object at 0x7f62d3f34a30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f62d3f349d0>, <dependencyGraph.Codelet object at 0x7f62d3f34970>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out
Stored read, write flank variables
{'p_state_001', 'p_state_100', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'state_0', 'p_pkt_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f62d3f345b0>, <dependencyGraph.Statement object at 0x7f62d3f346d0>, <dependencyGraph.Statement object at 0x7f62d3f34520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_000', 'p_state_100', 'p_state_101', 'p__br_tmp1', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f62d3f345b0>, <dependencyGraph.Statement object at 0x7f62d3f346d0>, <dependencyGraph.Statement object at 0x7f62d3f34520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p_state_100', 'p_state_101', 'p__br_tmp1', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['p_pkt_0', 'state_1', 'state_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f62d3f341c0>]
adj_inputs []
redundant outputs ['p_state_000', 'p_state_100', 'p_state_101', 'p_pkt_10', 'p__br_tmp1', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f62d3f341c0>]
removing two old components
adj_inputs []
redundant outputs ['p_state_000', 'p_state_100', 'p_state_101', 'p_pkt_10', 'p__br_tmp1', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_000;

curr line: 	int p_state_100;

curr line: 	int p_state_101;

curr line: 	int p_pkt_10;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_001;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo register_lo update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, register_lo_0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 21 12 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 21, 12, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+10)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 10) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 11 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+11)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 11) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 12 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(12, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  12
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 14 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(14, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  14
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) || (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_4_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f62d3f34310>, <alus.ALU object at 0x7f62d3f6ddc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f62d3f6ddc0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f62d3f34310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f62d3f34310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(alu_hi)-(2)', 'update_hi_2_value': '(alu_hi)-(2)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(12)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+10)<0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+11)<0', 'update_hi_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_hi_2_predicate': '(condition_hi)', 'update_lo_1_predicate': '(condition_hi) or (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+11)<0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_lo)+10)<0;
    update_lo_1_predicate     : (condition_hi) or (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (12);
    update_hi_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_1_value         : (alu_hi)-(2);
    update_hi_2_predicate     : (condition_hi);
    update_hi_2_value         : (alu_hi)-(2);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.8580331802368164 s
preprocessor time:
running mutation 5
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_5_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f761f305580>, 'write': <dependencyGraph.Statement object at 0x7f761f305370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f761f3055b0>, 'write': <dependencyGraph.Statement object at 0x7f761f305520>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f761f305580>, 'write': <dependencyGraph.Statement object at 0x7f761f305370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f761f3055b0>, 'write': <dependencyGraph.Statement object at 0x7f761f305520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f761f3059d0>, <dependencyGraph.Codelet object at 0x7f761f305970>, <dependencyGraph.Codelet object at 0x7f761f305a30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f761f3059d0>, <dependencyGraph.Codelet object at 0x7f761f305970>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_100', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'state_0', 'p_pkt_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f761f3055b0>, <dependencyGraph.Statement object at 0x7f761f3056d0>, <dependencyGraph.Statement object at 0x7f761f305520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_100', 'p__br_tmp1', 'p_state_101', 'p_state_000', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f761f3055b0>, <dependencyGraph.Statement object at 0x7f761f3056d0>, <dependencyGraph.Statement object at 0x7f761f305520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_100', 'p__br_tmp1', 'p_state_101', 'p_state_000', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['p_pkt_0', 'state_1', 'state_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f761f305130>]
adj_inputs []
redundant outputs ['p_pkt_10', 'p_state_100', 'p__br_tmp1', 'p_state_101', 'p_state_000', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f761f305130>]
removing two old components
adj_inputs []
redundant outputs ['p_pkt_10', 'p_state_100', 'p__br_tmp1', 'p_state_101', 'p_state_000', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_pkt_10;

curr line: 	int p_state_100;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_101;

curr line: 	int p_state_000;

curr line: 	int p_state_001;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 16 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 16, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 2 18 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 18, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_hi ) + 14 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_hi)+14)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_hi_1) + 14) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 11 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+11)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 11) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_5_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f761f305310>, <alus.ALU object at 0x7f761f33ddc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f761f33ddc0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f761f305310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f761f305310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(ipv4.p_pkt_0)-(16)', 'update_hi_2_value': '(alu_hi)-(2)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_2_value': '(alu_hi)-(18)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_hi)+14)==0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+11)>0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': ' not ((condition_hi) or (condition_lo))', 'update_lo_1_predicate': ' not (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+11)>0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_hi)+14)==0;
    update_lo_1_predicate     :  not (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0)-(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_hi)-(18);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (ipv4.p_pkt_0)-(16);
    update_hi_2_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_2_value         : (alu_hi)-(2);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.837080240249634 s
preprocessor time:
running mutation 6
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_6_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7f5b8580b5b0>, 'write': <dependencyGraph.Statement object at 0x7f5b8580b520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7f5b8580b580>, 'write': <dependencyGraph.Statement object at 0x7f5b8580b370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f5b8580b5b0>, 'write': <dependencyGraph.Statement object at 0x7f5b8580b520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f5b8580b580>, 'write': <dependencyGraph.Statement object at 0x7f5b8580b370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f5b8580b9d0>, <dependencyGraph.Codelet object at 0x7f5b8580b970>, <dependencyGraph.Codelet object at 0x7f5b8580ba30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f5b8580b9d0>, <dependencyGraph.Codelet object at 0x7f5b8580b970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_pkt_10', 'p_pkt_0']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f5b8580b5b0>, <dependencyGraph.Statement object at 0x7f5b8580b6d0>, <dependencyGraph.Statement object at 0x7f5b8580b520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_100', 'p__br_tmp1', 'p_state_000', 'p_state_101', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f5b8580b5b0>, <dependencyGraph.Statement object at 0x7f5b8580b6d0>, <dependencyGraph.Statement object at 0x7f5b8580b520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_100', 'p__br_tmp1', 'p_state_000', 'p_state_101', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['state_0', 'state_1', 'p_pkt_0']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f5b8580b130>]
adj_inputs []
redundant outputs ['p_state_100', 'p_pkt_10', 'p__br_tmp1', 'p_state_000', 'p_state_101', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f5b8580b130>]
removing two old components
adj_inputs []
redundant outputs ['p_state_100', 'p_pkt_10', 'p__br_tmp1', 'p_state_000', 'p_state_101', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_100;

curr line: 	int p_pkt_10;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_000;

curr line: 	int p_state_101;

curr line: 	int p_state_001;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 1 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 8 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 8, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 13 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+13)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 13) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 11 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+11)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 11) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 1 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(1, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  1
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !((condition_hi) || (condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  !(condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_6_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f5b8580b310>, <alus.ALU object at 0x7f5b85843dc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f5b85843dc0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f5b8580b310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f5b8580b310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(alu_hi)-(2)', 'update_hi_2_value': '(alu_hi)-(2)', 'update_lo_1_value': '(ipv4.p_pkt_0)-(0)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_0)-alu_lo)+13)==0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+11)>0', 'update_hi_1_predicate': ' not ((condition_hi) or (condition_lo))', 'update_hi_2_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': ' not (condition_lo)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+11)>0;
    condition_hi              : (((0-ipv4.p_pkt_0)-alu_lo)+13)==0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (ipv4.p_pkt_0)-(0);
    update_lo_2_predicate     :  not (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     :  not ((condition_hi) or (condition_lo));
    update_hi_1_value         : (alu_hi)-(2);
    update_hi_2_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_2_value         : (alu_hi)-(2);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.0257275104522705 s
preprocessor time:
running mutation 7
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_7_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_0', 'state_1'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_0': {'read': <dependencyGraph.Statement object at 0x7fb0a6fba5b0>, 'write': <dependencyGraph.Statement object at 0x7fb0a6fba520>}, 'state_1': {'read': <dependencyGraph.Statement object at 0x7fb0a6fba580>, 'write': <dependencyGraph.Statement object at 0x7fb0a6fba370>}}
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb0a6fba5b0>, 'write': <dependencyGraph.Statement object at 0x7fb0a6fba520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fb0a6fba580>, 'write': <dependencyGraph.Statement object at 0x7fb0a6fba370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb0a6fba9d0>, <dependencyGraph.Codelet object at 0x7fb0a6fba970>, <dependencyGraph.Codelet object at 0x7fb0a6fbaa30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb0a6fba9d0>, <dependencyGraph.Codelet object at 0x7fb0a6fba970>}
total number of nodes created:  3
state vars {'state_0', 'state_1'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out
Stored read, write flank variables
{'p_state_100', 'p_state_001', 'p_state_000', 'p_state_101'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_001', 'p_state_000', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_0', 'state_0', 'p_pkt_10']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fb0a6fba5b0>, <dependencyGraph.Statement object at 0x7fb0a6fba6d0>, <dependencyGraph.Statement object at 0x7fb0a6fba520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp1', 'p_state_000', 'p_state_101', 'p_state_100']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0', 'p_pkt_10']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 'p_pkt_10', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fb0a6fba5b0>, <dependencyGraph.Statement object at 0x7fb0a6fba6d0>, <dependencyGraph.Statement object at 0x7fb0a6fba520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp1', 'p_state_000', 'p_state_101', 'p_state_100']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'p_pkt_10', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['p_pkt_0', 'state_0', 'state_1']
		| merged state vars:  {'state_0', 'state_1'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fb0a6fba130>]
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp1', 'p_state_000', 'p_state_101', 'p_state_100', 'p_pkt_10']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fb0a6fba130>]
removing two old components
adj_inputs []
redundant outputs ['p_state_001', 'p__br_tmp1', 'p_state_000', 'p_state_101', 'p_state_100', 'p_pkt_10']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_001', 'p_state_000']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_001;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_000;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	int p_pkt_10;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 2 17 29 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 17, 29, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 4 metadata_lo 24 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 24, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_hi ) + 7 ) > 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_hi)+7)>0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_hi_1) + 7) > 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+10)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 10) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 6 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(6, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  6
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  false
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_7_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fb0a6fba310>, <alus.ALU object at 0x7fb0a6ff2dc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fb0a6ff2dc0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7fb0a6fba310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fb0a6fba310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(alu_hi)-(2)', 'update_hi_2_value': '(alu_hi)-(2)', 'update_lo_1_value': '(29)-(17)', 'update_lo_2_value': '(ipv4.p_pkt_0)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_hi)+7)>0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+10)<0', 'update_hi_1_predicate': '(condition_hi) and (condition_lo)', 'update_hi_2_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_1_predicate': 'false', 'update_lo_2_predicate': '(condition_lo)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_0 : 32 (signed);   
        p_pkt_10 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+10)<0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_hi)+7)>0;
    update_lo_1_predicate     : false;
    update_lo_1_value         : (29)-(17);
    update_lo_2_predicate     : (condition_lo);
    update_lo_2_value         : (ipv4.p_pkt_0);
    update_hi_1_predicate     : (condition_hi) and (condition_lo);
    update_hi_1_value         : (alu_hi)-(2);
    update_hi_2_predicate     : ( not (condition_hi)) and (condition_lo);
    update_hi_2_value         : (alu_hi)-(2);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.898080587387085 s
preprocessor time:
running mutation 8
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_8_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fb598854580>, 'write': <dependencyGraph.Statement object at 0x7fb598854370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fb5988545b0>, 'write': <dependencyGraph.Statement object at 0x7fb598854520>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fb598854580>, 'write': <dependencyGraph.Statement object at 0x7fb598854370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fb5988545b0>, 'write': <dependencyGraph.Statement object at 0x7fb598854520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fb5988549d0>, <dependencyGraph.Codelet object at 0x7fb598854970>, <dependencyGraph.Codelet object at 0x7fb598854a30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fb5988549d0>, <dependencyGraph.Codelet object at 0x7fb598854970>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_000', 'p_state_001', 'p_state_100'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'p_state_001', 'p_state_000']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_101', 'p_state_100']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_001', 'p_state_000']
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'p_pkt_0', 'state_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fb5988545b0>, <dependencyGraph.Statement object at 0x7fb5988546d0>, <dependencyGraph.Statement object at 0x7fb598854520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100', 'p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fb5988545b0>, <dependencyGraph.Statement object at 0x7fb5988546d0>, <dependencyGraph.Statement object at 0x7fb598854520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100', 'p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['state_1', 'p_pkt_0', 'state_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fb598854130>]
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100', 'p_pkt_10', 'p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fb598854130>]
removing two old components
adj_inputs []
redundant outputs ['p_state_101', 'p_state_100', 'p_pkt_10', 'p_state_000', 'p__br_tmp1', 'p_state_001']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_001', 'p_state_000']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	int p_state_100;

curr line: 	int p_pkt_10;

curr line: 	int p_state_000;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_001;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 1 6 8 update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(1, 6, 8, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 4 metadata_lo 4 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(4, metadata_lo, 4, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 21 12 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 21, 12, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( 0 - metadata_lo ) + 12 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  ((0-metadata_lo)+12)==0
    ( line =    bit condition_hi_s55 = ((0 - metadata_lo) + 12) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) < 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+10)<0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 10) < 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  false
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 10 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(10, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  10
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  (condition_lo)
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 2 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(2, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  2
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (!(condition_hi)) && (condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 8 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(8, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  8
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  (condition_hi) && (condition_lo)
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_8_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fb598854310>, <alus.ALU object at 0x7fb59888ceb0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fb59888ceb0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7fb598854310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fb598854310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(6)-(8)', 'update_hi_2_value': '(alu_hi)-(2)', 'update_lo_1_value': '(ipv4.p_pkt_0)', 'update_lo_2_value': '(12)', 'condition_hi': '((0-ipv4.p_pkt_0)+12)==0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+10)<0', 'update_hi_1_predicate': 'false', 'update_hi_2_predicate': '(condition_lo)', 'update_lo_1_predicate': '( not (condition_hi)) and (condition_lo)', 'update_lo_2_predicate': '(condition_hi) and (condition_lo)', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+10)<0;
    condition_hi              : ((0-ipv4.p_pkt_0)+12)==0;
    update_lo_1_predicate     : ( not (condition_hi)) and (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0);
    update_lo_2_predicate     : (condition_hi) and (condition_lo);
    update_lo_2_value         : (12);
    update_hi_1_predicate     : false;
    update_hi_1_value         : (6)-(8);
    update_hi_2_predicate     : (condition_lo);
    update_hi_2_value         : (alu_hi)-(2);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.9127347469329834 s
preprocessor time:
running mutation 9
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_9_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7fc97f067580>, 'write': <dependencyGraph.Statement object at 0x7fc97f067370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7fc97f0675b0>, 'write': <dependencyGraph.Statement object at 0x7fc97f067520>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7fc97f067580>, 'write': <dependencyGraph.Statement object at 0x7fc97f067370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7fc97f0675b0>, 'write': <dependencyGraph.Statement object at 0x7fc97f067520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7fc97f0679d0>, <dependencyGraph.Codelet object at 0x7fc97f067970>, <dependencyGraph.Codelet object at 0x7fc97f067a30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7fc97f0679d0>, <dependencyGraph.Codelet object at 0x7fc97f067970>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out
Stored read, write flank variables
{'p_state_101', 'p_state_100', 'p_state_001', 'p_state_000'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'p_state_001', 'state_0']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['state_0', 'p_pkt_0', 'p_pkt_10']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_0', 'p_pkt_10']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fc97f0675b0>, <dependencyGraph.Statement object at 0x7fc97f0676d0>, <dependencyGraph.Statement object at 0x7fc97f067520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_101', 'p_state_100']
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7fc97f0675b0>, <dependencyGraph.Statement object at 0x7fc97f0676d0>, <dependencyGraph.Statement object at 0x7fc97f067520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_101', 'p_state_001', 'p_state_100', 'p_state_000']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['p_pkt_0', 'state_1', 'state_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fc97f067130>]
adj_inputs []
redundant outputs ['p_state_101', 'p__br_tmp1', 'p_state_001', 'p_state_100', 'p_pkt_10', 'p_state_000']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_0', 'state_1']
new component state_pkt_fields:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7fc97f067130>]
removing two old components
adj_inputs []
redundant outputs ['p_state_101', 'p__br_tmp1', 'p_state_001', 'p_state_100', 'p_pkt_10', 'p_state_000']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_0', 'state_1']
		* state_pkt_fields of new component:  ['p_state_101', 'p_state_100', 'p_state_000', 'p_state_001']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_0', 'state_1']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	int p_state_101;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_001;

curr line: 	int p_state_100;

curr line: 	int p_pkt_10;

curr line: 	int p_state_000;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 0 6 4 update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 6, 4, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 3 12 register_hi update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(3, 12, register_hi_1, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) + register_lo ) + 10 ) < 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)+register_lo)+10)<0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) + register_lo_0) + 10) < 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) - register_hi ) + 3 ) == 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)-register_hi)+3)==0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) - register_hi_1) + 3) == 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 4 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(4, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  4
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  (condition_hi) && (!(condition_lo))
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_9_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7fc97f067310>, <alus.ALU object at 0x7fc97f09fdc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7fc97f09fdc0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7fc97f067310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7fc97f067310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(alu_hi)-(2)', 'update_hi_2_value': '(6)+(4)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(0)', 'update_lo_2_value': '(alu_hi)', 'condition_hi': '(((0-ipv4.p_pkt_0)+alu_lo)+10)<0', 'condition_lo': '(((0-ipv4.p_pkt_0)-alu_hi)+3)==0', 'update_hi_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': '(condition_hi) and ( not (condition_lo))', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': 'ipv4.p_pkt_0', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)-alu_hi)+3)==0;
    condition_hi              : (((0-ipv4.p_pkt_0)+alu_lo)+10)<0;
    update_lo_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_lo_1_value         : (ipv4.p_pkt_0)+(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (alu_hi);
    update_hi_1_predicate     : (condition_hi) and ( not (condition_lo));
    update_hi_1_value         : (alu_hi)-(2);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (6)+(4);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 2.956932306289673 s
preprocessor time:
running mutation 10
directory: /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease, program name: blue_decrease_equivalent_10_canonicalizer. Grammar: sub. Continue?
------------------------------
Preprocessing done. Continuing
p_state_000 = state_0;

lhs p_state_000 rhs state_0
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_000 = state_0;

 is_read_flank: processing rhs_vars =  ['state_0']
read flank
p_state_100 = state_1;

lhs p_state_100 rhs state_1
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_100 = state_1;

 is_read_flank: processing rhs_vars =  ['state_1']
read flank
p_pkt_10 = p_pkt_0-10;

lhs p_pkt_10 rhs p_pkt_0-10
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_pkt_10 = p_pkt_0-10;

 is_read_flank: processing rhs_vars =  ['p_pkt_0']
p__br_tmp1 = p_pkt_10>p_state_100;

lhs p__br_tmp1 rhs p_pkt_10>p_state_100
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p__br_tmp1 = p_pkt_10>p_state_100;

 is_read_flank: processing rhs_vars =  ['p_pkt_10', 'p_state_100']
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

lhs p_state_001 rhs p__br_tmp1 ? (p_state_000-2) : (p_state_000)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_state_000', 'p_state_000']
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

lhs p_state_101 rhs p__br_tmp1 ? (p_pkt_0) : (p_state_100)
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

 is_read_flank: processing rhs_vars =  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
state_0 = p_state_001;

lhs state_0 rhs p_state_001
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_0 = p_state_001;

 is_read_flank: processing rhs_vars =  ['p_state_001']
write flank
state_1 = p_state_101;

lhs state_1 rhs p_state_101
state_vars {'state_1', 'state_0'}
read/write flanks: processing line  state_1 = p_state_101;

 is_read_flank: processing rhs_vars =  ['p_state_101']
write flank
finding dependencies
RAW p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p_state_100 = state_1; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_pkt_10 = p_pkt_0-10; p__br_tmp1 = p_pkt_10>p_state_100;
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
RAW p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
RAW p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
RAW p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
read_write_flanks {'state_1': {'read': <dependencyGraph.Statement object at 0x7f88f8d60580>, 'write': <dependencyGraph.Statement object at 0x7f88f8d60370>}, 'state_0': {'read': <dependencyGraph.Statement object at 0x7f88f8d605b0>, 'write': <dependencyGraph.Statement object at 0x7f88f8d60520>}}
var:  state_1
{'read': <dependencyGraph.Statement object at 0x7f88f8d60580>, 'write': <dependencyGraph.Statement object at 0x7f88f8d60370>}
state_var  state_1
read_flank p_state_100 = state_1
write_flank state_1 = p_state_101
var:  state_0
{'read': <dependencyGraph.Statement object at 0x7f88f8d605b0>, 'write': <dependencyGraph.Statement object at 0x7f88f8d60520>}
state_var  state_0
read_flank p_state_000 = state_0
write_flank state_0 = p_state_001
total number of nodes created:  8
SCC 0
v p_state_000 = state_0 stmts len 1
p_state_000 = state_0;
v p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) stmts len 1
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
v state_0 = p_state_001 stmts len 1
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
SCC 1
v p_state_100 = state_1 stmts len 1
p_state_100 = state_1;
v p__br_tmp1 = p_pkt_10>p_state_100 stmts len 1
p__br_tmp1 = p_pkt_10>p_state_100;
v p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) stmts len 1
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
v state_1 = p_state_101 stmts len 1
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
SCC 2
v p_pkt_10 = p_pkt_0-10 stmts len 1
p_pkt_10 = p_pkt_0-10;
SCC graph nodes
[<dependencyGraph.Codelet object at 0x7f88f8d609d0>, <dependencyGraph.Codelet object at 0x7f88f8d60970>, <dependencyGraph.Codelet object at 0x7f88f8d60a30>]
p_state_000 = state_0;
p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);
state_0 = p_state_001;
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
stateful
p_state_100 = state_1;
p__br_tmp1 = p_pkt_10>p_state_100;
p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);
state_1 = p_state_101;
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
stateful
p_pkt_10 = p_pkt_0-10;
SCC graph stateful nodes {<dependencyGraph.Codelet object at 0x7f88f8d609d0>, <dependencyGraph.Codelet object at 0x7f88f8d60970>}
total number of nodes created:  3
state vars {'state_1', 'state_0'}
----calling split_SCC_graph---
 ---- split_SCC_graph ----- 
everything fits within a stateful ALU (no outputs). No need to do anything.
elements in v_outputs:  {'p__br_tmp1'}
Number of state variables:  1
NUmber of stateful registers:  2
State variables:  ['state_1']
Case 2(a) triggered. 
all fills found. they are:  {'p__br_tmp1'}
codelet statements in order: 
0   p_state_100 = state_1
1   p__br_tmp1 = p_pkt_10>p_state_100
2   p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
3   state_1 = p_state_101
p__br_tmp1  not in state vars
 statement:  p__br_tmp1 = p_pkt_10>p_state_100
 rhs_vars:  ['p_pkt_10', 'p_state_100']
 state vars:  ['state_1']
p_state_100  not in state vars
 statement:  p_state_100 = state_1
 rhs_vars:  ['state_1']
 state vars:  ['state_1']
p_state_101  not in state vars
 statement:  p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100)
 rhs_vars:  ['p__br_tmp1', 'p_pkt_0', 'p_state_100']
 state vars:  ['state_1']
size of SCC graph pre-duplicate:  3
   - createing a node for flank  p__br_tmp1
size of SCC graph post-duplicate:  3
number of SCC nodes post splitting:  3
total number of nodes created:  3
Output directory /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out could not be created
Synthesizer
output dir /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out
Stored read, write flank variables
{'p_state_000', 'p_state_100', 'p_state_101', 'p_state_001'}
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
-------------------------------------- stateful codelet vars :  ['state_0'] --------------***
compute_scc_graph: StatefulComponent( comp_0 ): state vars:  ['state_0']
codelet  p_state_000 = state_0 p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000) state_0 = p_state_001  is stateful
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
-------------------------------------- stateful codelet vars :  ['state_1'] --------------***
compute_scc_graph: StatefulComponent( comp_1 ): state vars:  ['state_1']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
codelet  p_state_100 = state_1 p__br_tmp1 = p_pkt_10>p_state_100 p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100) state_1 = p_state_101  is stateful
number of nodes on SCC_GRAPH:  3
number of nodes in comp_graph:  3
 * recursive_merge strategy: nodes ordered  ['p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['p_state_000', 'state_0', 'p_state_001']
 node inputs:  ['state_0', 'p__br_tmp1']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
adj_inputs ['state_0', 'p__br_tmp1']
redundant outputs ['p_state_100', 'p_state_101']
state_var ['state_1']
adj_inputs []
redundant outputs ['p_state_000', 'p_state_001']
state_var ['state_0']
     | merged inputs:  ['p_pkt_10', 'state_0', 'p_pkt_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_10', 'p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f88f8d605b0>, <dependencyGraph.Statement object at 0x7f88f8d606d0>, <dependencyGraph.Statement object at 0x7f88f8d60520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_100', 'p_state_001', 'p_state_101', 'p_state_000']
state_var ['state_1', 'state_0']
resultant component: 
p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_10', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_10', 'metadata_hi': 'p_pkt_0', 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_0_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 | component b:  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component a:  ['p_state_100', 'p_state_101']
 | state_pkt_fields of component b:  ['p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101;
 ********************** adding statements from component  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;  with *************************
[<dependencyGraph.Statement object at 0x7f88f8d605b0>, <dependencyGraph.Statement object at 0x7f88f8d606d0>, <dependencyGraph.Statement object at 0x7f88f8d60520>]
 --my stateful vars:  ['state_1']
 --their stateful vars:  ['state_0']
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_100', 'p_state_001', 'p_state_101', 'p_state_000']
state_var ['state_1', 'state_0']
		* new component :  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
 * recursive_merge strategy: nodes ordered  ['p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;', 'p_pkt_10 = p_pkt_0-10;']
 * recursive_merge: node ::  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_10', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
  - recursive_merge: looking at preds of  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
     |  p_pkt_10 = p_pkt_0-10;
redundant outputs []
adj_inputs []
redundant outputs []
state_var ['state_1', 'state_0']
		~ merge_candidate: cannot merge a and b because too many output variables.
     | merged inputs:  ['state_1', 'state_0', 'p_pkt_0']
		| merged state vars:  {'state_1', 'state_0'}
		| merged stateless vars:  ['p_pkt_0']
		| merge_candidate: Can try merging.
try_merge: trying to merge components: 
 | a:  p_pkt_10 = p_pkt_0-10;
 | b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f88f8d601c0>]
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_100', 'p_state_001', 'p_state_101', 'p_state_000', 'p_pkt_10']
state_var ['state_1', 'state_0']
resultant component: 
p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
new component inputs:  ['state_1', 'p_pkt_0', 'state_0']
new component outputs:  ['state_1', 'state_0']
new component state_pkt_fields:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
-------------- Merging... -------------
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/try_merge_query_1_stateful.sk.out
---------- Merge success. ---------
 mergeing two components...
perform_merge: merging components :
 | component a:  p_pkt_10 = p_pkt_0-10;
 | component b:  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 | state_pkt_fields of component b:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
merge component: component is ----  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ********************** adding statements from component  p_pkt_10 = p_pkt_0-10;  with *************************
[<dependencyGraph.Statement object at 0x7f88f8d601c0>]
removing two old components
adj_inputs []
redundant outputs ['p__br_tmp1', 'p_state_100', 'p_state_001', 'p_state_101', 'p_state_000', 'p_pkt_10']
state_var ['state_1', 'state_0']
		* new component :  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
		* new component inputs :  ['state_1', 'p_pkt_0', 'state_0']
		* new component outputs :  ['state_1', 'state_0']
		* state_pkt_fields of new component:  ['p_state_100', 'p_state_101', 'p_state_000', 'p_state_001']
duplicating predecessor.... 
p_pkt_10 = p_pkt_0-10;
 * recursive_merge strategy: nodes ordered  ['p_pkt_10 = p_pkt_0-10;', 'p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;']
 * recursive_merge: node ::  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 node outputs:  ['state_1', 'state_0']
 node inputs:  ['state_1', 'p_pkt_0', 'state_0']
 exclude_read_write_flanks: successor inputs:  set()
 exclude_read_write_flanks: filtered outputs (temp filtered):  []
 * recursive_merge: finished processing  p_pkt_10 = p_pkt_0-10; p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_100 = state_1; p__br_tmp1 = p_pkt_10>p_state_100; p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100); state_1 = p_state_101; p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 * recursive_merge: finished processing  p_state_000 = state_0; p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000); state_0 = p_state_001;
 ----------------- iteratively folding node. folding_idx =  0
 is_read_flank: processing rhs_vars =  ['state_0']
 is_read_flank: processing rhs_vars =  ['p_state_001']
 is_read_flank: processing rhs_vars =  ['state_1']
 is_read_flank: processing rhs_vars =  ['p_state_101']
Principal Outputs:  {'p_pkt_10'}
{'p_pkt_10'}
~~~~~~~~~~set_alu_inputs:  ['state_1', 'state_0', 'p_pkt_0']
 ~~~| state var:  ['state_1', 'state_0']
salu_inputs {'metadata_lo': 'p_pkt_0', 'metadata_hi': 0, 'register_lo': 'state_1', 'register_hi': 'state_0'}
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_1_stateful.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
running sketch for stateful
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_1_stateful.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_1_stateful.sk.out
 find_output_dst: reading from sketch file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_1_stateful.sk
find_output_dst: trying to find `void comp_1`
done
curr line: 	int[3] _out;

curr line: 	bit p__br_tmp1;

curr line: 	int p_state_100;

curr line: 	int p_state_001;

curr line: 	int p_state_101;

curr line: 	int p_state_000;

curr line: 	int p_pkt_10;

curr line: 	p_pkt_10 = p_pkt_0-10;

curr line: 	p_state_100 = state_1;

curr line: 	p__br_tmp1 = p_pkt_10>p_state_100;

curr line: 	p_state_101 = p__br_tmp1 ? (p_pkt_0) : (p_state_100);

curr line: 	state_1 = p_state_101;

curr line: 	p_state_000 = state_0;

curr line: 	p_state_001 = p__br_tmp1 ? (p_state_000-2) : (p_state_000);

curr line: 	state_0 = p_state_001;

curr line: 	_out[0] = state_1;

 > FOUND OUT LINE : 	_out[0] = state_1;

curr line: 	_out[1] = state_0;

 > FOUND OUT LINE : 	_out[1] = state_0;

curr line: 	_out[2] = 0;

 > FOUND OUT LINE : 	_out[2] = 0;

> found out variable:  0
curr line: 	return _out;

curr line: }

done ---- outs[-1] is  0
Constructing new SALU: id= 0  metadata_lo= p_pkt_0  metadata_hi= 0  register_lo= state_1  register_hi= state_0  output_dst= 0
demangled line:  _out0 = ( ( int [ 3 ] ) 0 )
demangled line:  int register_hi = register_hi
demangled line:  int register_lo = register_lo
demangled line:  int update_hi_1_value = 0
demangled line:  compute_alu ( 2 2 register_hi update_hi_1_value )
process_salu_function: parsing compute_alu   compute_alu(2, 2, register_hi_1, update_hi_1_value_s13)//{};

demangled line:  int update_hi_2_value = 0
demangled line:  compute_alu ( 4 1 register_hi update_hi_2_value )
process_salu_function: parsing compute_alu   compute_alu(4, 1, register_hi_1, update_hi_2_value_s23)//{};

demangled line:  int update_lo_1_value = 0
demangled line:  compute_alu ( 0 metadata_lo 0 update_lo_1_value )
process_salu_function: parsing compute_alu   compute_alu(0, metadata_lo, 0, update_lo_1_value_s33)//{};

demangled line:  int update_lo_2_value = 0
demangled line:  compute_alu ( 0 13 27 update_lo_2_value )
process_salu_function: parsing compute_alu   compute_alu(0, 13, 27, update_lo_2_value_s43)//{};

demangled line:  bit condition_hi = ( ( ( 0 - metadata_lo ) - register_lo ) + 20 ) == 0
process_salu_function: parsing  condition_hi ; rhs =  (((0-metadata_lo)-register_lo)+20)==0
    ( line =    bit condition_hi_s55 = (((0 - metadata_lo) - register_lo_0) + 20) == 0;
  )
demangled line:  bit condition_lo = ( ( ( 0 - metadata_lo ) + register_lo ) + 11 ) > 0
process_salu_function: parsing  condition_lo ; rhs =  (((0-metadata_lo)+register_lo)+11)>0
    ( line =    bit condition_lo_s67 = (((0 - metadata_lo) + register_lo_0) + 11) > 0;
  )
demangled line:  bit update_hi_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_hi_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_hi_1_predicate_s69);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_hi_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_hi_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_hi_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_hi_2_predicate_s71);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_hi_2_predicate  | RHS:  false
demangled line:  bit update_lo_1_predicate = 0
demangled line:  bool_op ( 5 condition_hi condition_lo update_lo_1_predicate )
process_salu_function: parsing bool_op   bool_op(5, condition_hi_s55, condition_lo_s67, update_lo_1_predicate_s73);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  5
PARSING BOOL_OP <---------------------- LHS:  update_lo_1_predicate  | RHS:  !(condition_lo)
demangled line:  bit update_lo_2_predicate = 0
demangled line:  bool_op ( 0 condition_hi condition_lo update_lo_2_predicate )
process_salu_function: parsing bool_op   bool_op(0, condition_hi_s55, condition_lo_s67, update_lo_2_predicate_s75);

 | -> eval_bool_op: op1  condition_hi  ; op2  condition_lo  ; opcode:  0
PARSING BOOL_OP <---------------------- LHS:  update_lo_2_predicate  | RHS:  false
demangled line:  assert ( ! ( update_hi_1_predicate && update_hi_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_hi_1_predicate && ( ! ( update_hi_2_predicate ) ) ) * comp_1_..ateful.sk : 195 *
demangled line:  {
demangled line:  register_hi = update_hi_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_hi_1_predicate ) ) && update_hi_2_predicate ) * comp_1_..ateful.sk : 197 *
demangled line:  {
demangled line:  register_hi = update_hi_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_hi = register_hi
demangled line:  }
demangled line:  }
demangled line:  assert ( ! ( update_lo_1_predicate && update_lo_2_predicate ) )
Illegal character '/'
Illegal character '/'
demangled line:  if ( update_lo_1_predicate && ( ! ( update_lo_2_predicate ) ) ) * comp_1_..ateful.sk : 206 *
demangled line:  {
demangled line:  register_lo = update_lo_1_value
demangled line:  }
demangled line:  else
demangled line:  {
Illegal character '/'
Illegal character '/'
demangled line:  if ( ( ! ( update_lo_1_predicate ) ) && update_lo_2_predicate ) * comp_1_..ateful.sk : 208 *
demangled line:  {
demangled line:  register_lo = update_lo_2_value
demangled line:  }
demangled line:  else
demangled line:  {
demangled line:  register_lo = register_lo
demangled line:  }
demangled line:  }
demangled line:  _out0 [ 0 ] = register_lo
demangled line:  _out0 [ 1 ] = register_hi
output_value found, is  register_hi
demangled line:  _out0 [ 2 ] = 0
demangled line:  return
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
>>>>>>>>>> add_new_alu: adding ALU with id  0  and component  comp_1 , type?  STATEFUL
filename_to_compname: filename =  comp_1_stateful.sk.out
['comp_1']
sketch /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk > /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
running sketch, bnd = 1
sketch_filename /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk
return code 0
solved
output is in /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
processing: output is stateless.
process_stateless_output: processing file  /home/xiangyug/ruijief/benchmarks/Domino_mutations/blue_decrease/blue_decrease_equivalent_10_canonicalizer_out/comp_3_stateless_p_pkt_10_bnd_1.sk.out
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
>>>>>>>>>> add_new_alu: adding ALU with id  1  and component  comp_3 , type?  STATELESS
filename_to_compname: filename =  comp_3_stateless_p_pkt_10_bnd_1.sk.out
['comp_3']
postprocessing sketch output: finding stateful dependencies
 *** find_stateful_dependencies ***
 *** Done find_stateful_dependencies ***
postprocessing sketch output: finding stateless dependencies in each component
 *** finding dependencies between stateless ALUs ***
 *** done finding dependencies between stateless ALUs ***
postprocessing sketch output: finding stateless dependencies between components
 *** find stateless dependencies between components *** 
 *** Done finding stateless+stateful dependencies ***
postprocessing done!
----- starting ILP Gurobi -----
+---> dependencies of ALU  0 : 

+---> dependencies of ALU  1 : 

# alus: =  2
Set parameter Username
Academic license - for non-commercial use only - expires 2022-10-14
ILP_Gurobi: alu_dic =  {'T0': 2}
ILP_Gurobi: Adding var  T0_A_0
ILP_Gurobi: Adding var  T0_A_1
ILP_Gurobi: alu_dep_dic:  {'T0': []}
Come here------------------------
Gurobi Optimizer version 9.5.0 build v9.5.0rc5 (linux64)
Thread count: 28 physical cores, 56 logical processors, using up to 28 threads
Optimize a model with 47 rows, 28 columns and 84 nonzeros
Model fingerprint: 0xe2ade813
Model has 24 general constraints
Variable types: 0 continuous, 28 integer (0 binary)
Coefficient statistics:
  Matrix range     [1e+00, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+01]
  GenCon rhs range [1e+00, 1e+01]
  GenCon coe range [1e+00, 1e+00]
Presolve added 1 rows and 0 columns
Presolve removed 0 rows and 1 columns
Presolve time: 0.00s
Presolved: 48 rows, 27 columns, 116 nonzeros
Variable types: 0 continuous, 27 integer (24 binary)
Found heuristic solution: objective 9.0000000
Found heuristic solution: objective 0.0000000

Explored 0 nodes (0 simplex iterations) in 0.01 seconds (0.00 work units)
Thread count was 28 (of 56 available processors)

Solution count 2: 0 9 

Optimal solution found (tolerance 1.00e-04)
Best objective 0.000000000000e+00, best bound 0.000000000000e+00, gap 0.0000%
Optimal objective: 0
Following is the result we want:*****************
T0_A_0 -0
T0_A_1 -0
************************************************
Obj: 0
number of stages:  1
stage:  -0.0
action:  0
num stages:  1
stage:  -0.0
action:  1
num stages:  1
================P4Codegen
[<alus.SALU object at 0x7f88f8d60310>, <alus.ALU object at 0x7f88f8d99dc0>]
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
 > get_alu_stage: table  0 , alu_id =  0 :  -0.0
alu  0  is of type  STATEFUL ; scheduled to stage  0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
 > get_alu_stage: table  0 , alu_id =  1 :  -0.0
alu  1  is of type  STATELESS ; scheduled to stage  0
Codegen processed ALUs:  1  ;  [(<alus.ALU object at 0x7f88f8d99dc0>, 0)]
Codegen processed SALUs:  1  ;  [(<alus.SALU object at 0x7f88f8d60310>, 0)]
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
p4_codegen: PHV var found for stateful ALU, it is  p_pkt_0
generate_stateless_alu_matrix: stage  0 , with ALUs  [{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]
* generating stateful ALU matrix. num pipeline stages:  1
 - curr_stage:  0
 -* this SALU:  <alus.SALU object at 0x7f88f8d60310>
salu_configs:  [[1]]
TofinoP4 J2 template codegen: --------------------
[[{'output_dst': '0', 'update_hi_1_value': '(alu_hi)-(2)', 'update_hi_2_value': '(1)', 'update_lo_1_value': '(ipv4.p_pkt_0)+(0)', 'update_lo_2_value': '(13)+(27)', 'condition_hi': '(((0-ipv4.p_pkt_0)-alu_lo)+20)==0', 'condition_lo': '(((0-ipv4.p_pkt_0)+alu_lo)+11)>0', 'update_hi_1_predicate': ' not (condition_lo)', 'update_hi_2_predicate': 'false', 'update_lo_1_predicate': ' not (condition_lo)', 'update_lo_2_predicate': 'false', 'output_value': 'alu_hi'}]]
[[{'enable': 1, 'opcode': 5, 'operand0': 'ipv4.p_pkt_0', 'operand1': '1', 'result': 'ipv4.p_pkt_10', 'immediate_operand': '10'}]]
[[1]]
num pipeline stages:  1
num_state_groups:  1
num alus per stage:  1
--------------------------------------------------
----------------------------------------------------
#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

/* // XXX: legacy code below
header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32 (signed);
        pkt_1 : 32 (signed);
        pkt_2 : 32 (signed);
        pkt_3 : 32 (signed);
        pkt_4 : 32 (signed);
    }
}*/

/* ruijief: added support for customized PHV container fields. */
header_type ipv4_t {
    fields {
 
        p_pkt_10 : 32 (signed);   
        p_pkt_0 : 32 (signed);  
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10

register reg_0 {
    width : 64;
    instance_count : MAX_SIZE;
    attributes : signed;
}



  
    
// Stateful ALU blackbox
blackbox stateful_alu test_stateful_alu_0_0_blackbox {
    
    
    reg                       : reg_0;
    condition_lo              : (((0-ipv4.p_pkt_0)+alu_lo)+11)>0;
    condition_hi              : (((0-ipv4.p_pkt_0)-alu_lo)+20)==0;
    update_lo_1_predicate     :  not (condition_lo);
    update_lo_1_value         : (ipv4.p_pkt_0)+(0);
    update_lo_2_predicate     : false;
    update_lo_2_value         : (13)+(27);
    update_hi_1_predicate     :  not (condition_lo);
    update_hi_1_value         : (alu_hi)-(2);
    update_hi_2_predicate     : false;
    update_hi_2_value         : (1);
    output_predicate          : 1;
    output_value              : alu_hi;
    output_dst                : 0;
    
    initial_register_lo_value : 0; // Magic value TODO: needs to be changed.
    initial_register_hi_value : 0;

    
}

// Stateful ALU Action
action test_stateful_alu_0_0_action () {
    test_stateful_alu_0_0_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
@pragma ignore_table_dependency test_stateful_alu_0_0_table
@pragma stage 0
table test_stateful_alu_0_0_table {
    actions {
        test_stateful_alu_0_0_action;
    }
    default_action: test_stateful_alu_0_0_action;
}

  



  

// Stateless ALU action






action test_stateless_alu_0_0_action () {
    
    
    subtract(ipv4.p_pkt_10, ipv4.p_pkt_0, 10);
    
}

// Stateless ALU table
@pragma ignore_table_dependency test_stateless_alu_0_0_table
@pragma stage 0
table test_stateless_alu_0_0_table {
    actions {
        test_stateless_alu_0_0_action;
    }
    default_action:  test_stateless_alu_0_0_action;
}

  


// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    
      
        
          apply(test_stateless_alu_0_0_table);
        
      
      
        
          apply(test_stateful_alu_0_0_table);
        
      
    
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
Time taken: 3.000530958175659 s
preprocessor time:
